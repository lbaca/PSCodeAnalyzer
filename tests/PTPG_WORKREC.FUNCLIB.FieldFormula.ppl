import PT_PGPACKAGE:PT_PGInformation;
import PT_PGPACKAGE:PT_PGChartState;


import PTPG_MENU:MenuBuilder:HoverMenu;


Declare Function GeneratePGChart PeopleCode PTPG_WORKREC1.PT_PGGENCHARTFLD FieldFormula;
Declare Function SetHTMLText PeopleCode PTPG_WORKREC1.PT_PGGENCHARTFLD FieldFormula;
Declare Function AddChartFilter PeopleCode PTPG_WORKREC1.PT_PGGENCHARTFLD FieldFormula;
Declare Function PopulateIWCFields PeopleCode PTPG_WORKREC1.PT_PGGENCHARTFLD FieldFormula;
Declare Function GetUniqueLabels PeopleCode PTPG_WORKREC1.FUNCLIB FieldFormula;
Declare Function getChartColor PeopleCode PTPG_WORKREC1.FUNCLIB FieldFormula;
Declare Function isAllowedOutsideContext PeopleCode PTPG_SIMPL_WRK.PTS_NUM_PG FieldFormula;


Component PT_PGPACKAGE:PT_PGInformation &compPGInfoObj;
Component boolean &bCurrChanged;
Component array of PT_PGPACKAGE:PT_PGChartState &compArrPGChartStateViewer;
Component boolean &bGenerateChartViewer;
Component boolean &bReload, &bIpadClient;
Component number &nGridType;
Component number &nFieldChangeTriggred;
Component boolean &bGridLayoutSet;
Component array of number &colNoChanged;
Component boolean &pgClmnChanged;
Component boolean &userModifiedCols, &PGOptAxisChanged;
Component boolean &userModifiedDSColType;
Component boolean &userModifiedSelCols;
Component Rowset &DataSourcers;
Component number &nFilterNo;
Component boolean &bResetPrimaryFilter;
Component number &nSelCols;
Component number &nNoDims;
Component number &nNoFacts;
Component number &nGridRowCols;
Component number &nGridColCols;
Component number &nChartXCols;
Component number &nChartYCols;
Component boolean &bTypeChanged;
Component boolean &dsValChanged;
Component boolean &bWarningMsgShown;
Component string &changedChtOption;
Component number &nVisibleCnt;
Component boolean &yAxisAngleChanged;
Component boolean &xAxisAngleChanged;
Component boolean &bStep4Initialized;
Component array of string &arrOptPrompts;
Component boolean &bShowTreeColumns;
Component array of string &drillURLMappedColums;
Component array of string &compMappingRemoved;
Component array of string &compMappingMarketRemoved;

Component boolean &bIsComposite;

/*************************************************************
* Function: StepEnable()                                     *
* Purpose:  Enables or disables the step PB                  *
* Inputs:   Effected Step, Enable (T/F)                      *
* Output:   None                                             *
*************************************************************/
Function StepEnable(&StepNum As number, &Enabled As boolean);
   If %Component <> Component.PTPG_WIZ_COMP Then
      Return;
   End-If;
   Local Field &MyField;
   
   Evaluate &StepNum
   When 1
      &MyField = GetField(PTPG_WORKREC.PTPG_INFO_PB);
      Break;
   When 2
      &MyField = GetField(PTPG_WORKREC.PTPG_DATASRC_PB);
      Break;
   When 3
      &MyField = GetField(PTPG_WORKREC.PTPG_DATAMODEL_PB);
      Break;
   When 4
      &MyField = GetField(PTPG_WORKREC.PTPG_VIEWOPT_PB);
      Break;
   When 5
      &MyField = GetField(PTPG_WORKREC.PTPG_DISPLAY_PB);
      Break;
   When-Other
      Return;
   End-Evaluate;
   
   If &Enabled Then
      &MyField.Enabled = True;
   Else
      &MyField.Enabled = False;
      
   End-If;
End-Function;

/*************************************************************
* Function: StepImage()                                      *
* Purpose:  Sets the image for the step PB                   *
* Inputs:   Effected Step, Image Type (ENA,DIS,INP,CMP)      *
* Output:   None                                             *
*************************************************************/
Function StepImage(&StepNum As number, &ImageType As string);
   If %Component <> Component.PTPG_WIZ_COMP Then
      Return;
   End-If;
   Local Field &MyField;
   Local string &ImageNameEnabled, &ImageNameInComplete, &ImageNameInProgress, &ImageNameComplete;
   Evaluate &StepNum
   When 1
      &MyField = GetField(PTPG_WORKREC.PTPG_INFO_PB);
      &ImageNameEnabled = Image.PT_STEP01_ENA_ICN;
      &ImageNameInComplete = Image.PT_STEP01_DIS_ICN;
      &ImageNameInProgress = Image.PT_STEP01_INP_ICN;
      &ImageNameComplete = Image.PT_STEP01_ENA_ICN;
      Break;
   When 2
      &MyField = GetField(PTPG_WORKREC.PTPG_DATASRC_PB);
      &ImageNameEnabled = Image.PT_STEP02_ENA_ICN;
      &ImageNameInComplete = Image.PT_STEP02_DIS_ICN;
      &ImageNameInProgress = Image.PT_STEP02_INP_ICN;
      &ImageNameComplete = Image.PT_STEP02_ENA_ICN;
      Break;
   When 3
      &MyField = GetField(PTPG_WORKREC.PTPG_DATAMODEL_PB);
      &ImageNameEnabled = Image.PT_STEP03_ENA_ICN;
      &ImageNameInComplete = Image.PT_STEP03_DIS_ICN;
      &ImageNameInProgress = Image.PT_STEP03_INP_ICN;
      &ImageNameComplete = Image.PT_STEP03_ENA_ICN;
      Break;
   When 4
      &MyField = GetField(PTPG_WORKREC.PTPG_VIEWOPT_PB);
      &ImageNameEnabled = Image.PT_STEP04_ENA_ICN;
      &ImageNameInComplete = Image.PT_STEP04_DIS_ICN;
      &ImageNameInProgress = Image.PT_STEP04_INP_ICN;
      &ImageNameComplete = Image.PT_STEP04_ENA_ICN;
      Break;
   When 5
      &MyField = GetField(PTPG_WORKREC.PTPG_DISPLAY_PB);
      &ImageNameEnabled = Image.PT_STEP05_ENA_ICN;
      &ImageNameInComplete = Image.PT_STEP05_DIS_ICN;
      &ImageNameInProgress = Image.PT_STEP05_INP_ICN;
      &ImageNameComplete = Image.PT_STEP05_ENA_ICN;
      Break;
   When-Other
      Return;
   End-Evaluate;
   
   Evaluate &ImageType
   When = "INC"
      &MyField.LabelImage = &ImageNameInComplete;
      Break;
   When = "INP"
      &MyField.LabelImage = &ImageNameInProgress;
      Break;
   When = "CMP"
      &MyField.LabelImage = &ImageNameComplete;
      Break;
   When-Other
      &MyField.LabelImage = &ImageNameEnabled;
      Break;
   End-Evaluate;
End-Function;


/*************************************************************
* Function: StepCheck()                                      *
* Purpose:  Checks data to set all Step PB. Called in Step On*
*           for each page activate, and on data source/      *
*           param changes.                                   *
*           No image difference for enabled/disabled.  The   *
*           Images differences are only for completed or not *
* Inputs:   Effected Step, Image Type (ENA,DIS,INP,CMP)      *
* Output:   None                                             *
*************************************************************/
Function StepCheck(&StepNum As number);
   Local number &I;
   StepEnable(1, True);
   Evaluate (&StepNum)
   When 1
      If All(PSPGCORE.PTPG_PGRIDTITLE.Value) Then
         If %Mode = %Action_Add Or
               %Mode = %Action_Correction Then
            StepEnable(2, True);
            StepImage(2, "INC");
            StepImage(3, "INC");
            StepImage(4, "INC");
            StepImage(5, "INC")
         Else
            StepEnable(2, True);
            StepEnable(3, True);
            StepEnable(4, True);
            StepEnable(5, True);
            StepImage(2, "CMP");
            StepImage(3, "CMP");
            StepImage(4, "CMP");
            StepImage(5, "CMP");
         End-If;
      Else
         StepEnable(2, False);
         StepEnable(3, False);
         StepEnable(4, False);
         StepEnable(5, False);
         StepImage(2, "INC");
         StepImage(3, "INC");
         StepImage(4, "INC");
         StepImage(5, "INC");
      End-If;
      
      Break;
   When 2
      StepImage(1, "CMP");
      If All(PSPGSETTINGS.PTPG_DSVALUE.Value) And
            &nSelCols > 2 Then
         If %Mode = %Action_Add Or
               %Mode = %Action_Correction Then
            StepEnable(3, True);
            StepImage(3, "INC");
            StepImage(4, "INC");
            StepImage(5, "INC");
         Else
            StepEnable(3, True);
            StepEnable(4, True);
            StepEnable(5, True);
            StepImage(3, "CMP");
            StepImage(4, "CMP");
            StepImage(5, "CMP");
         End-If;
      Else
         StepEnable(3, False);
         StepEnable(4, False);
         StepEnable(5, False);
         StepImage(3, "INC");
         StepImage(4, "INC");
         StepImage(5, "INC");
      End-If;
      Break;
   When 3
      StepImage(1, "CMP");
      StepImage(2, "CMP");
      If &nNoFacts > 1 And
            &nNoDims > 1 Then
         If %Mode = %Action_Add Or
               %Mode = %Action_Correction Then
            StepEnable(4, True);
            StepImage(4, "INC");
            StepImage(5, "INC");
         Else
            StepEnable(4, True);
            StepEnable(5, True);
            StepImage(4, "CMP");
            StepImage(5, "CMP");
         End-If;
      Else
         StepEnable(4, False);
         StepEnable(5, False);
         StepImage(4, "DIS");
         StepImage(5, "DIS");
      End-If;
      Break;
   When 4
      StepImage(1, "CMP");
      StepImage(2, "CMP");
      StepImage(3, "CMP");
      If &nGridRowCols >= 1 And
            &nGridColCols > 1 And
            &nChartXCols >= 1 And
            &nChartYCols >= 1 Then
         
         StepImage(3, "CMP");
         If %Mode = %Action_Add Or
               %Mode = %Action_Correction Then
            StepEnable(4, True);
            StepImage(5, "INC");
         Else
            StepEnable(4, True);
            StepEnable(5, True);
            StepImage(5, "CMP");
         End-If;
      Else
         StepEnable(4, True);
         StepEnable(5, False);
         StepImage(5, "DIS");
      End-If;
      Break;
   When 5
      StepImage(1, "CMP");
      StepImage(2, "CMP");
      StepImage(3, "CMP");
      StepImage(4, "CMP");
      Break;
   End-Evaluate;
   /* Set current step Enabled and InProgress */
   StepEnable(&StepNum, True);
   StepImage(&StepNum, "INP");
   
End-Function;


/*************************************************************
* Function: SetWizHdr()                                      *
* Purpose:  Sets the Feed Wizard Header subpage display      *
* Inputs:   Page Step Number                                 *
* Output:   None                                             *
*************************************************************/
Function SetWizHdr(&StepNum As number)
   Local string &TotalSteps, &ThisStep;
   
   &TotalSteps = MsgGetText(268, 27, "5");
   PTPG_WORKREC.PTPG_TRANS_TITLE = MsgGetText(268, 1, "Msg not found - Tran Title");
   
   Evaluate &StepNum
   When 1
      &ThisStep = MsgGetText(268, 22, "1");
      PTPG_WORKREC.PTPG_PAGE_STEP = MsgGetText(268, 21, "Msg not found - Step %1 of %2", &ThisStep, &TotalSteps);
      PTPG_WORKREC.PTPG_PAGE_TITLE = MsgGetText(268, 11, "Msg not found - Page Title");
      PTPG_WORKREC.PTPG_PAGE_TEXT = MsgGetExplainText(268, 11, "Msg not found - Page Text");
      Break;
   When 2
      &ThisStep = MsgGetText(268, 23, "2");
      PTPG_WORKREC.PTPG_PAGE_STEP = MsgGetText(268, 21, "Msg not found - Step %1 of %2", &ThisStep, &TotalSteps);
      PTPG_WORKREC.PTPG_PAGE_TITLE = MsgGetText(268, 12, "Msg not found - Page Title");
      PTPG_WORKREC.PTPG_PAGE_TEXT = MsgGetExplainText(268, 12, "Msg not found - Page Text");
      Break;
   When 3
      &ThisStep = MsgGetText(268, 24, "3");
      PTPG_WORKREC.PTPG_PAGE_STEP = MsgGetText(268, 21, "Msg not found - Step %1 of %2", &ThisStep, &TotalSteps);
      PTPG_WORKREC.PTPG_PAGE_TITLE = MsgGetText(268, 13, "Msg not found - Page Title");
      PTPG_WORKREC.PTPG_PAGE_TEXT = MsgGetExplainText(268, 13, "Msg not found - Page Text");
      Break;
   When 4
      &ThisStep = MsgGetText(268, 25, "4");
      PTPG_WORKREC.PTPG_PAGE_STEP = MsgGetText(268, 21, "Msg not found - Step %1 of %2", &ThisStep, &TotalSteps);
      PTPG_WORKREC.PTPG_PAGE_TITLE = MsgGetText(268, 14, "Msg not found - Page Title");
      PTPG_WORKREC.PTPG_PAGE_TEXT = MsgGetExplainText(268, 14, "Msg not found - Page Text");
      Break;
   When 5
      &ThisStep = MsgGetText(268, 26, "5");
      PTPG_WORKREC.PTPG_PAGE_STEP = MsgGetText(268, 21, "Msg not found - Step %1 of %2", &ThisStep, &TotalSteps);
      PTPG_WORKREC.PTPG_PAGE_TITLE = MsgGetText(268, 15, "Msg not found - Page Title");
      PTPG_WORKREC.PTPG_PAGE_TEXT = MsgGetExplainText(268, 15, "Msg not found - Page Text");
      Break;
   End-Evaluate;
   
End-Function;

/*************************************************************
* Function: StepOn()                                         *
* Purpose:  Set the step images for the current step         *
* Inputs:   Page Step Number                                 *
* Output:   None                                             *
*************************************************************/
Function StepOn(&StepNum)
   Local number &I;
   Local Field &MyField;
   
   /* Store current step for SavePostChange call to step check */
   &CurrentStep = &StepNum;
   PTPG_WORKREC.PTPG_PREV_PB.Enabled = True;
   PTPG_WORKREC.PTPG_NEXT_PB.Enabled = True;
   PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
   PTPG_WORKREC.PTPG_PREV_PB.DisplayOnly = False;
   /* Show/Hide Previous, Next and Finish PB according to current step */
   
   PTPG_WORKREC.PTPG_PREV_PB.Visible = True;
   PTPG_WORKREC.PTPG_NEXT_PB.Visible = True;
   
   Evaluate &StepNum
   When 1
      PTPG_WORKREC.PTPG_PREV_PB.Visible = False;
      PTPG_WORKREC.PTPG_NEXT_PB.Enabled = True;
      Break;
   When 2
      Local Rowset &rsQryCols = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_QRY_VIEW);
      If &rsQryCols.ActiveRowCount > 3 Then
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
      Else
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
      End-If;
      PTPG_WORKREC.PTPG_PREV_PB.Enabled = True;
      PTPG_WORKREC.PTPG_NEXT_PB.Enabled = True;
      Break;
   When 3
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
      PTPG_WORKREC.PTPG_PREV_PB.Enabled = True;
      PTPG_WORKREC.PTPG_NEXT_PB.Enabled = True;
      Break;
   When 4
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
      PTPG_WORKREC.PTPG_PREV_PB.Enabled = True;
      PTPG_WORKREC.PTPG_NEXT_PB.Enabled = True;
      Break;
   When 5
      PTPG_WORKREC.PTPG_NEXT_PB.Visible = False;
      If &isSaved Then
         REM PTPG_WORKREC.PTPG_FINISH_PB.Visible = False;
         REM PTPG_WORKREC.PTPG_RETURN_LIST.Visible = True;
         REM PTPG_WORKREC.PTPG_PREVIEW_PB.Visible = True;
      Else
         REM PTPG_WORKREC.PTPG_PB.Visible = True;
         REM PTPG_WORKREC.PTPG.Visible = False;
         REM PTPG_WORKREC.PTPG_PREVIEW_PB.Visible = False;
      End-If;
      Break;
   End-Evaluate;
   
   /* Set the page title */
   SetWizHdr(&StepNum);
   
   /* Set the step PB display */
   StepCheck(&StepNum);
End-Function;



Function GetFormatString(&nFormat As number) Returns string
   /* get display string */
   
   Evaluate &nFormat
   When 0 /* character */
      Return MsgGetText(268, 36, "String");
      Break;
      
   When 1 /* long character */
      Return MsgGetText(268, 37, "Long String");
      Break;
      
   When 2 /* number */
      Return MsgGetText(268, 38, "Number");
      Break;
      
   When 3 /* signed number */
      Return MsgGetText(268, 39, "Signed Number");
      Break;
      
   When 4 /* date */
      Return MsgGetText(268, 40, "Date");
      Break;
      
   When 5 /* time */
      Return MsgGetText(268, 41, "Time");
      Break;
      
   When 6 /* datetime */
      Return MsgGetText(268, 42, "Date and Time");
      Break;
      
   When 7 /* image */
      Return MsgGetText(268, 43, "Image");
      Break;
      
   When 8 /* imagereference */
      Return MsgGetText(268, 44, "Image Reference");
      Break;
      
   When 11 /* drilling URL */
      Return MsgGetText(268, 45, "Drilling URL");
      Break;
      
   End-Evaluate;
End-Function;



Function PopulateHelpMessage()
   If PSPGDISPOPT.MESSAGE_SET_NBR.Value = 0 Or
         PSPGDISPOPT.MESSAGE_NBR.Value = 0 Then
      PTPG_WORKREC.PTPG_MSG_TEXT.Visible = False;
      PTPG_WORKREC.PTPG_MSG_TEXT_LONG.Visible = False;
   Else
      Local string &sNotFoundMsg = "(Message not found)";
      Local string &Msg = MsgGet(PSPGDISPOPT.MESSAGE_SET_NBR.Value, PSPGDISPOPT.MESSAGE_NBR.Value, &sNotFoundMsg);
      Local string &MsgExplain = MsgGetExplainText(PSPGDISPOPT.MESSAGE_SET_NBR.Value, PSPGDISPOPT.MESSAGE_NBR.Value, " ");
      If (&sMsg <> &sNotFoundMsg) Then
         PTPG_WORKREC.PTPG_MSG_TEXT.Value = &Msg;
         PTPG_WORKREC.PTPG_MSG_TEXT_LONG.Value = &MsgExplain;
         PTPG_WORKREC.PTPG_MSG_TEXT.Visible = True;
         PTPG_WORKREC.PTPG_MSG_TEXT_LONG.Visible = True;
      End-If;
   End-If;
End-Function;



Function DisplayHelpMessage()
   If PSPGDISPOPT.PTPG_SHOWHELP.Value = "Y" Then
      PTPG_WORKREC.PTPG_GROUP_BOX6.Visible = True;
      PopulateHelpMessage();
   Else
      PTPG_WORKREC.PTPG_GROUP_BOX6.Visible = False;
   End-If;
End-Function;



Function OpenQueryObj(&sQryName As string, &sPrivateFlag As string) Returns ApiObject;
   Local boolean &bPublic;
   Local number &nResult;
   Local ApiObject &qryObj;
   &qryObj = %Session.GetQuery();
   If &sPrivateFlag = "Y" Then
      &bPublic = False;
   Else
      &bPublic = True;
   End-If;
   
   
   &nResult = &qryObj.OpenEx(&sQryName, &bPublic, False);
   
   If &nResult <> 0 Then
      Error MsgGet(268, 259, "Could not open query: %1", &sQryName);
      Return Null;
   End-If;
   
   If All(&qryObj) Then
      Return &qryObj;
   Else
      Error MsgGet(268, 259, "Could not open query: %1", &sQryName);
      Return Null;
   End-If;
End-Function;

Function OpenCompositeQueryObj(&sQryName As string, &sPrivateFlag As string) Returns ApiObject;
   Local boolean &bPublic;
   Local number &nResult;
   Local ApiObject &qryObj;
   &qryObj = %Session.GetCompositeQuery();
   If &sPrivateFlag = "Y" Then
      &bPublic = False;
   Else
      &bPublic = True;
   End-If;
   
   
   &nResult = &qryObj.Open(&sQryName, &bPublic);
   
   If &nResult <> 0 Then
      Error MsgGet(268, 259, "Could not open query: %1", &sQryName | &nResult | "5>");
      Return Null;
   End-If;
   
   If All(&qryObj) Then
      Return &qryObj;
   Else
      Error MsgGet(268, 259, "Could not open query: %1", &sQryName | "4>");
      Return Null;
   End-If;
End-Function;


/*Method to validate wizard prompts for invalid value. Used by save prechange and step 4 activate*/

Function ValidateWizPrompts
   Local Rowset &rsPrompt = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_PRMPTWIZVW);
   
   For &i = 1 To &rsPrompt.ActiveRowCount
      If (&rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_FORMATTYPE.Value = %FieldType_Date) Then
         If IsDate(&rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE.Value) = False Or
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE.Value = "" Then
            If &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE.Value = "" And
                  &arrOptPrompts.Find(&rsPrompt.GetRow(&i).GetRecord(1).PTPG_UNIQPROMPFLD.Value) = 0 Then
               SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PTPG_PRMPTWIZVW, &i, PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE);
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE.Style = "PSERROR";
               Error (MsgGetText(268, 474, "(Message not found)Invalid Date prompt value"));
            End-If;
         Else
            &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTDTE.Style = "PSEDITBOX";
         End-If;
      End-If;
      
      If (&rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_FORMATTYPE.Value = 3) Then
         If IsNumber(&rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTEDIT.Value) = False Or
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTEDIT.Value = "" Then
            If &arrOptPrompts.Find(&rsPrompt.GetRow(&i).GetRecord(1).PTPG_UNIQPROMPFLD.Value) = 0 Then
               SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PTPG_PRMPTWIZVW, &i, PTPG_PRMPTWIZVW.PTPG_QRYPROMPTEDIT);
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTEDIT.Style = "PSERROR";
               Error (MsgGetText(268, 473, "(Message not found)Invalid numeric prompt value"));
            End-If;
         Else
            &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPROMPTEDIT.Style = "PSEDITBOX";
         End-If;
      End-If;
      
      If (&rsPrompt.GetRow(&i).GetRecord(1).PTPG_QRYPROMPREC.Value = "PTPG_QRYPRMPTVW") Then
         If &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME.Value = "" Then
            If &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME.Value = "" And
                  &arrOptPrompts.Find(&rsPrompt.GetRow(&i).GetRecord(1).PTPG_UNIQPROMPFLD.Value) = 0 Then
               SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PTPG_PRMPTWIZVW, &i, PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME);
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME.Style = "PSERROR";
               Error (MsgGetText(268, 475, "(Message not found)Prompt value is required"));
            End-If;
         Else
            &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME.Style = "PSEDITBOX";
         End-If;
      End-If;
      
      
      
      Local string &promptRecName = &rsPrompt.GetRow(&i).GetRecord(1).PTPG_QRYPROMPREC.Value;
      If (&promptRecName <> "" And
            &promptRecName <> "PTPG_QRYPRMPTVW") Then
         If &rsPrompt.GetRow(&i).GetRecord(1).PTPG_FORMATTYPE.Value <> 999 Then
            If &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPRMPT.Value = "" Then
               If &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_PRMPTXLATNAME.Value = "" And
                     &arrOptPrompts.Find(&rsPrompt.GetRow(&i).GetRecord(1).PTPG_UNIQPROMPFLD.Value) = 0 Then
                  SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PTPG_PRMPTWIZVW, &i, PTPG_PRMPTWIZVW.PTPG_QRYPRMPT);
                  &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPRMPT.Style = "PSERROR";
                  Error (MsgGetText(268, 475, "(Message not found)Prompt value is required"));
               End-If;
            Else
               &rsPrompt(&i).PTPG_PRMPTWIZVW.PTPG_QRYPRMPT.Style = "PSEDITBOX";
            End-If;
         End-If;
      End-If;
      
      
   End-For;
End-Function;

/*Method to validate wizard aggregate against blank value selection. Used by save prechange*/

Function ValidateWizAggregates
   
   Local Rowset &aggFns;
   &aggFns = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   For &i = 1 To &aggFns.ActiveRowCount
      If ((&aggFns(&i).PSPGMODEL.PTPG_FORMATTYPE.Value = 2) Or
            (&aggFns(&i).PSPGMODEL.PTPG_FORMATTYPE.Value = 3)) And
            (&aggFns(&i).PSPGMODEL.PTPG_COLMNTYPE.Value = "VAL") And
            &aggFns(&i).PSPGMODEL.PTPG_AGGREGATE.Value = "" Then
         &aggFns(&i).PSPGMODEL.PTPG_AGGREGATE.Style = "PSERROR";
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
         Error MsgGet(15, 30, "Highlighted fields are required.");
         Break;
      Else
         &aggFns(&i).PSPGMODEL.PTPG_AGGREGATE.Style = "PSEDITBOX";
      End-If;
   End-For;
End-Function;


/*BP801I1 START*/
Function PopulateQryFields(&queryName As string, &bIsCompositeQuery)
   Local ApiObject &QueryObj, &QRYPROMPT;
   Local Grid &gridPrompt;
   Local number &exprCount;
   If All(&queryName) Then
      If &bIsCompositeQuery Then
         &QueryObj = OpenCompositeQueryObj(&queryName, "N");
         &QrySelects = &QueryObj.CompositeQueryOutputFields;
         &QryPrompts = &QueryObj.Prompts;
         &nCount = &QueryObj.CompositeQueryOutputFields.Count;
         &bIsComposite = True;
      Else
         &QueryObj = OpenQueryObj(&queryName, "N");
         &QrySelects = &QueryObj.QuerySelect.QueryOutputFields;
         &QryPrompts = &QueryObj.runtimeprompts;
         &nCount = &QueryObj.QuerySelect.QueryOutputFields.Count;
         &bIsComposite = False;
      End-If;
      
      
      &rsQryCols = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_QRY_VIEW);
      &rsQryprompts = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_PRMPTWIZVW);
      If &nCount < 2 Then
         MessageBox(0, "", 268, 28, "Message not found.");
         PSPGSETTINGS.PTPG_DSVALUE = "";
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
         Return;
      End-If;
      
      /*Drilling URL start*/
      /*To Do revisit this for composite query*/
      If Not &bIsCompositeQuery Then
         Local ApiObject &expressions;
         Local string &exprText;
         Local number &pos, &m;
         &expressions = &QueryObj.QuerySelect.Expressions;
         If &expressions <> Null And
               &expressions.count > 0 Then
            For &exprCount = 1 To &expressions.count
               If &expressions.item(&exprCount).Type = %FieldType_URL Then
                  &exprText = &expressions.item(&exprCount).Text;
                  &pos = Find(":", &exprText);
                  If &pos > 0 Then
                     If &drillURLMappedColums = Null Then
                        &drillURLMappedColums = CreateArrayRept("", 0);
                     End-If;
                     &exprText = Substring(&exprText, &pos + 1, Len(&exprText));
                     &exprText = RTrim(&exprText, "'");
                     Local array of string &expMapArr = Split(&exprText, ":");
                     If &expMapArr <> Null Then
                        For &m = 1 To &expMapArr.Len
                           &drillURLMappedColums.Push(&expMapArr [&m]);
                        End-For;
                     End-If;
                  End-If;
               End-If;
               
            End-For;
         End-If;
      End-If;
      /*Drilling URL end*/
      
      For &r = &rsQryCols.ActiveRowCount To 1 Step - 1
         &rsQryCols.DeleteRow(&r);
      End-For;
      
      &rsQryprompts.Flush();
      Local number &nXlatType;
      Local ApiObject &QueryObjChild, &QrySelectsChild;
      Local string &qalias;
      
      If Not &bIsCompositeQuery Then
         Local Grid &PGDsCols = GetGrid(Page.PTPG_WIZ_DATASRC, Record.PTPG_QRY_VIEW);
         &PGDsCols.GetColumn("PTPG_BASEQUERY").Visible = False;
      End-If;
      For &r = 1 To &nCount
         If &bIsCompositeQuery Then
            /*bp marker expresion  start*/
            If &QrySelects.item(&r).FldExpNumber <> 0 Then
               Local ApiObject &epncollection = &QueryObj.Expressions;
               Local ApiObject &epn = &epncollection.Item(&QrySelects.item(&r).FldExpNumber);
               &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.value = &epn.Type;
               &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMAT.value = GetFormatString(&epn.Type);
               
               &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSUNIQUEFLD.value = &QrySelects.item(&r).Name;
               &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelects.item(&r).Heading;
               &rsQryCols.InsertRow(&r);
               
               Continue;
            End-If;
            /*bp marker expresion end*/
            If &qalias <> &QrySelects.item(&r).QueryAlias Then
               If &QueryObjChild <> Null Then
                  &QueryObjChild.close();
               End-If;
               &qalias = &QrySelects.item(&r).QueryAlias;
               &QueryObjChild = OpenQueryObj(&QueryObj.Queries.ItemByAlias(&QrySelects.item(&r).QueryAlias).QueryName, "N");
               &QrySelectsChild = &QueryObjChild.QuerySelect.QueryOutputFields;
            End-If;
            rem &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelectsChild.item(&r).Name;
            
            &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSUNIQUEFLD.value = &QrySelects.item(&r).QueryAlias | "." | &QrySelects.item(&r).Name;
            For &m = 1 To &QrySelectsChild.Count
               If &QrySelectsChild.item(&m).HeadingUniqueFieldName = &QrySelects.item(&r).Name Then
                  Evaluate &QrySelectsChild.item(&m).HeadingType
                  When %Query_HdgNone /* none */
                  When %Query_HdgText /* text */
                     &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelectsChild.item(&m).HeadingText;
                     Break;
                  When %Query_HdgRftShort /* xlat short */
                     &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelectsChild.item(&m).ShortName;
                     Break;
                  When %Query_HdgRftLong /* xlat long */
                     &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelectsChild.item(&m).LongName;
                     Break;
                  End-Evaluate;
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMAT.value = GetFormatString(&QrySelectsChild.Item(&m).Type);
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.value = &QrySelectsChild.item(&m).Type;
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value;
                  /*Set the baseq uery name here*/
                  If &QueryObjChild.Description <> "" Then
                     &rsQryCols.getRow(&r).GetRecord(1).PTPG_BASEQUERY.value = &QueryObjChild.Description;
                  Else
                     &rsQryCols.getRow(&r).GetRecord(1).PTPG_BASEQUERY.value = &QueryObjChild.Name;
                  End-If;
                  &nXlatType = &QrySelectsChild.item(&m).TranslateOption;
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_TRANSLATEOPT.value = String(&nXlatType);
                  Break;
               Else
                  Continue;
               End-If;
            End-For;
            
         Else
            Evaluate &QrySelects.item(&r).HeadingType
            When %Query_HdgNone /* none */
            When %Query_HdgText /* text */
               &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelects.item(&r).HeadingText;
               Break;
            When %Query_HdgRftShort /* xlat short */
            When %Query_HdgRftLong /* xlat long */
               If &QrySelects.item(&r).HeadingType = %Query_HdgRftShort Then
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelects.item(&r).ShortName;
               Else
                  &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSCOLUMN.value = &QrySelects.item(&r).LongName;
               End-If;
               Break;
            End-Evaluate;
            
            
            
            &rsQryCols.getRow(&r).GetRecord(1).PTPG_DSUNIQUEFLD.value = &QrySelects.item(&r).HeadingUniqueFieldName;
            &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMAT.value = GetFormatString(&QrySelects.Item(&r).Type);
            &rsQryCols.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.value = &QrySelects.item(&r).Type;
            
            &nXlatType = &QrySelects.item(&r).TranslateOption;
            &rsQryCols.getRow(&r).GetRecord(1).PTPG_TRANSLATEOPT.value = String(&nXlatType);
         End-If;
         &rsQryCols.InsertRow(&r);
      End-For;
      &rsQryCols.DeleteRow(&r);
      If &QueryObjChild <> Null Then
         &QueryObjChild.close();
      End-If;
      If &QryPrompts <> Null Then
         &nCount_prompt = &QryPrompts.Count;
      Else
         &nCount_prompt = "0";
      End-If;
      If &nCount_prompt = "0" Then
         &rsQryprompts.HideAllRows();
      Else
         Local boolean &bOverRiddenFormat;
         For &r = 1 To &nCount_prompt
            &bOverRiddenFormat = False;
            If &r > 1 Then
               &rsQryprompts.InsertRow(&rsQryprompts.ActiveRowCount);
            End-If;
            &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.value = &QryPrompts.item(&r).HeadingText;
            &rsQryprompts.getRow(&r).GetRecord(1).PTPG_UNIQPROMPFLD.value = &QryPrompts.item(&r).UniquePromptName;
            /*If this is a prompt table edit*/
            If &QryPrompts.item(&r).EditType = 16384 Then
               &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPREC.value = &QryPrompts.item(&r).PromptTable;
            End-If;
            /*If this is translate or yes-no prompt type*/
            If &QryPrompts.item(&r).EditType = 512 Or
                  &QryPrompts.item(&r).EditType = 8192 Then
               &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPREC.value = "PTPG_QRYPRMPTVW";
            End-If;
            /*The yes/no prompts need not always have translate table table behind. Add unique identifier through format type column*/
            If &QryPrompts.item(&r).EditType = 8192 Then
               &rsQryprompts.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = 888;
               &bOverRiddenFormat = True;
            End-If;
            
            /*If this is a prompt table no edit*/
            If &QryPrompts.item(&r).PromptTable <> "" Then
               If &QryPrompts.item(&r).EditType = 0 Then
                  &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPREC.value = &QryPrompts.item(&r).PromptTable;
                  &rsQryprompts.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = 999;
                  &bOverRiddenFormat = True;
               End-If;
            End-If;
            &rsQryprompts.getRow(&r).GetRecord(1).FIELDNAME.value = &QryPrompts.item(&r).FieldName;
            &rsQryprompts.getRow(&r).GetRecord(1).USERID.value = "-";
            &rsQryprompts.getRow(&r).GetRecord(1).PTPG_VIEWNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value | ".View";
            &rsQryprompts.getRow(&r).GetRecord(1).PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
            If Not (&bOverRiddenFormat) Then
               &rsQryprompts.getRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = &QryPrompts.item(&r).FieldType;
            End-If;
            SQLExec("SELECT PTPG_QRYPROMPTVAL, PTPG_PRMPTXLATVAL, PTPG_VISIBLEPRMPT, PTPG_DISPPROMPTVAL FROM PSPGQRYPROMPT WHERE (PTPG_PGRIDNAME=:1) AND (PTPG_UNIQPROMPFLD=:2) AND USERID='-'", PSPGCORE.PTPG_PGRIDNAME.Value, &rsQryprompts.getRow(&r).GetRecord(1).PTPG_UNIQPROMPFLD.value, &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPTVAL.value, &rsQryprompts.getRow(&r).GetRecord(1).PTPG_PRMPTXLATVAL.value, &rsQryprompts.getRow(&r).GetRecord(1).PTPG_VISIBLEPRMPT.value, &rsQryprompts.getRow(&r).GetRecord(1).PTPG_DISPPROMPTVAL.value);
            If (All(&rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPREC.value)) Then
               &rsQryprompts.getRow(&r).GetRecord(Record.DERIVED).GetField(Field.EDITTABLE2).Value = &rsQryprompts.getRow(&r).GetRecord(1).PTPG_QRYPROMPREC.value;
               &rsQryprompts.GetRow(&r).GetRecord(1).SetEditTable("%EDITTABLE2", @("RECORD." | &rsQryprompts.getRow(&r).GetRecord(Record.DERIVED).GetField(Field.EDITTABLE2).Value));
               &rsQryprompts.getRow(&r).GetRecord(Record.PTPG_WORKREC1).PTPG_STRDATEFORMAT.Visible = False;
            Else
               If (&QryPrompts.item(&r).FieldType = %FieldType_Date) Then
                  &rsQryprompts.getRow(&r).GetRecord(Record.PTPG_WORKREC1).PTPG_STRDATEFORMAT.Visible = True;
                  &rsQryprompts.getRow(&r).GetRecord(Record.PTPG_WORKREC1).PTPG_STRDATEFORMAT.Value = MsgGetText(268, 161, "Date Format: YYYY-MM-DD");
               End-If;
               
               &rsQryprompts.getRow(&r).GetRecord(Record.PTPG_WORKREC).PTPG_LOOKUP_BTN.Visible = False;
            End-If;
            If &arrOptPrompts = Null Then
               &arrOptPrompts = CreateArrayRept("", 0);
            End-If;
            If &QryPrompts.item(&r).ReqPrompt = False Then
               &arrOptPrompts.Push(&QryPrompts.item(&r).UniquePromptName);
            End-If;
            
            If &QryPrompts.item(&r).DefaultValue <> "" Then
               &arrOptPrompts.Push(&QryPrompts.item(&r).UniquePromptName);
            End-If;
         End-For;
         &QueryObj.close();
         
         For &r = &rsQryprompts.ActiveRowCount To 1 Step - 1
            &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTDTE.Visible = False;
            &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Visible = False;
            &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPT.Visible = False;
            &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPTVALNE.Visible = False;
            &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Visible = False;
            &rsQryprompts.getRow(&r).GetRecord(Record.PTPG_WORKREC).PTPG_LOOKUP_BTN.Visible = False;
            Local number &arrIndexOpt = &arrOptPrompts.Find(&rsQryprompts.getRow(&r).GetRecord(1).PTPG_UNIQPROMPFLD.value);
            Local boolean &bIsOptPrompt = False;
            If &arrIndexOpt > 0 Then
               &bIsOptPrompt = True;
            End-If;
            If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPREC.Value <> "" Then
               If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = 999 Then
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPTVALNE.Visible = True;
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPTVALNE.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTVAL.Value;
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPTVALNE.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                  If &bIsOptPrompt = True Then
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPTVALNE.ShowRequiredFieldCue = False;
                  End-If;
               Else
                  If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPREC.Value = "PTPG_QRYPRMPTVW" Then
                     
                     If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = 888 Then
                        /*Handle yes/no prompts. The PTPG_VISIBLEPRMPT field is used to get the trabnslated string for "Yes" and "No"*/
                        Local Record &xlatrec = CreateRecord(Record.PSXLATITEM);
                        &xlatrec.FIELDNAME.Value = "PTPG_VISIBLEPRMPT";
                        &xlatrec.FIELDVALUE.Value = "Y";
                        &xlatrec.SelectByKeyEffDt(%Date);
                        &yesString = &xlatrec.XLATLONGNAME.Value;
                        &xlatrec.FIELDNAME.Value = "PTPG_VISIBLEPRMPT";
                        &xlatrec.FIELDVALUE.Value = "N";
                        &xlatrec.SelectByKeyEffDt(%Date);
                        &noString = &xlatrec.XLATLONGNAME.Value;
                        
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Visible = True;
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.ClearDropDownList();
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.AddDropDownItem("Y", &yesString);
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.AddDropDownItem("N", &noString);
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATVAL.Value;
                        
                        If &bIsOptPrompt = True Then
                           &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                        Else
                           &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Label = "*" | &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                        End-If;
                     Else
                        /*Handle XLAT prompts*/
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Visible = True;
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATVAL.Value;
                        
                        If &bIsOptPrompt = True Then
                           &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                        Else
                           &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_PRMPTXLATNAME.Label = "*" | &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                        End-If;
                     End-If;
                  Else
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPT.Visible = True;
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPT.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTVAL.Value;
                     If &bIsOptPrompt = True Then
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPT.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                     Else
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPRMPT.Label = "*" | &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                     End-If;
                  End-If;
               End-If;
            Else
               If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = %FieldType_Date Then
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTDTE.Visible = True;
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTDTE.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTVAL.Value;
                  
                  If &bIsOptPrompt = True Then
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTDTE.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                  Else
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTDTE.Label = "*" | &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                  End-If;
               Else
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Visible = True;
                  &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Value = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTVAL.Value;
                  If &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_FORMATTYPE.Value = 3 Then
                     If &bIsOptPrompt = True Then
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                     Else
                        &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Label = "*" | &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                     End-If;
                     
                  Else
                     &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPTEDIT.Label = &rsQryprompts.GetRow(&r).GetRecord(1).PTPG_QRYPROMPNAME.Value;
                  End-If;
                  
               End-If
            End-If;
         End-For;
         
      End-If;
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
   Else
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
      Return;
      
      
   End-If;
   
   
   
End-Function;


/***************************************************************
* Function: InitWizInfoPage()                                  *
* Purpose:  Initialize Feed Properties page                    *
* Inputs:   None                                               *
* Output:   None                                               *
***************************************************************/
Function InitWizInfoPage()
   /* Set the header */
   StepOn(1);
   
   Local string &exists;
   
   PSPGCORE.PTPG_PGRIDTITLE.ShowRequiredFieldCue = True;
   
   If None(PSPGCORE.PTPG_PGRIDTITLE) Then
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
   Else
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
   End-If;
End-Function;


Function selectalllines()
   Local Rowset &rs;
   Local number &x;
   
   &rs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_QRY_VIEW);
   
   For &x = 1 To &rs.ActiveRowCount
      &rs(&x).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "Y";
   End-For;
   &userModifiedCols = True;
   &nSelCols = &rs.ActiveRowCount;
End-Function;

Function clearalllines()
   Local Rowset &rs1;
   Local number &x1;
   
   &rs1 = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_QRY_VIEW);
   
   For &x1 = 1 To &rs1.ActiveRowCount
      &rs1(&x1).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "N";
   End-For;
   &nSelCols = 0;
   &userModifiedCols = True;
End-Function;


Function selectalltotals()
   Local Rowset &rs;
   Local number &x;
   
   &rs = GetLevel0().GetRow(1).GetRowset(Scroll.PSPGMODEL);
   
   For &x = 1 To &rs.ActiveRowCount
      If &rs(&x).PSPGMODEL.PTPG_TOTAL.Visible = True Then
         &rs(&x).PSPGMODEL.PTPG_TOTAL.Value = "Y";
         /*PB107 - Change 6 - start*/
         &rs(&x).PSPGMODEL.PTPG_TOTALNAME.Visible = True;
         
      End-If;
   End-For;
   
   
End-Function;

Function clearalltotals()
   Local Rowset &rs1;
   Local number &x1;
   
   &rs1 = GetLevel0().GetRow(1).GetRowset(Scroll.PSPGMODEL);
   
   For &x1 = 1 To &rs1.ActiveRowCount
      If &rs1(&x1).PSPGMODEL.PTPG_TOTAL.Visible = True Then
         &rs1(&x1).PSPGMODEL.PTPG_TOTAL.Value = "N";
         &rs1(&x1).PSPGMODEL.PTPG_TOTALNAME.Visible = False;
         /*PB107 - Change 7 - end*/
      End-If;
   End-For;
   
End-Function;

/***************************************************************
* Function: LoadPivotGridModelGrid()                           *
* Purpose:  Initializes Specify Data Source Information grid   * 
*            in Page 3 of the Wizard                           *
* Inputs:   None                                               *
* Output:   None                                               *
***************************************************************/
Function LoadPivotGridModelGrid()
   
   Local Rowset &rs = GetLevel0()(1).GetRowset(Scroll.PTPG_QRY_VIEW);
   Local Rowset &REC = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   Local string &aggregate, &colType, &total, &totalName, &axisInfo, &colalias, &treeName, &setID, &setCntrlValue, &effDt, &treeNode, &szAggrAlias;
   Local integer &j;
   /*BP801 I1 START*/
   Local boolean &boolAtleastOneVal = False;
   /*BP801 I1 END*/
   &j = 1;
   /*
   Local Grid &PGModelGrid = GetGrid(Page.PTPG_WIZ_MODEL, Record.PSPGMODEL);
   If &bShowTreeColumns Then
      &PGModelGrid.GetColumn("PTPG_ATTACHTREE").Visible = True;
      &PGModelGrid.GetColumn("PTPG_DETACHTREE").Visible = True;
      &PGModelGrid.GetColumn("TREE_NAME").Visible = True;
      &PGModelGrid.GetColumn("SETID").Visible = True;
      &PGModelGrid.GetColumn("SETCNTRLVALUE").Visible = True;
      &PGModelGrid.GetColumn("TREE_NAME").Visible = True;
      &PGModelGrid.GetColumn("PTPG_TREE_EFFDT").Visible = True;
      &PGModelGrid.GetColumn("TREE_NODE").Visible = True;
   Else
      &PGModelGrid.GetColumn("PTPG_ATTACHTREE").Visible = False;
      &PGModelGrid.GetColumn("PTPG_DETACHTREE").Visible = False;
      &PGModelGrid.GetColumn("TREE_NAME").Visible = False;
      &PGModelGrid.GetColumn("SETID").Visible = False;
      &PGModelGrid.GetColumn("SETCNTRLVALUE").Visible = False;
      &PGModelGrid.GetColumn("TREE_NAME").Visible = False;
      &PGModelGrid.GetColumn("PTPG_TREE_EFFDT").Visible = False;
      &PGModelGrid.GetColumn("TREE_NODE").Visible = False;
   End-If;*/
   Local array of string &arrSelectedQryCols = CreateArrayRept("", 0);
   Local array of string &arrSelectedUniqueQryCols = CreateArrayRept("", 0);
   If &userModifiedSelCols = True Then
      /*Reset &userModifiedSelCols so that the step 3 loads only once after each user selection of datasource column*/
      &userModifiedSelCols = False;
      /*Set &userModifiedCols so that the step 2 doesn't load data source columns from DB*/
      &userModifiedCols = True;
      Local Rowset &RS_Level1 = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
      For &i = &RS_Level1.ActiveRowCount To 1 Step - 1
         &RS_Level1.DeleteRow(&i);
      End-For;
      &nNoDims = 0;
      &nNoFacts = 0;
      &dsCoulmns = "";
      For &i = 1 To &rs.ActiveRowCount
         If &rs(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "Y" Then
            &aggregate = "";
            &colType = "";
            &total = "";
            &totalName = "";
            &axisInfo = "";
            &xlatOpt = "N";
            /*PB107 Change 7 - start*/
            Local boolean &bDiffLang = False;
            Local string &szDSColLang;
            SQLExec("SELECT PTPG_AGGREGATE, PTPG_COLMNTYPE, PTPG_DSCOLUMNALIAS, PTPG_AGGR_ALIAS, PTPG_TOTAL, PTPG_TOTALNAME, PTPG_AXISINFO, PTPG_TRANSLATEOPT, TREE_NAME, SETID, SETCNTRLVALUE, PTPG_TREE_EFFDT, TREE_NODE, PTPG_CURR_CTL_FLD, PTPG_SHOWCURR_SYM, PTPG_SHOW1000_SEP,PTPG_ISEDITABLEFIL FROM PSPGMODEL WHERE (PTPG_PGRIDNAME=:1) AND (PTPG_DSUNIQUEFLD=:2)", PSPGCORE.PTPG_PGRIDNAME.Value, &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value, &aggregate, &colType, &szDSColalias, &szAggrAlias, &total, &totalName, &axisInfo, &xlatOpt, &treeName, &setID, &setCntrlValue, &effDt, &treeNode, &CurrCtlFld, &showCurrSym, &show1000Sep, &isEditable);
            If %Language <> PSOPTIONS.LANGUAGE_CD Then
               &bDiffLang = True;
               &lang = %Language;
               SQLExec("SELECT PTPG_DSCOLUMN, PTPG_DSCOLUMNALIAS, PTPG_AGGR_ALIAS, PTPG_TOTALNAME FROM PSPGMODELLANG WHERE (PTPG_PGRIDNAME=:1) AND (PTPG_DSUNIQUEFLD=:2) AND LANGUAGE_CD=:3", PSPGCORE.PTPG_PGRIDNAME.Value, &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value, &lang, &szDSColLang, &szDSColalias, &szAggrAlias, &totalName);
               If &szDSColLang = "" Then
                  &szDSColLang = &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value;
               End-If;
            End-If;
            
            If &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value = %FieldType_Char Then
               &arrSelectedUniqueQryCols.Push(&rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value);
            End-If;
            
            &REC.GetRow(&j).GetRecord(1).PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
            If &bDiffLang = False Then
               &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value;
               If &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value = %FieldType_Char Then
                  &arrSelectedQryCols.Push(&REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value);
               End-If;
            Else
               If %Mode = %Action_Add Or
                     %Mode = %Action_Correction Then
                  &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value;
                  If &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value = %FieldType_Char Then
                     &arrSelectedQryCols.Push(&REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value);
                  End-If;
               Else
                  &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value = &szDSColLang;
                  If &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value = %FieldType_Char Then
                     &arrSelectedQryCols.Push(&REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMN.Value);
                  End-If;
               End-If;
            End-If;
            
            &REC.GetRow(&j).GetRecord(1).PTPG_FORMAT.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_FORMAT.Value;
            &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value;
            &REC.GetRow(&j).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
            &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.Value = &aggregate;
            &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = &colType;
            &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Value = &total;
            &REC.GetRow(&j).GetRecord(1).PTPG_TOTALNAME.Value = &totalName;
            &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMNALIAS.Value = &szDSColalias;
            &REC.GetRow(&j).GetRecord(1).PTPG_AGGR_ALIAS.Value = &szAggrAlias;
            &REC.GetRow(&j).GetRecord(1).PTPG_TRANSLATEOPT.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_TRANSLATEOPT.Value;
            &REC.GetRow(&j).GetRecord(1).PTPG_CURR_CTL_FLD.Value = &CurrCtlFld;
            &REC.GetRow(&j).GetRecord(1).PTPG_SHOWCURR_SYM.Value = &showCurrSym;
            &REC.GetRow(&j).GetRecord(1).PTPG_SHOW1000_SEP.Value = &show1000Sep;
            &REC.GetRow(&j).GetRecord(1).PTPG_ISEDITABLEFIL.Value = &isEditable;
            If &bShowTreeColumns Then
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = True;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).TREE_NAME.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).SETID.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).SETCNTRLVALUE.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).PTPG_TREE_EFFDT.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).TREE_NODE.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).TREE_NAME.Value = &treeName;
               &REC.GetRow(&j).GetRecord(1).SETID.Value = &setID;
               &REC.GetRow(&j).GetRecord(1).SETCNTRLVALUE.Value = &setCntrlValue;
               &REC.GetRow(&j).GetRecord(1).PTPG_TREE_EFFDT.Value = &effDt;
               &REC.GetRow(&j).GetRecord(1).TREE_NODE.Value = &treeNode;
            Else
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = False;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).TREE_NAME.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).SETID.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).SETCNTRLVALUE.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_TREE_EFFDT.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).TREE_NODE.Enabled = False;
            End-If;
            /*PB107 Change 7 - end*/
            
            
            /*PB107 - Change 8 - Start*/
            Local boolean &bColEmpty = False;
            If None(&REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value) Then
               &bColEmpty = True;
            End-If;
            
            If ((%Mode = %Action_Add Or
                  %Mode = %Action_Correction) Or
                  (%Mode = %Action_UpdateDisplay And
                     (All(&rs.GetRow(&i).PTPG_WORKREC1.SELECT_FLAG.Value))) Or
                  &dsValChanged Or
                  &bColEmpty) Then
               
               If &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = 2 Or
                     &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = 3 Then
                  &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL";
                  &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.Value = "SUM";
               Else
                  If &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value <> 2 Or
                        &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value <> 3 Then
                     &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DIM";
                     If %Mode <> %Action_UpdateDisplay Or
                           &bColEmpty Then
                        &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Value = "Y";
                     End-If;
                  End-If;
               End-If;
            End-If;
            
            
            If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Then
               &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_TOTALNAME.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.DisplayOnly = False;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = False;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).TREE_NODE.Enabled = False;
               &nNoFacts = &nNoFacts + 1;
               /*BP 801 I1 START*/
               &boolAtleastOneVal = True
               /*BP 801 I1 END*/
            End-If;
            
            If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DIM" Then
               &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Visible = True;
               If &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Value = "Y" Then
                  &REC.GetRow(&j).GetRecord(1).PTPG_TOTALNAME.Visible = True;
               Else
                  &REC.GetRow(&j).GetRecord(1).PTPG_TOTALNAME.Visible = False;
                  
               End-If;
               
               /*PB107 - Change 8 - End*/
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.Value = "";
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.DisplayOnly = True;
               If &bShowTreeColumns Then
                  &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = True;
                  &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = True;
                  &REC.GetRow(&j).GetRecord(1).TREE_NODE.Enabled = True;
               End-If;
               &nNoDims = &nNoDims + 1;
            End-If;
            /*BP 804R1 START*/
            If &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = 11 Then
               &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DISO";
               &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.DisplayOnly = True;
            End-If;
            /*BP 804R1 END*/
            
            /*PB107 Change 9 start*/
            If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DISO" Then
               &REC.GetRow(&j).GetRecord(1).PTPG_TOTAL.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_TOTALNAME.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_ISEDITABLEFIL.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGR_ALIAS.Visible = False;
               /*BP 806I1 START*/
               <* &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMNALIAS.Value = "";
               &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMNALIAS.Visible = False;*>
               /*BP 806I1 END*/
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.Value = "";
               &REC.GetRow(&j).GetRecord(1).PTPG_AGGREGATE.DisplayOnly = True;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = False;
               &REC.GetRow(&j).PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).TREE_NODE.Enabled = False;
            Else
               &REC.GetRow(&j).GetRecord(1).PTPG_DSCOLUMNALIAS.Visible = True;
            End-If;
            /*PB107 Change 9 end*/
            
            &REC.InsertRow(&j);
            &j = &j + 1;
         End-If;
         
      End-For;
      &REC.DeleteRow(&j);
      
      
      For &i = 1 To &rs.ActiveRowCount
         If &rs(&i).PTPG_WORKREC1.SELECT_FLAG.Value = "Y" Then
            &rs(&i).PTPG_WORKREC1.SELECT_FLAG.Value = "N";
            For &j = 1 To &REC.ActiveRowCount
               If &REC.GetRow(&j).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value Then
                  If &rs(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "N" Then
                     If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Then
                        &nNoFacts = &nNoFacts - 1;
                     End-If;
                     
                     If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DIM" Then
                        &nNoDims = &nNoDims - 1;
                     End-If;
                     &REC.DeleteRow(&j);
                  End-If;
               End-If;
            End-For;
         End-If;
      End-For;
      
      If &bCurrChanged = False Then
         For &j = 1 To &REC.ActiveRowCount
            &REC.GetRow(&j).PTPG_WORKREC1.PTPG_DSCOLUMN1.ClearDropDownList();
            
            If &REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Or
                  (&REC.GetRow(&j).GetRecord(1).PTPG_COLMNTYPE.Value = "DISO" And
                     (&REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = %FieldType_Number Or
                        &REC.GetRow(&j).GetRecord(1).PTPG_FORMATTYPE.Value = %FieldType_SignedNumber)) Then
               &REC.GetRow(&j).GetRecord(1).PTPG_CURR_CTL_FLD.Enabled = True;
               &REC.GetRow(&j).GetRecord(1).PTPG_SHOWCURR_SYM.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_SHOW1000_SEP.Enabled = False;
               
               
               Local number &arrIndexCurr = 0;
               While &arrSelectedQryCols.Next(&arrIndexCurr)
                  &REC.GetRow(&j).PTPG_WORKREC1.PTPG_DSCOLUMN1.AddDropDownItem(&arrSelectedUniqueQryCols [&arrIndexCurr], &arrSelectedQryCols [&arrIndexCurr]);
               End-While;
               
               If &REC.GetRow(&j).GetRecord(1).PTPG_CURR_CTL_FLD.Value <> "" Then
                  &REC.GetRow(&j).PTPG_WORKREC1.PTPG_DSCOLUMN1.Value = &REC.GetRow(&j).GetRecord(1).PTPG_CURR_CTL_FLD.Value;
               End-If;
            Else
               &REC.GetRow(&j).GetRecord(1).PTPG_CURR_CTL_FLD.Enabled = False;
               &REC.GetRow(&j).PTPG_WORKREC1.PTPG_DSCOLUMN1.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_SHOWCURR_SYM.Enabled = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_SHOW1000_SEP.Enabled = False;
            End-If;
         End-For;
      End-If;
      /*BP 804R1 START*/
      If Not &boolAtleastOneVal Then
         Local number &q = &REC.ActiveRowCount;
         While &q > 0
            If &REC.GetRow(&q).GetRecord(1).PTPG_COLMNTYPE.Value <> "DISO" Then
               &REC.GetRow(&q).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL";
               &REC.GetRow(&q).GetRecord(1).PTPG_TOTAL.Visible = False;
               &REC.GetRow(&j).GetRecord(1).PTPG_ISEDITABLEFIL.Visible = False;
               &REC.GetRow(&q).GetRecord(1).PTPG_TOTALNAME.Visible = False;
               &REC.GetRow(&q).GetRecord(1).PTPG_AGGREGATE.Value = "CNT";
               &REC.GetRow(&q).GetRecord(1).PTPG_AGGREGATE.DisplayOnly = False;
               Break;
            Else
               &q = &q - 1;
            End-If;
         End-While;
      End-If;
      
      
      Local Rowset &rsPrompt = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_PRMPTWIZVW);
      For &z = 1 To &rsPrompt.ActiveRowCount
         For &y = 1 To &rs.ActiveRowCount
            Local array of string &arrFldVal = Split(&rs(&y).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value, ".");
            If &arrFldVal <> Null And
                  &arrFldVal.Len > 1 Then
               If &rsPrompt(&z).PTPG_PRMPTWIZVW.FIELDNAME.Value = &arrFldVal [2] Then
                  For &m = 1 To &REC.ActiveRowCount
                     If &REC.GetRow(&m).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &rs(&y).GetRecord(1).PTPG_DSUNIQUEFLD.Value Then
                        If %Mode <> %Action_UpdateDisplay Then
                           &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.Value = "DISO";
                           &REC.GetRow(&m).GetRecord(1).PTPG_TOTAL.Visible = False;
                           &REC.GetRow(&m).GetRecord(1).PTPG_TOTALNAME.Visible = False;
                           /*BP 806I1 START*/
                           <*&REC.GetRow(&m).GetRecord(1).PTPG_DSCOLUMNALIAS.Value = "";
                           &REC.GetRow(&m).GetRecord(1).PTPG_DSCOLUMNALIAS.Visible = False;*>
                           /*BP 806I1 END*/
                           &REC.GetRow(&m).GetRecord(1).PTPG_AGGREGATE.Value = "";
                           &REC.GetRow(&m).GetRecord(1).PTPG_AGGREGATE.DisplayOnly = True;
                        End-If;
                        
                        &stemp = &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.Value;
                        &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.ClearDropDownList();
                        Local Record &xlatrec = CreateRecord(Record.PSXLATITEM);
                        &xlatrec.FIELDNAME.Value = "PTPG_COLMNTYPE";
                        &xlatrec.FIELDVALUE.Value = "DIM";
                        &xlatrec.SelectByKeyEffDt(%Date);
                        &dimDescr = &xlatrec.XLATLONGNAME.Value;
                        
                        &xlatrec.FIELDNAME.Value = "PTPG_COLMNTYPE";
                        &xlatrec.FIELDVALUE.Value = "DISO";
                        &xlatrec.SelectByKeyEffDt(%Date);
                        &disoDescr = &xlatrec.XLATLONGNAME.Value;
                        &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.AddDropDownItem("DIM", &dimDescr);
                        &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.AddDropDownItem("DISO", &disoDescr);
                        &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.Value = &stemp;
                     End-If;
                  End-For;
               End-If;
            End-If;
            
         End-For;
         
      End-For;
      
      
      
      /*Image references are for only for Fluid options. Hide it here*/
      For &y = &rs.RowCount To 1 Step - 1
         If &rs.GetRow(&y).GetRecord(1).PTPG_FORMATTYPE.Value = 8 Or
               &rs.GetRow(&y).GetRecord(1).PTPG_FORMATTYPE.Value = 7 Then
            For &m = 1 To &REC.ActiveRowCount
               If &REC.GetRow(&m).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &rs(&y).GetRecord(1).PTPG_DSUNIQUEFLD.Value Then
                  &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.Value = "DISO";
                  &REC.GetRow(&m).GetRecord(1).PTPG_COLMNTYPE.DisplayOnly = True;
                  &REC(&m).Visible = False;
               End-If;
            End-For;
         End-If;
      End-For;
      
      If &nNoFacts > 1 And
            &nNoDims > 1 Then
         
         StepImage(3, "CMP");
         If %Mode = %Action_Add Or
               %Mode = %Action_Correction Then
            StepEnable(4, True);
            StepImage(4, "INP");
            StepImage(5, "INP");
         Else
            StepEnable(4, True);
            StepEnable(5, True);
            StepImage(2, "CMP");
            StepImage(3, "CMP");
            StepImage(4, "CMP");
            StepImage(5, "CMP");
         End-If;
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
      Else
         StepEnable(3, False);
         StepEnable(4, False);
         StepEnable(5, False);
         StepImage(2, "DIS");
         StepImage(3, "DIS");
         StepImage(4, "DIS");
         StepImage(5, "DIS");
         PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
      End-If;
   End-If;
   &rsQryprompts = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_PRMPTWIZVW);
   For &i = 1 To &rsQryprompts.ActiveRowCount
      <*If %Mode = %Action_Add Or
            %Mode = %Action_Correction Then
         &rsQryprompts.getRow(&i).PTPG_PRMPTWIZVW.PTPG_VISIBLEPRMPT.value = "Y";
      End-If;*>
   End-For;
   If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Or
         PSPGCORE.PTPG_DSTYPE.Value = "PSCOMPQUERY" Then
      Local Grid &options = GetGrid(Page.PTPG_WIZ_MODEL, "PSPGMODEL");
      &options.GetColumn("TREEOPTIONS").Visible = False;
   End-If;
End-Function;


/***************************************************************
* Function: SavePivotGridModelGridData()                       *
* Purpose:  Initializes Specify Data Source Information grid   * 
*            in Page 3 of the Wizard                           *
* Inputs:   None                                               *
* Output:   None                                               *
***************************************************************/
Function SavePivotGridModelGridData()
   Local Rowset &rs = GetLevel0()(1).GetRowset(Scroll.PTPG_QRY_VIEW);
   Local Rowset &rsModel = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   Local number &j;
   /*SQLExec("DELETE FROM PSPGMODEL WHERE PTPG_PGRIDNAME=:1", PSPGCORE.PTPG_PGRIDNAME.Value);
   SQLExec("DELETE FROM PSPGMODELLANG WHERE PTPG_PGRIDNAME=:1", PSPGCORE.PTPG_PGRIDNAME.Value);*/
   &dsCoulmns = "";
   For &i = 1 To &rs.ActiveRowCount
      If &rs(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "Y" Then
         If All(&dsCoulmns) Then
            &dsCoulmns = """" | &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value | """";
         Else
            &dsCoulmns = &dsCoulmns | ",""" | &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value | """";
         End-If;
         &REC = CreateRecord(Record.PSPGMODEL);
         &REC.PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
         &REC.PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
         &found = &REC.SelectByKey();
         
         
         &REC.PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
         &REC.PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
         
         &REC.PTPG_DSCOLUMN.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value;
         &REC.PTPG_FORMAT.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_FORMAT.Value;
         &REC.PTPG_FORMATTYPE.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_FORMATTYPE.Value;
         &REC.PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
         &REC.PTPG_TRANSLATEOPT.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_TRANSLATEOPT.Value;
         For &j = 1 To &rsModel.ActiveRowCount
            If &rsModel(&j).PSPGMODEL.PTPG_DSUNIQUEFLD.Value = &REC.PTPG_DSUNIQUEFLD.Value Then
               &REC.PTPG_COLMNTYPE.Value = &rsModel(&j).PSPGMODEL.PTPG_COLMNTYPE.Value;
               &REC.PTPG_TOTAL.Value = &rsModel(&j).PSPGMODEL.PTPG_TOTAL.Value;
               &REC.PTPG_AGGREGATE.Value = &rsModel(&j).PSPGMODEL.PTPG_AGGREGATE.Value;
               &REC.PTPG_TOTALNAME.Value = &rsModel(&j).PSPGMODEL.PTPG_TOTALNAME.Value;
               /*PB107 Change 10 - start*/
               &REC.PTPG_DSCOLUMNALIAS.Value = &rsModel(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value;
               
               &REC.PTPG_AGGR_ALIAS.Value = &rsModel(&j).PSPGMODEL.PTPG_AGGR_ALIAS.Value;
               /*PB107 Change 10 - end*/
               &REC.PTPG_AXISINFO.Value = &rsModel(&j).PSPGMODEL.PTPG_AXISINFO.Value;
               &REC.PTPG_CURR_CTL_FLD.Value = &rsModel(&j).PSPGMODEL.PTPG_CURR_CTL_FLD.Value;
               &REC.PTPG_SHOWCURR_SYM.Value = &rsModel(&j).PSPGMODEL.PTPG_SHOWCURR_SYM.Value;
               &REC.PTPG_SHOW1000_SEP.Value = &rsModel(&j).PSPGMODEL.PTPG_SHOW1000_SEP.Value;
               &REC.PTPG_ISEDITABLEFIL.Value = &rsModel(&j).PSPGMODEL.PTPG_ISEDITABLEFIL.Value;
               If &bShowTreeColumns Then
                  &REC.TREE_NAME.Value = &rsModel(&j).PSPGMODEL.TREE_NAME.Value;
                  &REC.SETID.Value = &rsModel(&j).PSPGMODEL.SETID.Value;
                  &REC.SETCNTRLVALUE.Value = &rsModel(&j).PSPGMODEL.SETCNTRLVALUE.Value;
                  &REC.PTPG_TREE_EFFDT.Value = &rsModel(&j).PSPGMODEL.PTPG_TREE_EFFDT.Value;
                  &REC.TREE_NODE.Value = &rsModel(&j).PSPGMODEL.TREE_NODE.Value;
               End-If;
            End-If;
         End-For;
         If (&found) Then
            &REC.Update();
         Else
            &REC.Insert();
         End-If;
         
      End-If;
      If &rs(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "N" Then
         &REC1 = CreateRecord(Record.PSPGMODEL);
         &REC1.PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
         &REC1.PTPG_DSUNIQUEFLD.Value = &rs(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
         &found1 = &REC1.SelectByKey();
         If (&found1) Then
            &REC1.Delete();
         End-If;
      End-If;
   End-For;
End-Function;


Function InitPGWizModelPage
   If %Mode = %Action_UpdateDisplay Then
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
   End-If;
   
   LoadPivotGridModelGrid();
End-Function;


/*BP 801I1 START*/
Function InitPGWizDataSrcPage
   
   &REC = CreateRecord(Record.PSPGNUIOPT);
   
   
   If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Then
      
      &REC.PTPG_PGRIDNAME.VALUE = PSPGCORE.PTPG_PGRIDNAME.Value;
      &REC.PTPG_VIEWNAME.VALUE = PSPGCORE.PTPG_PGRIDNAME.Value | ".View";
      &REC.SelectByKey( False);
      If &REC.TREE_NAME.value <> "" And
            %Mode = %Action_UpdateDisplay Then
         PTPG_WORKREC.TREE_NAME.Value = &REC.TREE_NAME.value;
         PTPG_WORKREC.ACCESS_GROUP.Value = &REC.ACCESS_GROUP.value;
         /*BP 901i1 START*/
         PTPG_WORKREC.MARKET.Value = &REC.PTPG_COMPMARKETMAP.value;
         PTPG_WORKREC.MARKET.SqlText = "SELECT MARKET FROM PSPNLGRPDEFN WHERE PNLGRPNAME='" | PSPGSETTINGS.PTPG_DSVALUE.Value | "'";
         /*BP 901i1 END*/
      End-If;
   Else
      PTPG_WORKREC.TREE_NAME.Visible = False;
      PTPG_WORKREC.ACCESS_GROUP.Visible = False;
      PTPG_WORKREC.PTPG_APPLY.Visible = False;
      PTPG_WORKREC.MARKET.Visible = False;
   End-If;
   
   If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Or
         PSPGCORE.PTPG_DSTYPE.Value = "PSCOMPQUERY" Then
      &bShowTreeColumns = False;
   Else
      &bShowTreeColumns = True;
   End-If;
   
   /* Set Data Type dropdown */
   &dataTypeField = GetRecord(Record.PSPGCORE).GetField(Field.PTPG_DSTYPE);
   &dataTypeField.ClearDropDownList();
   REM &nSelCols = 0;
   
   &rsData = CreateRowset(Record.PSPGDTYPE);
   &rsData.Fill("where ACTIVE_FLAG='A'");
   For &i = 1 To &rsData.ActiveRowCount
      &dataTypeField.AddDropDownItem(&rsData.GetRow(&i).PSPGDTYPE.PTPG_DSTYPE.Value, &rsData.GetRow(&i).PSPGDTYPE.PTPG_PGRIDTITLE.Value);
   End-For;
   PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
   PSPGSETTINGS.PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
   
   If %Mode = %Action_Add And
         &dataTypeField.value = "" Then
      &dataTypeField.Value = "PSQUERY";
      PSPGSETTINGS.PTPG_DSNAME.Value = "QRYNAME";
      DERIVED.EDITTABLE.Value = "PTPPB_QUERY_VW";
      PSPGSETTINGS.PTPG_DSVALUE.Label = PSPGSETTINGS.PTPG_DSVALUE.GetLongLabel("PTPG_QRYNAME");
   End-If;
   
   If %Mode <> %Action_Add Then
      If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Then
         &dataTypeField.Value = "COMPONENT";
         PSPGSETTINGS.PTPG_DSNAME.Value = "COMPONENT";
         DERIVED.EDITTABLE.Value = "PTPGPNLGRP_VW";
         PSPGSETTINGS.PTPG_DSVALUE.Label = PSPGSETTINGS.PTPG_DSVALUE.GetLongLabel("PTPG_COMPNAME");
      Else
         If PSPGCORE.PTPG_DSTYPE.Value = "PSCOMPQUERY" Then
            &dataTypeField.Value = "PSCOMPQUERY";
            PSPGSETTINGS.PTPG_DSNAME.Value = "CQRYNAME";
            DERIVED.EDITTABLE.Value = "PTPG_COQUERY_VW";
            PSPGSETTINGS.PTPG_DSVALUE.Label = PSPGSETTINGS.PTPG_DSVALUE.GetLongLabel("PTPG_COMPQRYNAME");
         Else
            &dataTypeField.Value = "PSQUERY";
            PSPGSETTINGS.PTPG_DSNAME.Value = "QRYNAME";
            DERIVED.EDITTABLE.Value = "PTPPB_QUERY_VW";
            PSPGSETTINGS.PTPG_DSVALUE.Label = PSPGSETTINGS.PTPG_DSVALUE.GetLongLabel("PTPG_QRYNAME");
         End-If;
      End-If;
   End-If;
   
   PSPGSETTINGS.PTPG_DSVALUE.ShowRequiredFieldCue = True;
   
   
   /* Show the selected query fields for Pivot Grid model */
   &DataSourcers = GetLevel0()(1).GetRowset(Scroll.PTPG_QRY_VIEW);
   &REC = CreateRecord(Record.PSPGMODEL);
   If &userModifiedCols = False And
         &userModifiedDSColType = False Then
      /* Populate the Query Fields from Query Definition */
      If &dataTypeField.Value = "PSCOMPQUERY" Then
         &bIsComposite = True;
      Else
         &bIsComposite = False;
      End-If;
      PopulateQryFields(PSPGSETTINGS.PTPG_DSVALUE.Value, &bIsComposite);
      /*BP 801I1 END*/
      &nSelCols = 0;
      
      For &i = 1 To &DataSourcers.ActiveRowCount
         &REC.PTPG_PGRIDNAME.Value = PSPGCORE.PTPG_PGRIDNAME.Value;
         &REC.PTPG_DSCOLUMN.Value = &DataSourcers(&i).PTPG_QRY_VIEW.PTPG_DSCOLUMN.Value;
         &REC.PTPG_DSUNIQUEFLD.Value = &DataSourcers(&i).PTPG_QRY_VIEW.PTPG_DSUNIQUEFLD.Value;
         &found = &REC.SelectByKey();
         If (&found) Then
            &DataSourcers(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "Y";
            &nSelCols = &nSelCols + 1;
         Else
            &DataSourcers(&i).PTPG_QRY_VIEW.PTPG_DSSELCOL.Value = "N";
         End-If;
      End-For;
   End-If;
   If %Mode = %Action_UpdateDisplay Then
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
   End-If;
   
   If PSPGSETTINGS.PTPG_DSVALUE.Value = "" Then
      HideScroll(Scroll.PTPG_QRY_VIEW);
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
   Else
      UnhideScroll(Scroll.PTPG_QRY_VIEW);
   End-If;
End-Function;

Function SetAllowedChartTypes(&recName As string)
   
   /*Routine to ensure we show only the correct chart types applicable based on model type*/
   If PTPG_WORKREC.PTPG_DISPLAYOPT.Value <> "" Then
      Local Field &recField = GetLevel0()(1).GetRecord(@("Record." | &recName)).GetField(Field.PTPG_CHART_TYPE);
      Local string &initialVal = &recField.Value;
      &recField.ClearDropDownList();
      Local Record &xlatrec = CreateRecord(Record.PSXLATITEM);
      For &z = 0 To 13
         &xlatrec.FIELDNAME.Value = "PTPG_CHART_TYPE";
         &xlatrec.FIELDVALUE.Value = String(&z);
         &xlatrec.SelectByKeyEffDt(%Date);
         If &xlatrec.XLATLONGNAME.Value <> "" Then
            &recField.AddDropDownItem(String(&z), &xlatrec.XLATLONGNAME.Value);
         End-If;
      End-For;
      If PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "CHT" Then
         &xlatrec.FIELDVALUE.Value = String(%ChartType_2DScatter);
         &xlatrec.SelectByKeyEffDt(%Date);
         If &xlatrec.XLATLONGNAME.Value <> "" Then
            &recField.AddDropDownItem(String(%ChartType_2DScatter), &xlatrec.XLATLONGNAME.Value);
         End-If;
         &xlatrec.FIELDVALUE.Value = String(%ChartType_2DBubble);
         &xlatrec.SelectByKeyEffDt(%Date);
         If &xlatrec.XLATLONGNAME.Value <> "" Then
            &recField.AddDropDownItem(String(%ChartType_2DBubble), &xlatrec.XLATLONGNAME.Value);
         End-If;
         &recField.Value = &initialVal;
      Else
         &recField.Value = &initialVal;
         If &recField.Value = %ChartType_2DBubble Or
               &recField.Value = %ChartType_2DScatter Then
            &recField.Value = %ChartType_2DBar;
         End-If;
      End-If;
   End-If;
End-Function;


Function ValidateChartTypeForModel(&recName As string) Returns boolean;
   
   Local Field &recField = GetLevel0()(1).GetRecord(@("Record." | &recName)).GetField(Field.PTPG_CHART_TYPE);
   Local Rowset &ColNames = GetLevel0()(1).GetRowset(Scroll.PTPG_COL_VIEW);
   Local boolean &bOverlayFound = False;
   &recField.Style = "PSEDITBOX";
   For &j = 1 To &ColNames.ActiveRowCount
      If &ColNames(&j).PTPG_COL_VIEW.PTPG_CHARTAXIS.Value = "OLY" Then
         &bOverlayFound = True;
      End-If;
   End-For;
   Evaluate &recField.Value
   When %ChartType_2DScatter
      For &j = 1 To &ColNames.ActiveRowCount
         If &ColNames(&j).PTPG_COL_VIEW.PTPG_CHARTAXIS.Value = "X" Then
            If Find(MsgGetText(268, 38, "Number"), &ColNames(&j).PTPG_COL_VIEW.PTPG_FORMAT.Value) = 0 Then
               MessageBox(0, "", 268, 554, "Number field is needed for the chart x and y axis for scatter chart type");
               &recField.Style = "PSERROR";
               Return False;
            End-If;
         End-If;
      End-For;
      Break;
   When %ChartType_2DBubble
      For &j = 1 To &ColNames.ActiveRowCount
         If &ColNames(&j).PTPG_COL_VIEW.PTPG_CHARTAXIS.Value = "X" Then
            If Find(MsgGetText(268, 38, "Number"), &ColNames(&j).PTPG_COL_VIEW.PTPG_FORMAT.Value) = 0 Then
               MessageBox(0, "", 268, 553, "Number field is needed for the chart x, y and overlay axis for bubble chart type");
               &recField.Style = "PSERROR";
               Return False;
            End-If;
         End-If;
      End-For;
      If Not &bOverlayFound Then
         MessageBox(0, "", 268, 552, "Overlay field is needed for Bubble chart type");
         &recField.Style = "PSERROR";
         Return False;
      End-If;
      Break;
   When-Other
      Break;
   End-Evaluate;
   
   If &bOverlayFound Then
      If &recField.Value <> %ChartType_2DBar Then
         If &recField.Value <> %ChartType_2DBubble Then
            MessageBox(0, "", 268, 550, "Overlay fields are allowed only with Bar Charts and Bubble charts.");
            &recField.Style = "PSERROR";
            Return False;
         End-If;
      End-If;
   End-If;
   Return True;
End-Function;


Function CheckForDuplicateColumns
   Local Rowset &AxisInfoOpt = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   For &i = 1 To &AxisInfoOpt.ActiveRowCount
      REM MessageBox(0, "", 0, 0, &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value | ":::" | &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value);
      For &j = &i To &AxisInfoOpt.ActiveRowCount
         If &i = &j Then
            Continue;
         End-If;
         
         If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value = &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMN.Value Or
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value = &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value Or
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMN.Value Or
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value Then
            
            
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> "" And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> "" And
                  &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value Then
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               Continue;
            End-If;
            
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> "" And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = "" And
                  &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMN.Value Then
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               Continue;
            End-If;
            
            
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = "" And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> "" And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value <> &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value Then
               &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "";
               Continue;
            End-If;
            
            
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = "" And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = "" Then
               If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value <> &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMN.Value Then
                  Continue;
               End-If;
            End-If;
            
            
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = " " And
                  &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = " " Then
               
               If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value <> &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMN.Value Then
                  Continue;
               End-If;
            End-If;
            
            &bCanProceed = False;
            StepEnable(3, False);
            StepEnable(4, False);
            StepEnable(5, False);
            StepImage(2, "DIS");
            StepImage(3, "DIS");
            StepImage(4, "DIS");
            StepImage(5, "DIS");
            PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
            SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PSPGMODEL, &j, PSPGMODEL.PTPG_DSCOLUMNALIAS);
            &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSCOLUMNALIAS.Style = "PSERROR";
            
         End-If;
      End-For;
   End-For;
   If Not &bCanProceed Then
      Error (MsgGetText(268, 94, "Duplicate column names detected. Provide distinct column labels in the highlighted section(s) or set distinct column name in query manager"));
   End-If;
   
End-Function;

Function InitPGWizOptPage()
   Local array of string &chartAxis;
   Local Rowset &recOpt, &recOptLang, &AxisInfoOpt, &ColNames;
   Local string &colStr, &rowStr, &filterStr, &XaxisStr, &YaxisStr, &ChtFilterStr, &SeriesStr, &OlayStr;
   PTPG_WORKREC.PTPG_GROUP_BOX7.Visible = False;
   Local boolean &badState = False;
   PTPG_WORKREC.PTPG_NEXT_PB.Enabled = False;
   PSPGNUIOPT.PTPG_ONLYDETAIL.Visible = False;
   PSPGGRIDOPT.USERID.Value = "-";
   PSPGCHARTOPT.USERID.Value = "-";
   PSPGNUIOPT.PTPG_ALLOWPUBTILE.Label = MsgGetText(268, 1046, "(Message not found)Allow administrator to publish report to tile repository when used as analytics template");
   If %Mode = %Action_Add Then
      If &yAxisAngleChanged = False Then
         PSPGCHARTOPT.PTPG_YAXIS_ANGLE.Value = 90;
      End-If;
      If &xAxisAngleChanged = False Then
         PSPGCHARTOPT.PTPG_XAXIS_ANGLE.Value = 90;
      End-If;
      
   End-If;
   
   If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Then
      PTPG_WORKREC.PTPG_DISPLAYOPT.DisplayOnly = True;
      PSPGNUIOPT.PTPG_ONLYDETAIL.Visible = True;
   End-If;
   
   If PSPGCORE.PTPG_DSTYPE.Value <> "PSQUERY" Then
      PTPG_WORKREC.PTPG_GROUP_BOX7.Visible = False;
   End-If;
   /*BP 805R1 START*/
   If PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "CHT" Or
         PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "" Then
      PSPGNUIOPT.PTPG_ONLYDETAIL.Visible = True;
   End-If;
   /*BP 805R1 END*/
   DisplayHelpMessage();
   
   SetAllowedChartTypes("PSPGCHARTOPT");
   
   /*KM 901I1 Begin */
   PTPG_WORKREC.PTPG_DISPLAY_MODE.Value = "D";
   /* KM 901I1 End */
   
   /*RMS - 106-I1*/
   Local Rowset &recCalc = CreateRowset(Record.PSPGCALCOPT);
   Local Rowset &recThr = CreateRowset(Record.PSPGTHRESHOLD);
   Local string &szDualY;
   SQLExec("SELECT 'X' FROM PSPGAXIS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View", &exists);
   If All(&exists) Then
      &recAxis = CreateRowset(Record.PSPGAXIS);
      &recAxis.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
      &recOpt = CreateRowset(Record.PSPGVIEWOPT);
      &recOpt.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID='-'", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
      &recCalc.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID='-'", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
      &recThr.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID='-'", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
      /*PB107 Change 11 - start*/
      If All(&changedChtOption) Then
         PTPG_WORKREC.PTPG_DISPLAYOPT.Value = &changedChtOption;
      Else
         PTPG_WORKREC.PTPG_DISPLAYOPT.Value = &recOpt.GetRow(1).GetRecord(1).PTPG_DISPLAYOPT.Value;
      End-If;
      
      &szDualY = &recOpt.GetRow(1).GetRecord(1).PTPG_CHART_DUALY.Value;
      /*PB107 Change 11 - end*/
      
      /*KM 901I1 Begin */
      PTPG_WORKREC.PTPG_DISPLAY_MODE.Value = &recOpt.GetRow(1).GetRecord(1).PTPG_DISPLAY_MODE.Value;
      /* KM 901I1 End */
      
      /*BP 804R2 start*/
      Local string &currVal = PSPGNUIOPT.PTPG_RESULTVIEW.Value;
      
      If PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "CHT" Then
         PSPGNUIOPT.PTPG_ONLYDETAIL.Visible = True;
      End-If;
      
      If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Or
            PTPG_WORKREC.PTPG_DISPLAYOPT.Value <> "CHT" Then
         PSPGNUIOPT.PTPG_RESULTVIEW.ClearDropDownList();
         Local Record &xlatrecRslt = CreateRecord(Record.PSXLATITEM);
         &xlatrecRslt.FIELDNAME.Value = "PTPG_RESULTVIEW";
         &xlatrecRslt.FIELDVALUE.Value = "G";
         &xlatrecRslt.SelectByKeyEffDt(%Date);
         PSPGNUIOPT.PTPG_RESULTVIEW.AddDropDownItem("G", &xlatrecRslt.XLATLONGNAME.Value);
         
         &xlatrecRslt.FIELDNAME.Value = "PTPG_RESULTVIEW";
         &xlatrecRslt.FIELDVALUE.Value = "L";
         &xlatrecRslt.SelectByKeyEffDt(%Date);
         PSPGNUIOPT.PTPG_RESULTVIEW.AddDropDownItem("L", &xlatrecRslt.XLATLONGNAME.Value);
         
         
         &xlatrecRslt.FIELDNAME.Value = "PTPG_RESULTVIEW";
         &xlatrecRslt.FIELDVALUE.Value = "B";
         &xlatrecRslt.SelectByKeyEffDt(%Date);
         PSPGNUIOPT.PTPG_RESULTVIEW.AddDropDownItem("B", &xlatrecRslt.XLATLONGNAME.Value);
         PSPGNUIOPT.PTPG_RESULTVIEW.Value = &currVal;
         
      End-If;
      /*BP 804R2 end*/
      
      
      &colStrArr = CreateArrayRept("", 0);
      &rowStrArr = CreateArrayRept("", 0);
      &filterStrArr = CreateArrayRept("", 0);
      &ChtFlrStrArr = CreateArrayRept("", 0);
      &ChtXStrArr = CreateArrayRept("", 0);
      &ChtYStrArr = CreateArrayRept("", 0);
      &ChtSeriesStrArr = CreateArrayRept("", 0);
      &ChtOlyStrArr = CreateArrayRept("", 0);
      
      For &i = 1 To &recAxis.ActiveRowCount
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "GRIDCOL") Then
            &colStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "GRIDFILTER") Then
            &filterStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "CHARTFILTER") Then
            &ChtFlrStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "CHARTXAXIS") Then
            &ChtXStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "CHARTYAXIS") Then
            &ChtYStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "GRIDROW") Then
            &rowStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "CHARTSERIES") Then
            &ChtSeriesStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
         If (&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISTYPE.Value = "CHARTOVERLAY") Then
            &ChtOlyStrArr.Push(&recAxis.GetRow(&i).PSPGAXIS.PTPG_AXISCOL.Value);
         End-If;
         
      End-For;
      
   End-If;
   /*RMS - 106-I1*/
   
   
   &AxisInfoOpt = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   &ColNames = GetLevel0()(1).GetRowset(Scroll.PTPG_COL_VIEW);
   
   
   For &i = 1 To &AxisInfoOpt.ActiveRowCount
      If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = " " Then
         &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMNALIAS.Value = "";
      End-If;
   End-For;
   
   If %Page = Page.PTPG_WIZ_OPT Then
      CheckForDuplicateColumns();
   End-If;
   
   
   For &i = 1 To &AxisInfoOpt.ActiveRowCount
      &dsUniqueFLd = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value;
      If &AxisInfoOpt(&i).PSPGMODEL.PTPG_COLMNTYPE.Value = "DIM" Then
         If PSPGCORE.PTPG_DSTYPE.Value = "PSCOMPQUERY" Then
            Local ApiObject &QueryObjChild, &QrySelectsParent;
            &qryObj = OpenCompositeQueryObj(PSPGSETTINGS.PTPG_DSVALUE.Value, "N");
            &QrySelectsParent = &qryObj.CompositeQueryOutputFields;
            For &q = 1 To &QrySelectsParent.Count
               If &dsUniqueFLd = &QrySelectsParent.item(&q).QueryAlias | "." | &QrySelectsParent.item(&q).Name Then
                  &QueryObjChild = OpenQueryObj(&qryObj.Queries.ItemByAlias(&QrySelectsParent.item(&q).QueryAlias).QueryName, "N");
                  &QrySelects = &QueryObjChild.QuerySelect.QueryOutputFields;
                  &nCount = &QrySelects.Count;
                  &dsUniqueFLd = &QrySelectsParent.item(&q).Name;
                  Break;
               End-If;
            End-For;
         Else
            &qryObj = %Session.GetQuery();
            &nResult = &qryObj.OpenEx(PSPGSETTINGS.PTPG_DSVALUE.Value, True, False);
            If &nResult <> 0 Then
               Error MsgGet(50, 34, "Could not open query: %1", &sQryName);
            End-If;
            &nCount = &qryObj.QuerySelect.QueryOutputFields.Count;
            &QrySelects = &qryObj.QuerySelect.QueryOutputFields;
         End-If;
         For &r = 1 To &nCount
            
            If &QrySelects <> Null And
                  &QrySelects.item(&r).HeadingUniqueFieldName = &dsUniqueFLd Then
               
               If &QrySelects.item(&r).ExpNum <> 0 Then
                  &bCanProceed = False;
                  StepEnable(3, False);
                  StepEnable(4, False);
                  StepEnable(5, False);
                  StepImage(2, "DIS");
                  StepImage(3, "DIS");
                  StepImage(4, "DIS");
                  StepImage(5, "DIS");
                  PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
                  SetCursorPos(Page.PTPG_WIZ_MODEL, Scroll.PSPGMODEL, &i, PSPGMODEL.PTPG_COLMNTYPE);
                  &AxisInfoOpt(&i).PSPGMODEL.PTPG_COLMNTYPE.Style = "PSERROR";
                  Error MsgGet(268, 112, "Invalid field specified.");
               End-If;
            End-If;
         End-For;
      End-If;
   End-For;
   
   If &qryObj <> Null Then
      &qryObj.Close();
   End-If;
   
   
   If &QueryObjChild <> Null Then
      &qryObj.Close();
   End-If;
   
   If (&PGOptAxisChanged = False) Or
         (&bTypeChanged = True) Then
      &bTypeChanged = False;
      &ColNames.Flush();
      Local string &findStr;
      /*BP 804R1 start*/
      Local boolean &emptyAxis = True;
      For &i = 1 To &AxisInfoOpt.ActiveRowCount
         &findStr = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value;
         &ColNames.GetRow(&i).GetRecord(1).PTPG_DSCOLUMN.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value;
         &ColNames.GetRow(&i).GetRecord(1).PTPG_FORMAT.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_FORMAT.Value;
         &ColNames.GetRow(&i).GetRecord(1).PTPG_FORMATTYPE.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_FORMATTYPE.Value;
         &ColNames.GetRow(&i).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value;
         &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_COLMNTYPE.Value;
         
         If &szDualY <> "" Then
            If &szDualY = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_ISCHARTDUALY.Value = "1";
               &ColNames.GetRow(&i).GetRecord(1).PTPG_ISCHARTDUALY.Enabled = True;
            End-If;
         Else
            &ColNames.GetRow(&i).GetRecord(1).PTPG_ISCHARTDUALY.Enabled = False;
         End-If;
         If All(&exists) Then
            
            If (&colStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "COL";
               &emptyAxis = False;
            End-If;
            If (&rowStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW";
               &emptyAxis = False;
            End-If;
            If (&filterStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "FLR";
               &emptyAxis = False;
            End-If;
            
            If (&ChtXStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "X";
               &emptyAxis = False;
            End-If;
            If (&ChtYStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "Y";
               &emptyAxis = False;
            End-If;
            If (&ChtFlrStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "FLR";
               &emptyAxis = False;
            End-If;
            If (&ChtSeriesStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "SER";
               &emptyAxis = False;
            End-If;
            If (&ChtOlyStrArr.Find(&findStr) > 0) Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "OLY";
               &emptyAxis = False;
            End-If;
            
         End-If;
         &ColNames.InsertRow(&i);
      End-For;
      
      &ColNames.DeleteRow(&i);
      If &emptyAxis Then
         &badState = True;
      End-If;
      /*BP 804R1 end*/
      Local array of string &arrCurrCtl = CreateArrayRept("", 0);
      For &i = 1 To &AxisInfoOpt.ActiveRowCount
         If All(&AxisInfoOpt(&i).PSPGMODEL.PTPG_CURR_CTL_FLD.Value) Then
            rem &arrCurrCtl.Push(&AxisInfoOpt(&i).PSPGMODEL.PTPG_CURR_CTL_FLD.Value);
         End-If;
      End-For;
      
      For &i = &ColNames.ActiveRowCount To 1 Step - 1
         &nCurr = &arrCurrCtl.Find(&ColNames(&i).GetRecord(1).PTPG_DSUNIQUEFLD.Value);
         If &nCurr <> 0 Then
            &ColNames.DeleteRow(&i);
         End-If;
      End-For;
      
      /*PB107 Change 12 Start*/
      For &i = &ColNames.ActiveRowCount To 1 Step - 1
         Local string &tempColVal = &ColNames(&i).GetRecord(1).PTPG_COLMNTYPE.Value;
         If (None(&tempColVal) Or
               (&tempColVal = "DISO")) Then
            &ColNames.DeleteRow(&i);
         End-If;
      End-For;
      
      For &i = 1 To &ColNames.ActiveRowCount
         For &j = 1 To &recCalc.ActiveRowCount
            If &ColNames(&i).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &recCalc(&j).GetRecord(1).PTPG_DSUNIQUEFLD.Value Then
               &ColNames(&i).GetRecord(1).PTPG_CALCFORMULA.Value = &recCalc(&j).GetRecord(1).PTPG_CALCFORMULA.Value;
            End-If;
         End-For;
      End-For;
      
      For &i = 1 To &ColNames.ActiveRowCount
         For &j = 1 To &recThr.ActiveRowCount
            If &ColNames(&i).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &recThr(&j).GetRecord(1).PTPG_DSUNIQUEFLD.Value Then
               &ColNames(&i).GetRecord(1).PTPG_THRESHOLDTYPE.Value = &recThr(&j).GetRecord(1).PTPG_THRESHOLDTYPE.Value;
               &ColNames(&i).GetRecord(1).PTPG_THR_DIST_VAL.Value = &recThr(&j).GetRecord(1).PTPG_THR_DIST_VAL.Value;
               &ColNames(&i).GetRecord(1).PTPG_THR_LOW_VAL.Value = &recThr(&j).GetRecord(1).PTPG_THR_LOW_VAL.Value;
               &ColNames(&i).GetRecord(1).PTPG_THR_HIGH_VAL.Value = &recThr(&j).GetRecord(1).PTPG_THR_HIGH_VAL.Value;
               &ColNames(&i).GetRecord(1).PTPG_THR_COLOR.Value = &recThr(&j).GetRecord(1).PTPG_THR_COLOR.Value;
            End-If;
         End-For;
      End-For;
      
   End-If;
   /*PB107 Change 12 END*/
   For &i = 1 To &ColNames.ActiveRowCount
      If &ColNames(&i).GetRecord(1).PTPG_COLMNTYPE.Value <> "VAL" Then
         &ColNames(&i).GetRecord(1).PTPG_CALCFORMULA.Visible = False;
         &ColNames(&i).GetRecord(1).PTPG_DEFINE_THR.Visible = False;
      Else
         &ColNames(&i).GetRecord(1).PTPG_CALCFORMULA.Visible = True;
         &ColNames(&i).GetRecord(1).PTPG_DEFINE_THR.Visible = True;
      End-If;
   End-For;
   /*PB107 Change - 13 start*/
   If %Page = Page.PTPG_WIZ_OPT Then
      Local string &previousValue, &xDescr, &yDescr, &olyDescr, &serDescr, &filDescr;
      Local Rowset &Xlat;
      Local Field &axisTemp;
      &ColNames = GetLevel0()(1).GetRowset(Scroll.PTPG_COL_VIEW);
      Local Record &tempRec;
      
      Local Record &xlatrec = CreateRecord(Record.PSXLATITEM);
      &xlatrec.FIELDNAME.Value = "PTPG_CHARTAXIS";
      &xlatrec.FIELDVALUE.Value = "X";
      &xlatrec.SelectByKeyEffDt(%Date);
      &xDescr = &xlatrec.XLATLONGNAME.Value;
      &xlatrec.FIELDVALUE.Value = "Y";
      &xlatrec.SelectByKeyEffDt(%Date);
      &yDescr = &xlatrec.XLATLONGNAME.Value;
      &xlatrec.FIELDVALUE.Value = "SER";
      &xlatrec.SelectByKeyEffDt(%Date);
      &serDescr = &xlatrec.XLATLONGNAME.Value;
      &xlatrec.FIELDVALUE.Value = "OLY";
      &xlatrec.SelectByKeyEffDt(%Date);
      &olyDescr = &xlatrec.XLATLONGNAME.Value;
      &xlatrec.FIELDVALUE.Value = "FLR";
      &xlatrec.SelectByKeyEffDt(%Date);
      &filDescr = &xlatrec.XLATLONGNAME.Value;
      
      For &i = 1 To &ColNames.ActiveRowCount
         &previousValue = &ColNames(&i).PTPG_COL_VIEW.PTPG_CHARTAXIS.Value;
         
         
         If (&ColNames(&i).PTPG_COL_VIEW.PTPG_COLMNTYPE.Value = "DIM") Then
            &axisTemp = &ColNames(&i).PTPG_COL_VIEW.PTPG_CHARTAXIS;
            &axisTemp.ClearDropDownList();
            &axisTemp.AddDropDownItem("X", &xDescr);
            &axisTemp.AddDropDownItem("FLR", &filDescr);
            &axisTemp.AddDropDownItem("SER", &serDescr);
            &ColNames(&i).PTPG_COL_VIEW.PTPG_ISCHARTDUALY.Visible = False;
         End-If;
         
         If (&ColNames(&i).PTPG_COL_VIEW.PTPG_COLMNTYPE.Value = "VAL") Then
            &axisTemp = &ColNames(&i).PTPG_COL_VIEW.PTPG_CHARTAXIS;
            &axisTemp.ClearDropDownList();
            &axisTemp.AddDropDownItem("Y", &yDescr);
            &axisTemp.AddDropDownItem("OLY", &olyDescr);
            &ColNames(&i).PTPG_COL_VIEW.PTPG_ISCHARTDUALY.Visible = True;
            If (&nChartYCols > 1) Then
               &ColNames(&i).PTPG_COL_VIEW.PTPG_ISCHARTDUALY.Enabled = True;
            End-If;
         End-If;
         &ColNames(&i).PTPG_COL_VIEW.PTPG_CHARTAXIS.Value = &previousValue;
      End-For;
   End-If;
   /*PB107 Change - 13 end*/
   
   /*PB107 Change 14 Start*/
   If (%Mode = %Action_Add Or
         %Mode = %Action_Correction) And
         (&PGOptAxisChanged = False) And
         (&bStep4Initialized = False) Then
      PSPGCHARTOPT.PTPG_CHART_TYPE.Value = "0";
      PSPGCHARTOPT.PTPG_CHART_LEGEND.Value = "-1";
      If None(&changedChtOption) Then
         PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "CHT";
      Else
         PTPG_WORKREC.PTPG_DISPLAYOPT.Value = &changedChtOption;
      End-If;
      PSPGCHARTOPT.PTPG_CHART_TITLE.Value = PSPGCORE.PTPG_PGRIDTITLE.Value;
   End-If;
   /*PB107 Change 14 End*/
   
   /*PB107 - Change - 15 - Start*/
   
   If None(PTPG_WORKREC.PTPG_DISPLAYOPT.Value) Then
      PTPG_WORKREC.PTPG_DISPLAYOPT.Value = "CHT";
      &badState = True;
   End-If;
   
   If (%Mode = %Action_Add Or
         %Mode = %Action_Correction Or
         &badState) Then
      Local Rowset &rs = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
      Local string &dimname;
      If &PGOptAxisChanged = False Then
         &chartAxis = CreateArray("X", "FLR");
         Local number &ArrayLen = &chartAxis.Len;
         
         For &i = 1 To &ArrayLen
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "DIM" Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = &chartAxis [&i];
               If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "X" Then
                  If Not &bStep4Initialized Then
                     &dimname = &ColNames.GetRow(&i).GetRecord(1).PTPG_DSCOLUMN.Value;
                     For &k = 1 To &rs.ActiveRowCount
                        If (&rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMN.Value = &dimname) Then
                           If &rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMNALIAS.Value <> "" Then
                              &dimname = &rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMNALIAS.Value;
                              Break;
                           End-If;
                        End-If;
                     End-For;
                     
                     PSPGCHARTOPT.PTPG_XAXIS_LABEL.Value = &dimname;
                  End-If;
                  &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW";
               End-If;
            End-If;
         End-For;
         
         For &i = 1 To &ColNames.ActiveRowCount
            /*post 801 pb start*/
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_FORMATTYPE.Value = 2 Or
                  &ColNames.GetRow(&i).GetRecord(1).PTPG_FORMATTYPE.Value = 3 Or
                  &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "Y";
               /*post 801 pb end*/
               If Not &bStep4Initialized Then
                  &dimname = &ColNames.GetRow(&i).GetRecord(1).PTPG_DSCOLUMN.Value;
                  For &k = 1 To &rs.ActiveRowCount
                     If (&rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMN.Value = &dimname) Then
                        
                        If &rs.GetRow(&k).GetRecord(1).PTPG_AGGR_ALIAS.Value <> "" Then
                           &dimname = &rs.GetRow(&k).GetRecord(1).PTPG_AGGR_ALIAS.Value;
                           Break;
                        Else
                           
                           If &rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMNALIAS.Value <> "" Then
                              &dimname = &rs.GetRow(&k).GetRecord(1).PTPG_DSCOLUMNALIAS.Value;
                              Break;
                           End-If;
                        End-If;
                     End-If;
                  End-For;
                  PSPGCHARTOPT.PTPG_YAXIS_LABEL.Value = &dimname;
               End-If;
               Break;
            End-If;
         End-For;
         
         
         For &i = 1 To &ColNames.ActiveRowCount
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "COL";
            End-If;
         End-For;
         
         
      End-If;
   End-If;
   
   For &i = 1 To &ColNames.ActiveRowCount
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" And
            &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value <> "Y" Then
         &ColNames(&i).PTPG_COL_VIEW.PTPG_ISCHARTDUALY.Enabled = False;
      End-If;
   End-For;
   
   For &i = 1 To &ColNames.ActiveRowCount
      If &colNoChanged = Null Then
         &colNoChanged = CreateArray(0, "");
      End-If;
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "VAL" Then
         For &m = &colNoChanged.Len To 1 Step - 1
            If &colNoChanged [&m] = &i Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "COL";
            End-If;
         End-For;
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "X" Or
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "SER" Or
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "FLR" Then
            &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "";
         End-If;
      End-If;
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_COLMNTYPE.Value = "DIM" Then
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "COL" Then
            For &m = &colNoChanged.Len To 1 Step - 1
               If &colNoChanged [&m] = &i Then
                  &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW";
               End-If;
            End-For;
         End-If;
         
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW" Then
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "Y" Or
                  &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "OLY" Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "";
            End-If;
         End-If;
         
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW" Then
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "Y" Then
               &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "";
            End-If;
         End-If;
         
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "FLR" Then
            &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "FLR";
         End-If;
         
         If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "FLR" Then
            &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "FLR";
         End-If;
      End-If;
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "" Then
         &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "";
      End-If;
      
   End-For;
   
   
   /*PB107 - Change - 15 - end*/
   
   &nGridRowCols = 0;
   &nGridColCols = 0;
   &nChartXCols = 0;
   &nChartYCols = 0;
   For &i = 1 To &ColNames.ActiveRowCount
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "ROW" Then
         &nGridRowCols = &nGridRowCols + 1;
      End-If;
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value = "COL" Then
         &nGridColCols = &nGridColCols + 1;
      End-If;
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "X" Then
         &nChartXCols = &nChartXCols + 1;
      End-If;
      
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_CHARTAXIS.Value = "Y" Then
         &nChartYCols = &nChartYCols + 1;
      End-If;
   End-For;
   /*BP 801I1 START*/
   Local Rowset &componentMapping = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_COMPMAP_VW);
   
   If %Mode = %Action_Add Or
         %Mode = %Action_Correction Then
      If Not &bStep4Initialized Then
         PSPGGRIDOPT.PTPG_WRAPLABEL.Value = "0"; /*Wrap label is no longer used*/
         PSPGGRIDOPT.PTPG_COLLAPSIBLE.Value = "1";
         PSPGGRIDOPT.PTPG_EXPAND.Value = "1";
      End-If;
      
      
      
   End-If;
   If %Mode = %Action_UpdateDisplay Then
      &componentMapping.Flush();
   End-If;
   If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Then
      If (&componentMapping(1).PTPG_COMPMAP_VW.PTPG_COMPMAPPING.Value = "") Then
         &componentMapping.Flush();
         &componentMapping(1).PTPG_COMPMAP_VW.PTPG_COMPMAPPING.Value = PSPGSETTINGS.PTPG_DSVALUE.Value;
      End-If;
   End-If;
   &compMappingRemoved = CreateArrayRept("", 0);
   &compMappingMarketRemoved = CreateArrayRept("", 0);
   
   &componentMapping(1).PTPG_COMPMAP_VW.MARKET.Value = PTPG_WORKREC.MARKET.Value;
   &componentMapping(1).PTPG_COMPMAP_VW.PTPG_COMPMAPPING.SqlText = "SELECT DISTINCT PNLGRPNAME FROM  PSPNLGRPDEFN where MARKET = '" | &componentMapping(1).PTPG_COMPMAP_VW.MARKET.Value | "'";
   
   Local Rowset &colmsBindRs;
   Local Rowset &ColNameRs;
   
   PSPGNUIOPT.PTPG_LSTIMGNAME.ClearDropDownList();
   Local Rowset &rsModel = GetLevel0()(1).GetRowset(Scroll.PSPGMODEL);
   For &i = 1 To &rsModel.ActiveRowCount
      If &rsModel(&i).PSPGMODEL.PTPG_FORMATTYPE.Value = 8 Then
         PSPGNUIOPT.PTPG_LSTIMGNAME.AddDropDownItem(&rsModel(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value, &rsModel(&i).PSPGMODEL.PTPG_DSCOLUMN.Value);
      End-If;
   End-For;
   
   &colmsBindRs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUILST_VW);
   &colmsBindRs.Flush();
   For &z = 1 To &colmsBindRs.ActiveRowCount
      &colmsBindRs(&z).PTPG_NUILST_VW.PTPG_NUILST_BIND.Value = "%" | &z;
   End-For;
   &colmsBind = &colmsBindRs(CurrentRowNumber()).PTPG_NUILST_VW.PTPG_DSCOLUMN;
   &colmsBind.ClearDropDownList();
   
   /*BP POST 801 PB START*/
   
   For &i = 1 To &rsModel.ActiveRowCount
      &colmsBind.AddDropDownItem(&rsModel(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value, &rsModel(&i).PSPGMODEL.PTPG_DSCOLUMN.Value);
   End-For;
   
   &colmsBindRs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUILST_VW2);
   &colmsBindRs.Flush();
   For &z = 1 To &colmsBindRs.ActiveRowCount
      &colmsBindRs(&z).PTPG_NUILST_VW2.PTPG_NUILST_BIND.Value = "%" | &z;
   End-For;
   &colmsBind = &colmsBindRs(CurrentRowNumber()).PTPG_NUILST_VW2.PTPG_DSCOLUMN;
   &colmsBind.ClearDropDownList();
   
   For &i = 1 To &rsModel.ActiveRowCount
      &colmsBind.AddDropDownItem(&rsModel(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value, &rsModel(&i).PSPGMODEL.PTPG_DSCOLUMN.Value);
   End-For;
   
   If PSPGNUIOPT.PTPG_RESULTVIEW.Value = "B" Then
      PTPG_NUI_WRK.PTPG_RESULTVWDEF.Visible = True;
   Else
      PTPG_NUI_WRK.PTPG_RESULTVWDEF.Visible = False;
   End-If;
   
   Local Rowset &rsSavedBinds = CreateRowset(Record.PSPGNUIOPT);
   &rsSavedBinds.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
   Local array of string &arrBindedVal, &arrCompMap, &arrCompMarketMap;
   If (&rsSavedBinds.RowCount >= 1 And
         &rsSavedBinds(1).PSPGNUIOPT.PTPG_PGRIDNAME.Value <> "") Then
      If (&rsSavedBinds(1).PSPGNUIOPT.PTPG_SUM_BINDVLIST.Value <> "") Then
         &colmsBindRs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUILST_VW);
         &arrBindedVal = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_SUM_BINDVLIST.Value, ",");
         For &z = 1 To &arrBindedVal.Len
            If &z = 1 Then
               &colmsBindRs(1).PTPG_NUILST_VW.PTPG_DSCOLUMN.Value = &arrBindedVal [&z]
            Else
               &colmsBindRs.InsertRow(&colmsBindRs.ActiveRowCount);
               &colmsBindRs(&colmsBindRs.ActiveRowCount).PTPG_NUILST_VW.PTPG_DSCOLUMN.Value = &arrBindedVal [&z];
               &colmsBindRs(&colmsBindRs.ActiveRowCount).PTPG_NUILST_VW.PTPG_NUILST_BIND.Value = "%" | &z;
            End-If;
         End-For;
         If (&rsSavedBinds(1).PSPGNUIOPT.PTPG_TIT_BINDVLIST.Value <> "") Then
            &colmsBindRs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUILST_VW2);
            &arrBindedVal = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_TIT_BINDVLIST.Value, ",");
            For &z = 1 To &arrBindedVal.Len
               If &z = 1 Then
                  &colmsBindRs(1).PTPG_NUILST_VW2.PTPG_DSCOLUMN.Value = &arrBindedVal [&z]
               Else
                  &colmsBindRs.InsertRow(&colmsBindRs.ActiveRowCount);
                  &colmsBindRs(&colmsBindRs.ActiveRowCount).PTPG_NUILST_VW2.PTPG_DSCOLUMN.Value = &arrBindedVal [&z];
                  &colmsBindRs(&colmsBindRs.ActiveRowCount).PTPG_NUILST_VW2.PTPG_NUILST_BIND.Value = "%" | &z;
               End-If;
            End-For;
         End-If;
      End-If;
      /*BP 805R1 START*/
      PSPGNUIOPT.PTPG_LSTIMGNAME.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LSTIMGNAME.Value;
      PSPGNUIOPT.PTPG_RESULTVIEW.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_RESULTVIEW.Value;
      PSPGNUIOPT.PTPG_ONLYDETAIL.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_ONLYDETAIL.Value;
      PSPGNUIOPT.PTPG_RESULTVWDEF.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_RESULTVWDEF.Value;
      PSPGNUIOPT.PTPG_LST_MSGSET_T.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LST_MSGSET_T.Value;
      PSPGNUIOPT.PTPG_LST_MSGNBR_T.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LST_MSGNBR_T.Value;
      PSPGNUIOPT.PTPG_LST_MSGSET_S.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LST_MSGSET_S.Value;
      PSPGNUIOPT.PTPG_LST_MSGNBR_S.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LST_MSGNBR_S.Value;
      PSPGNUIOPT.PTPG_LSTMSG_USE_T.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LSTMSG_USE_T.Value;
      PSPGNUIOPT.PTPG_LSTMSG_USE_S.Value = &rsSavedBinds(1).PSPGNUIOPT.PTPG_LSTMSG_USE_S.Value;
      If PSPGNUIOPT.PTPG_RESULTVIEW.Value = "B" Then
         PTPG_NUI_WRK.PTPG_RESULTVWDEF.Visible = True;
      Else
         PTPG_NUI_WRK.PTPG_RESULTVWDEF.Visible = False;
      End-If;
      If PSPGNUIOPT.PTPG_LST_MSGSET_T.Value <> 0 Then
         PTPG_NUI_WRK.PTPG_MSG_TEXT2.Value = MsgGetText(PSPGNUIOPT.PTPG_LST_MSGSET_T.Value, PSPGNUIOPT.PTPG_LST_MSGNBR_T.Value, "");
         PTPG_NUI_WRK.PTPG_MSG_TEXT_LON2.Value = MsgGetExplainText(PSPGNUIOPT.PTPG_LST_MSGSET_T.Value, PSPGNUIOPT.PTPG_LST_MSGNBR_T.Value, "");
      End-If;
      If PSPGNUIOPT.PTPG_LST_MSGSET_S.Value <> 0 Then
         PTPG_NUI_WRK.PTPG_MSG_TEXT.Value = MsgGetText(PSPGNUIOPT.PTPG_LST_MSGSET_S.Value, PSPGNUIOPT.PTPG_LST_MSGNBR_S.Value, "");
         PTPG_NUI_WRK.PTPG_MSG_TEXT_LONG.Value = MsgGetExplainText(PSPGNUIOPT.PTPG_LST_MSGSET_S.Value, PSPGNUIOPT.PTPG_LST_MSGNBR_S.Value, "");
      End-If;
      
      /*BP 805R1 END*/
      If PSPGCORE.PTPG_DSTYPE.Value = "COMPONENT" Then
         &rsSavedBinds(1).PSPGNUIOPT.PTPG_COMPMAPPING.Value = PSPGSETTINGS.PTPG_DSVALUE.Value;
         /*BP 805R1 START*/
         PTPG_NUI_WRK.PTPG_GROUP_BOX4.Visible = False;
         /*BP 805R1 END*/
      End-If;
      If (&rsSavedBinds(1).PSPGNUIOPT.PTPG_COMPMAPPING.Value) Then
         &arrCompMap = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_COMPMAPPING.Value, ",");
         &arrCompMarketMap = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_COMPMARKETMAP.Value, ",");
         For &z = 1 To &arrCompMap.Len
            If &arrCompMap [&z] <> "" Then
               If &z = 1 Then
                  &componentMapping(1).PTPG_COMPMAP_VW.PTPG_COMPMAPPING.Value = &arrCompMap [&z]
               Else
                  &componentMapping.InsertRow(&componentMapping.ActiveRowCount);
                  &componentMapping(&componentMapping.ActiveRowCount).PTPG_COMPMAP_VW.PTPG_COMPMAPPING.Value = &arrCompMap [&z];
                  &componentMapping(&componentMapping.ActiveRowCount).PTPG_COMPMAP_VW.MARKET.Value = &arrCompMarketMap [&z];
               End-If;
            End-If;
         End-For;
      End-If;
      
      
   End-If;
   
   /*BP 805R1 START*/
   PTPG_NUI_WRK.PTPG_GROUP_BOX4.Visible = False;
   /*BP 805R1 END*/
   
   
   /*BP 806I1 start*/
   
   
   Local Rowset &xcludedCols = GetLevel0()(1).GetRowset(Scroll.PTPG_NUICOL_DVW);
   Local boolean &bExcluded;
   &xcludedCols.Flush();
   Local array of string &savedXcludedCols = CreateArrayRept("", 0);
   If &rsSavedBinds(1).PSPGNUIOPT.PTPG_XCLDCOLS.Value <> "" Then
      &savedXcludedCols = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_XCLDCOLS.Value, ",");
   End-If;
   For &i = 1 To &AxisInfoOpt.ActiveRowCount
      If &i > 1 Then
         &xcludedCols.InsertRow(&xcludedCols.ActiveRowCount);
      End-If;
      &bExcluded = False;
      If &savedXcludedCols <> Null Then
         For &z = 1 To &savedXcludedCols.Len
            If &savedXcludedCols [&z] = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value Then
               &bExcluded = True;
               Break
            End-If;
         End-For;
      End-If;
      If &bExcluded Then
         &xcludedCols(&xcludedCols.ActiveRowCount).PTPG_NUICOL_DVW.PTPG_DSSELCOL.Value = "N";
      Else
         &xcludedCols(&xcludedCols.ActiveRowCount).PTPG_NUICOL_DVW.PTPG_DSSELCOL.Value = "Y";
      End-If;
      &xcludedCols(&xcludedCols.ActiveRowCount).PTPG_NUICOL_DVW.PTPG_DSCOLUMN.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value;
      &xcludedCols(&xcludedCols.ActiveRowCount).PTPG_NUICOL_DVW.PTPG_DSUNIQUEFLD.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value;
      
   End-For;
   
   /*BP 809I1 start*/
   Local Rowset &fctOpCols = GetLevel0()(1).GetRowset(Scroll.PTPG_NUIFCT_DVW);
   &fctOpCols.Flush();
   Local boolean &bFirstTime = True;
   Local array of string &savedSngSlctFct = CreateArrayRept("", 0);
   If &rsSavedBinds(1).PSPGNUIOPT.PTPG_FACETSINGLSEL.Value <> "" Then
      &savedSngSlctFct = Split(&rsSavedBinds(1).PSPGNUIOPT.PTPG_FACETSINGLSEL.Value, ",");
   End-If;
   Local Rowset &rsNUIDimensionOpt = CreateRowset(Record.PSPGNUIDIMOPT);
   &rsNUIDimensionOpt.Fill("WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2", PSPGCORE.PTPG_PGRIDNAME.Value, PSPGCORE.PTPG_PGRIDNAME.Value | ".View");
   Local number &dimOptCount;
   For &i = 1 To &ColNames.ActiveRowCount
      If &ColNames.GetRow(&i).GetRecord(1).PTPG_GRIDAXIS.Value <> "COL" Then
         
         If Not &bFirstTime Then
            &fctOpCols.InsertRow(&fctOpCols.ActiveRowCount);
         End-If;
         
         &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSCOLUMN.Value = &ColNames(&i).PTPG_COL_VIEW.PTPG_DSCOLUMN.Value;
         &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSUNIQUEFLD.Value = &ColNames(&i).PTPG_COL_VIEW.PTPG_DSUNIQUEFLD.Value;
         Local boolean &bSingleSelect = False;
         Local string &fctChtType;
         If &savedSngSlctFct <> Null Then
            For &z = 1 To &savedSngSlctFct.Len
               If &savedSngSlctFct [&z] = &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSUNIQUEFLD.Value Then
                  &bSingleSelect = True;
                  Break
               End-If;
            End-For;
         End-If;
         
         Local boolean &bFctChart = False;
         
         For &dimOptCount = 1 To &rsNUIDimensionOpt.RowCount
            If &rsNUIDimensionOpt(&dimOptCount).PSPGNUIDIMOPT.PTPG_DSUNIQUEFLD.Value = &ColNames(&i).PTPG_COL_VIEW.PTPG_DSUNIQUEFLD.Value Then
               
               If &rsNUIDimensionOpt(&dimOptCount).PSPGNUIDIMOPT.PTS_NUI_FCTCHT.Value = "Y" Then
                  &bFctChart = True;
                  &fctChtType = &rsNUIDimensionOpt(&dimOptCount).PSPGNUIDIMOPT.PTS_NUI_FCTCHTTYPE.Value
               End-If;
               Break;
            End-If;
         End-For;
         
         If &bSingleSelect Then
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSSELCOL.Value = "N";
         Else
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSSELCOL.Value = "Y";
         End-If;
         /* disable multiselect checkbox when tree facets */
         For &j = 1 To &AxisInfoOpt.ActiveRowCount
            If &ColNames.GetRow(&i).GetRecord(1).PTPG_DSUNIQUEFLD.Value = &AxisInfoOpt(&j).PSPGMODEL.PTPG_DSUNIQUEFLD.Value Then
               If &AxisInfoOpt(&j).PSPGMODEL.TREE_NAME.Value <> "" Then
                  &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTPG_DSSELCOL.Enabled = False;
               End-If;
            End-If;
         End-For;
         If &bFctChart Then
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTS_NUI_FCTCHT.Value = "Y";
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTS_NUI_FCTCHTTYPE.Value = &fctChtType;
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTS_NUI_FCTCHTTYPE.DisplayOnly = False;
         Else
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTS_NUI_FCTCHT.Value = "N";
            &fctOpCols(&fctOpCols.ActiveRowCount).PTPG_NUIFCT_DVW.PTS_NUI_FCTCHTTYPE.DisplayOnly = True;
         End-If;
         
         &bFirstTime = False;
      End-If;
   End-For;
   /*BP 809I1 end*/
   /*Drilling URL start*/
   If &drillURLMappedColums <> Null Then
      Local Rowset &drillMapRs = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUIDRL_DVW);
      &drillMapRs.Flush();
      Local string &displayOption;
      Local array of string &tempDrillArr, &tempDrillArr2;
      
      Local number &n = 1;
      For &j = 1 To &drillURLMappedColums.Len
         
         For &dimOptCount = 1 To &rsNUIDimensionOpt.RowCount
            If &rsNUIDimensionOpt(&dimOptCount).PSPGNUIDIMOPT.PTPG_DSUNIQUEFLD.Value = &drillURLMappedColums [&j] Then
               &displayOption = &rsNUIDimensionOpt(&dimOptCount).PSPGNUIDIMOPT.PTPG_DRILLURLDISP.Value;
               Break;
            End-If;
         End-For;
         
         If &displayOption = "" Then
            &displayOption = "N";
         End-If;
         
         For &i = 1 To &AxisInfoOpt.ActiveRowCount
            If &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSUNIQUEFLD.Value = &drillURLMappedColums [&j] Then
               If &n <> 1 Then
                  &drillMapRs.InsertRow(&drillMapRs.ActiveRowCount);
               End-If;
               &drillMapRs(&n).PTPG_NUIDRL_DVW.PTPG_DSUNIQUEFLD.Value = &drillURLMappedColums [&j];
               &drillMapRs(&n).PTPG_NUIDRL_DVW.PTPG_DSCOLUMN.Value = &AxisInfoOpt(&i).PSPGMODEL.PTPG_DSCOLUMN.Value;
               &drillMapRs(&n).PTPG_NUIDRL_DVW.PTPG_DRILLURLDISP.Value = &displayOption;
               &n = &n + 1;
               Break;
            End-If;
         End-For;
      End-For;
   Else
      GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_NUIDRL_DVW).HideAllRows();
   End-If;
   If &nChartYCols > 1 And
         PSPGNUIOPT.PTPG_ALLOWMULYAXIS.Value = "Y" Then
      PSPGNUIOPT.PTPG_ALLOWMULYAXIS.DisplayOnly = True;
   Else
      PSPGNUIOPT.PTPG_ALLOWMULYAXIS.DisplayOnly = False;
   End-If;
   
   /*Drilling URL end*/
   If PSPGNUIOPT.PTPG_RESULTVIEW.Value = "N" Or
         PSPGNUIOPT.PTPG_RESULTVIEW.Value = "L" Then
      REM HideScroll(Scroll.PTPG_NUICOL_DVW);
      PTPG_NUI_WRK.PTPG_GROUP_BOX6.Visible = False;
   Else
      REM UnhideScroll(Scroll.PTPG_NUICOL_DVW);
      PTPG_NUI_WRK.PTPG_GROUP_BOX6.Visible = True;
   End-If;
   
   /*BP 806I1 END*/
   
   If %Mode = %Action_Add Or
         %Mode = %Action_Correction Then
      If Not &bStep4Initialized Then
         PSPGGRIDOPT.PTPG_WRAPLABEL.Value = "0"; /*Wrap label is no longer used*/
         PSPGGRIDOPT.PTPG_COLLAPSIBLE.Value = "1";
         PSPGGRIDOPT.PTPG_EXPAND.Value = "1";
      End-If;
   End-If;
   
   
   If &nGridRowCols >= 1 And
         &nGridColCols >= 1 And
         &nChartXCols >= 1 And
         &nChartYCols >= 1 Then
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = False;
      StepImage(3, "CMP");
      StepImage(4, "INP");
      If %Mode = %Action_Add Or
            %Mode = %Action_Correction Then
         StepEnable(4, True);
         StepImage(5, "INC");
      Else
         StepEnable(4, True);
         StepEnable(5, True);
         StepImage(5, "CMP");
      End-If;
   Else
      StepEnable(4, True);
      StepEnable(5, False);
      StepImage(5, "DIS");
      PTPG_WORKREC.PTPG_NEXT_PB.DisplayOnly = True;
      /*PB107 start*/
      Exit (1);
      /*PB107 end*/
   End-If;
   
   If Not &bStep4Initialized Then
      &bStep4Initialized = True;
   End-If;
   
   
End-Function;

/*RMS 106I1*/
/*BP 854105*/
Function DeleteMyPersonalizations(&szModelName As string, &viewName As string, &userId As string)
   
   Local string &szSqlViewOpt = "DELETE FROM PSPGVIEWOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlGridOpt = "DELETE FROM PSPGGRIDOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlChartOpt = "DELETE FROM PSPGCHARTOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlChartFlrsOpt = "DELETE FROM PSPGCHRTFLRSOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlChartFlrsOptLang = "DELETE FROM PSPGCHTFLRSLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlPrompt = "DELETE FROM PSPGQRYPROMPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlViewOptLang = "DELETE FROM PSPGVIEWOPTLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlChartOptLang = "DELETE FROM PSPGCHARTOPTLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlPromptLang = "DELETE FROM PSPGQRYPROMPLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlPromptPer = "DELETE FROM PSPGQRYPRMPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlChartPer = "DELETE FROM PSPGCHARTOPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlAxisPer = "DELETE FROM PSPGAXISPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   Local string &szSqlViewOptPer = "DELETE FROM PSPGVIEWOPTPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID=:3";
   
   
   SQLExec(&szSqlViewOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlGridOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPrompt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlAxisPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptPer, &szModelName, &viewName, &userId);
   
End-Function;

/*BP 854105*/


Function DeleteAllUserCustomizations(&szModelName As string)
   
   Local string &szSqlViewOpt = "DELETE FROM PSPGVIEWOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlGridOpt = "DELETE FROM PSPGGRIDOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartOpt = "DELETE FROM PSPGCHARTOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartFlrsOpt = "DELETE FROM PSPGCHRTFLRSOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartFlrsOptLang = "DELETE FROM PSPGCHTFLRSLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPrompt = "DELETE FROM PSPGQRYPROMPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlViewOptLang = "DELETE FROM PSPGVIEWOPTLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartOptLang = "DELETE FROM PSPGCHARTOPTLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPromptLang = "DELETE FROM PSPGQRYPROMPLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPromptPer = "DELETE FROM PSPGQRYPRMPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartPer = "DELETE FROM PSPGCHARTOPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlAxisPer = "DELETE FROM PSPGAXISPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlViewOptPer = "DELETE FROM PSPGVIEWOPTPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   &viewName = &szModelName | ".View";
   &userId = "-";
   
   SQLExec(&szSqlViewOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlGridOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPrompt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlAxisPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptPer, &szModelName, &viewName, &userId);
   
End-Function;

Function DeleteAllCustomizations(&szModelName As string)
   
   Local string &szSqlViewOpt = "DELETE FROM PSPGVIEWOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlGridOpt = "DELETE FROM PSPGGRIDOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartOpt = "DELETE FROM PSPGCHARTOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartFlrsOpt = "DELETE FROM PSPGCHRTFLRSOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartFlrsOptLang = "DELETE FROM PSPGCHTFLRSLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlPrompt = "DELETE FROM PSPGQRYPROMPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlViewOptLang = "DELETE FROM PSPGVIEWOPTLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartOptLang = "DELETE FROM PSPGCHARTOPTLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlPromptLang = "DELETE FROM PSPGQRYPROMPLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlAxis = "DELETE FROM PSPGAXIS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   
   &viewName = &szModelName | ".View";
   
   SQLExec(&szSqlViewOpt, &szModelName, &viewName);
   SQLExec(&szSqlGridOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartFlrsOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartFlrsOptLang, &szModelName, &viewName);
   SQLExec(&szSqlPrompt, &szModelName, &viewName);
   SQLExec(&szSqlViewOptLang, &szModelName, &viewName);
   SQLExec(&szSqlChartOptLang, &szModelName, &viewName);
   SQLExec(&szSqlPromptLang, &szModelName, &viewName);
   SQLExec(&szSqlAxis, &szModelName, &viewName);
   DeleteAllUserCustomizations(&szModelName);
End-Function;

Function DeleteAllUserCustomizationsView(&szModelName As string, &viewName As string)
   
   Local string &szSqlViewOpt = "DELETE FROM PSPGVIEWOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlGridOpt = "DELETE FROM PSPGGRIDOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartOpt = "DELETE FROM PSPGCHARTOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartFlrsOpt = "DELETE FROM PSPGCHRTFLRSOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartFlrsOptLang = "DELETE FROM PSPGCHTFLRSLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPrompt = "DELETE FROM PSPGQRYPROMPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlViewOptLang = "DELETE FROM PSPGVIEWOPTLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartOptLang = "DELETE FROM PSPGCHARTOPTLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPromptLang = "DELETE FROM PSPGQRYPROMPLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlPromptPer = "DELETE FROM PSPGQRYPRMPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlChartPer = "DELETE FROM PSPGCHARTOPTPER WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlAxisPer = "DELETE FROM PSPGAXISPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   Local string &szSqlViewOptPer = "DELETE FROM PSPGVIEWOPTPERS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME=:2 AND USERID<>:3";
   &userId = "-";
   
   SQLExec(&szSqlViewOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlGridOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOpt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartFlrsOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPrompt, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartOptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptLang, &szModelName, &viewName, &userId);
   SQLExec(&szSqlPromptPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlChartPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlAxisPer, &szModelName, &viewName, &userId);
   SQLExec(&szSqlViewOptPer, &szModelName, &viewName, &userId);
   
End-Function;

Function DeleteAllCustomizationsView(&szModelName As string, &viewName As string)
   
   Local string &szSqlViewOpt = "DELETE FROM PSPGVIEWOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlGridOpt = "DELETE FROM PSPGGRIDOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartOpt = "DELETE FROM PSPGCHARTOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartFlrsOpt = "DELETE FROM PSPGCHRTFLRSOPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartFlrsOptLang = "DELETE FROM PSPGCHTFLRSLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlPrompt = "DELETE FROM PSPGQRYPROMPT WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlViewOptLang = "DELETE FROM PSPGVIEWOPTLANG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlChartOptLang = "DELETE FROM PSPGCHARTOPTLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlPromptLang = "DELETE FROM PSPGQRYPROMPLNG WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   Local string &szSqlAxisLang = "DELETE FROM PSPGAXIS WHERE PTPG_PGRIDNAME=:1 AND PTPG_VIEWNAME<>:2";
   SQLExec(&szSqlViewOpt, &szModelName, &viewName);
   SQLExec(&szSqlGridOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartFlrsOpt, &szModelName, &viewName);
   SQLExec(&szSqlChartFlrsOptLang, &szModelName, &viewName);
   SQLExec(&szSqlPrompt, &szModelName, &viewName);
   SQLExec(&szSqlViewOptLang, &szModelName, &viewName);
   SQLExec(&szSqlChartOptLang, &szModelName, &viewName);
   SQLExec(&szSqlPromptLang, &szModelName, &viewName);
   SQLExec(&szSqlAxisLang, &szModelName, &viewName);
   DeleteAllUserCustomizations(&szModelName);
End-Function;

/*RMS 106I1*/

Function PopulatePromptValues Returns string
   &promptHTMLstring = "";
   &arrIndex = 0;
   If &compPGInfoObj.arrDSPrompts <> Null Then
      /* For normal pivot grid viewer two prompts per row are shown. For narrow
   viewer, only one prompt per row is shown. Hence for normal viewer create the
   prompt values array first */
      If %Page = "PTPG_PGVIEWER" Then
         Local array of string &promptValArray = CreateArrayRept("", 0);
         &val = "";
         While &compPGInfoObj.arrDSPrompts.Next(&arrIndex)
            
            If &compPGInfoObj.arrDSPrompts [&arrIndex].szDisplayValue = "Y" Then
               If &arrIndex = 1 Then
                  &val = &compPGInfoObj.arrDSPrompts [&arrIndex].szDSPromptName | "(" | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSActPromptValue | "),&nbsp;";
               Else
                  Local number &nTemp = Mod(&arrIndex, 2);
                  If &nTemp = 0 Then
                     &val = &val | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSPromptName | "(" | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSActPromptValue | ")";
                     &promptValArray.Push(&val);
                     &val = "";
                  Else
                     &val = &val | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSPromptName | "(" | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSActPromptValue | "),&nbsp;";
                  End-If;
               End-If;
            End-If;
            If &arrIndex = &compPGInfoObj.arrDSPrompts.Len Then
               If &nTemp = 1 Then
                  &promptValArray.Push(&val);
               End-If;
            End-If;
         End-While;
         &promptValArrayIndex = 0;
         If &promptValArray.Len > 0 Then
            &promptHTMLstring = "<div id=""%FormnamedivPSPGQRYPROMPTVALDIV""><label style='font:bold 10px Arial; border-style: none; color: #515151;' whitespace='preserve' >Current&nbsp;Selectionsct p</label>";
         End-If;
         While &promptValArray.Next(&promptValArrayIndex)
            &promptHTMLstring = &promptHTMLstring | "</br><label id='PSPGQRYPROMPTVALLBL" | String(&promptValArrayIndex) | "'" | "style='font:normal 10px Arial; border-style: none; color: #515151;' whitespace='preserve' >" | &promptValArray [&promptValArrayIndex] | "</label>";
         End-While;
         
         If &promptValArray.Len > 0 Then
            &promptHTMLstring = &promptHTMLstring | "</br><label id='PSPGQRYPROMPTVALLBLEBD' style='font:normal 10px Arial; border-style: none; color: #515151;' whitespace='preserve'>&nbsp;</label></div>";
         End-If;
      End-If;
   Else
      While &compPGInfoObj.arrDSPrompts.Next(&arrIndex)
         &val = "";
         If &compPGInfoObj.arrDSPrompts [&arrIndex].szDisplayValue = "Y" Then
            If &promptHTMLstring = "" Then
               &promptHTMLstring = "<div id=""%FormnamedivPSPGQRYPROMPTVALDIV""><label class=""PSEDITBOXLABEL"">Prompt&nbsp;Values</label>";
            End-If;
            If &arrIndex = 1 Then
               &promptHTMLstring = &promptHTMLstring | "<label id='PSPGQRYPROMPTVALLBL" | String(&arrIndex) | "'" | "class='PSEDITBOX_DISPONLY' >" | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSActPromptValue | "</label>";
            Else
               &promptHTMLstring = &promptHTMLstring | "</br><label id='PSPGQRYPROMPTVALLBL" | String(&arrIndex) | "'" | "class='PSEDITBOX_DISPONLY' >" | &compPGInfoObj.arrDSPrompts [&arrIndex].szDSActPromptValue | "</label>";
            End-If;
         End-If;
         If &promptHTMLstring <> "" Then
            &promptHTMLstring = &promptHTMLstring | "</br></div></br>";
         End-If;
      End-While;
   End-If;
   Return &promptHTMLstring;
End-Function;

Function PopulateDrillHTML
   If &compPGInfoObj.nDisplayType <> 1 Then
      Return;
   End-If;
   Local array of string &arrCurrCtlFlds = CreateArrayRept("", 0);
   &arrIndex = 0;
   While &compPGInfoObj.arrFacts.Next(&arrIndex)
      If &compPGInfoObj.arrFacts [&arrIndex].szCurrCtlFld <> "" Then
         &arrCurrCtlFlds.Push(&compPGInfoObj.arrFacts [&arrIndex].szCurrCtlFld);
      End-If;
   End-While;
   
   &arrIndex = 0;
   While &compPGInfoObj.arrDimensions.Next(&arrIndex)
      &arrIndex1 = 0;
      If &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName <> &compPGInfoObj.szPGChartXAxis And
            &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName <> &compPGInfoObj.szPGChartSeries Then
         Local number &nCurrFound = &arrCurrCtlFlds.Find(&compPGInfoObj.arrDimensions [&arrIndex].szDimensionUniqueId);
         
         Local boolean &bSlicerFound = False;
         If &compPGInfoObj.arrSlicers <> Null Then
            While &compPGInfoObj.arrSlicers.Next(&arrIndex1)
               If &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName = &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerName Then
                  &bSlicerFound = True;
               End-If;
            End-While;
         End-If;
         If &bSlicerFound = False Then
            &bOneValAdded = True;
            If &compPGInfoObj.szPGChartSeries = "" Then
               If &compPGInfoObj.nChartType = %ChartType_2DScatter Or
                     &compPGInfoObj.nChartType = %ChartType_2DBubble Then
                  If Find(MsgGetText(268, 38, "Number"), &compPGInfoObj.arrDimensions [&arrIndex].dataType) = 0 Then
                     Continue;
                  End-If;
               End-If;
            End-If;
            If &strTemp = "" Then
               &strTemp = &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName;
            Else
               &strTemp = &strTemp | "," | &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName;
            End-If;
         End-If;
      End-If;
   End-While;
   &findIndex = Find("'", &strTemp);
   If &findIndex <> 0 Then
      &strTemp = Substitute(&strTemp, "'", "\'");
   End-If;
   
   PTPG_WORKREC1.PTPG_CHART_DRILL.Value = GetHTMLText(HTML.PTPG_CHART_DRILLHTM, &strTemp);
End-Function;

Function ViewerPageActivate
   &nFieldChangeTriggred = 0;
   &bReload = False;
   &bGridLayoutSet = False;
   &bIpadClient = False;
   &nGridType = 0;
   Local string &str = %Request.FullURI;
   /*PB107 Change - 17 start*/
   If DBPatternMatch(%Request.GetHeader("User-Agent"), "%iPad%", False) Then
      &bIpadClient = True;
   End-If;
   If &compPGInfoObj = Null Then
      &compPGInfoObj = create PT_PGPACKAGE:PT_PGInformation();
   End-If;
   
   &bGenerateChartViewer = False;
   
   If (&compArrPGChartStateViewer <> Null) Then
      While &compArrPGChartStateViewer.Len > 0
         &compArrPGChartStateViewer.Pop();
      End-While;
   End-If;
   PTPG_WORKREC1.PTPG_CHTDRILL_SE1.Value = ">";
   PTPG_WORKREC1.PTPG_CHTDRILL_SE2.Value = ">";
   PTPG_WORKREC1.PTPG_CHTDRILL_SE3.Value = ">";
   PTPG_WORKREC1.PTPG_CHT_DRILLDN1.Visible = False;
   PTPG_WORKREC1.PTPG_CHT_DRILLDN2.Visible = False;
   PTPG_WORKREC1.PTPG_CHT_DRILLDN3.Visible = False;
   PTPG_WORKREC1.PTPG_CHT_DRILLDN4.Visible = False;
   PTPG_WORKREC1.PTPG_CHTDRILL_SE1.Visible = False;
   PTPG_WORKREC1.PTPG_CHTDRILL_SE2.Visible = False;
   PTPG_WORKREC1.PTPG_CHTDRILL_SE3.Visible = False;
   &compPGInfoObj.szPGName = PTPG_VWR_WRK.PTPG_PGRIDNAME.Value;
   &compPGInfoObj.szPGView = PTPG_VWR_WRK.PTPG_VIEWNAME.Value;
   Local string &sDsType;
   If Not isAllowedOutsideContext(&compPGInfoObj.szPGName) Then
      Error (MsgGetText(40, 20, ""));
   End-If;
   
   SQLExec("SELECT PTPG_DSTYPE FROM PSPGCORE WHERE PTPG_PGRIDNAME=:1", &compPGInfoObj.szPGName, &sDsType);
   
   If &sDsType = "PSCOMPQUERY" Then
      PTPG_VWR_WRK.PTPG_DSTYPE.Value = 2;
   Else
      PTPG_VWR_WRK.PTPG_DSTYPE.Value = 1;
   End-If;
   
   &compPGInfoObj.nDSType = PTPG_VWR_WRK.PTPG_DSTYPE.Value;
   &compPGInfoObj.szDSName = PTPG_VWR_WRK.PTPG_DSNAME.Value;
   
   Local boolean &bAdmin = IsUserInRole("PivotGridAdmin");
   Local boolean &bSuperUser = IsUserInRole("PivotGridSuperUser");
   
   SQLExec("SELECT USERID, PTPG_PGRIDTYPE FROM PSPGCORE WHERE PTPG_PGRIDNAME=:1", PTPG_VWR_WRK.PTPG_PGRIDNAME.Value, &pvgUserId, &gridType);
   
   If (&bAdmin = False And
         &bSuperUser = False) Then
      If &gridType = "PVT" And
            (&pvgUserId <> %UserId) Then
         Error MsgGet(268, 150, "You are not authorized to view the component.");
      End-If;
   End-If;
   If (&bAdmin = False And
         &bSuperUser = True) Then
      If &gridType = "PVT" And
            (&pvgUserId <> %UserId) Then
         Error MsgGet(268, 150, "You are not authorized to view the component.");
      End-If;
   End-If;
   
   Local number &nRetDB = &compPGInfoObj.InitializeFromDB();
   If &nRetDB <> 0 Then
      Error MsgGet(268, 126, "Unable to load the pivot grid.");
   End-If;
   If &arrOptPrompts = Null Then
      &arrOptPrompts = CreateArrayRept("", 0);
   End-If;
   If &compPGInfoObj.arrDSPrompts = Null Then
      PTPG_WORKREC1.PTPG_USERDSPROMPT.Visible = False;
   Else
      If &compPGInfoObj.arrDSPrompts.Len = 0 Then
         PTPG_WORKREC1.PTPG_USERDSPROMPT.Visible = False;
      Else
         If &compPGInfoObj.nDSType = 2 Then
            &QueryObj = OpenCompositeQueryObj(&compPGInfoObj.szDSName, "N");
            &QryPrompts = &QueryObj.Prompts;
         Else
            &QueryObj = OpenQueryObj(&compPGInfoObj.szDSName, "N");
            &QryPrompts = &QueryObj.runtimeprompts;
         End-If;
         &nCount_prompt = &QryPrompts.Count;
         For &r = 1 To &nCount_prompt
            &arrIndex1 = 0;
            While &compPGInfoObj.arrDSPrompts.Next(&arrIndex1)
               If &compPGInfoObj.arrDSPrompts [&arrIndex1].szDSPromptUniqueId = &QryPrompts.item(&r).UniquePromptName Then
                  If &QryPrompts.item(&r).ReqPrompt = False Then
                     &arrOptPrompts.Push(&QryPrompts.item(&r).UniquePromptName);
                  End-If;
                  
                  If &QryPrompts.item(&r).DefaultValue <> "" Then
                     &arrOptPrompts.Push(&QryPrompts.item(&r).UniquePromptName);
                  End-If;
               End-If;
            End-While;
         End-For;
         PTPG_WORKREC1.PTPG_USERDSPROMPT.Visible = True;
         &QueryObj.Close();
      End-If;
   End-If;
   
   Evaluate &compPGInfoObj.nChartType
   When 6
      PTPG_WORKREC1.PTPVG_BARCHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_LINECHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_PIECHART.Enabled = False;
      Break;
   When 0
      PTPG_WORKREC1.PTPVG_BARCHART.Enabled = False;
      PTPG_WORKREC1.PTPVG_LINECHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_PIECHART.Enabled = True;
      Break;
   When 4
      PTPG_WORKREC1.PTPVG_BARCHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_LINECHART.Enabled = False;
      PTPG_WORKREC1.PTPVG_PIECHART.Enabled = True;
      Break;
      
   When-Other
      PTPG_WORKREC1.PTPVG_BARCHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_LINECHART.Enabled = True;
      PTPG_WORKREC1.PTPVG_PIECHART.Enabled = True;
      Break;
   End-Evaluate;
   
   If (&compPGInfoObj.nDisplayType = 1) Then
      PTPG_WORKREC1.PTPG_DISPCHART.Visible = False;
   End-If;
   
   If (&compPGInfoObj.nDisplayType = 2) Then
      PTPG_WORKREC1.PTPG_DISPCHART.Visible = True;
      PTPG_WORKREC1.PTPG_DISPCHART.Value = "N";
   End-If;
   
   If (&compPGInfoObj.nDisplayType = 3) Then
      PTPG_WORKREC1.PTPG_DISPCHART.Visible = True;
      PTPG_WORKREC1.PTPG_DISPCHART.Value = "Y";
   End-If;
   
   If (&compPGInfoObj.nDisplayType = 1) Then
      &nFilterNo = 0;
      &bResetPrimaryFilter = False;
      PTPG_WORKREC1.PTPG_GRPBOXDISP1.Visible = False;
      PTPG_WORKREC1.PTPG_GRPBOXDISP.Visible = True;
      PTPG_WORKREC.PTPG_CHART_OPT.Visible = True;
      PTPG_WORKREC.PTPG_CHART_DATVW.Visible = True;
      /* Rahul PB 107 */
      &arrIndex = 0;
      If &compPGInfoObj.arrSlicers <> Null Then
         If &compPGInfoObj.szPrimaryFilter <> "" Then
            &compPGInfoObj.bFirstTime = True;
         End-If;
         Local number &nRet = &compPGInfoObj.GetAllDimensionValues(&nFilterNo);
         If &nRet <> 0 Then
            Error MsgGet(268, 126, "Unable to load the pivot grid.");
         End-If;
         While (&compPGInfoObj.arrSlicers.Next(&arrIndex))
            Local number &arrIndexFilter = 0;
            While &compPGInfoObj.arrSlicers [&arrIndex].szSlicerValue.Next(&arrIndexFilter)
               Local number &valIndex = &compPGInfoObj.arrSlicers [&arrIndex].arrSlicerValues.Find(&compPGInfoObj.arrSlicers [&arrIndex].szSlicerValue [&arrIndexFilter]);
               If &valIndex = 0 Then
                  Error MsgGet(268, 109, "Invalid Filter Value specified.");
               End-If;
            End-While;
            AddChartFilter(&arrIndex);
            &compPGInfoObj.arrSlicers [&arrIndex].szSlicerName = &compPGInfoObj.GetAlias(&compPGInfoObj.szPGName, &compPGInfoObj.arrSlicers [&arrIndex].szSlicerUniqueId);
            SetHTMLText(&arrIndex, &compPGInfoObj.arrSlicers [&arrIndex].szSlicerUniqueId, &compPGInfoObj.arrSlicers [&arrIndex].szSlicerName, &compPGInfoObj.arrSlicers [&arrIndex].szSlicerValue, &compPGInfoObj.arrSlicers [&arrIndex].arrSlicerValues, &compPGInfoObj.arrSlicers [&arrIndex].arrSlicerTreeVals);
         End-While;
         
         If &compPGInfoObj.szPrimaryFilter <> "" Then
            &compPGInfoObj.bFirstTime = False;
         End-If;
      Else
         PTPG_MENU_WRK.PTPG_GROUP_BOX1.Visible = False;
      End-If;
      Local string &szXAxisUniqueName, &seriesUniqueName, &yAxisUniqueName;
      
      &arrIndex = 0;
      While &compPGInfoObj.arrFacts.Next(&arrIndex)
         If &compPGInfoObj.arrFacts [&arrIndex].szFactName = &compPGInfoObj.szPGChartYAxis Then
            &yAxisUniqueName = &compPGInfoObj.arrFacts [&arrIndex].szFactUniqueId;
         End-If;
      End-While;
      
      Local array of string &szYAxisUniqueNameArr = CreateArrayRept("", 0);
      Local boolean &bMultipleYAxis = False;
      &arrIndex = 0;
      Local string &szDualYAxisTitle;
      
      If &compPGInfoObj.szPGChartYAxisArr = Null Or
            &compPGInfoObj.szPGChartYAxisArr.Len = 0 Then
         While &compPGInfoObj.arrFacts.Next(&arrIndex)
            If &compPGInfoObj.arrFacts [&arrIndex].szFactName = &compPGInfoObj.szPGChartYAxis Then
               &szYAxisUniqueName = &compPGInfoObj.arrFacts [&arrIndex].szFactUniqueId;
            End-If;
         End-While;
      Else
         &bMultipleYAxis = True;
         
         While &compPGInfoObj.arrFacts.Next(&arrIndex)
            If &compPGInfoObj.szPGChartYAxisArr.Find(&compPGInfoObj.arrFacts [&arrIndex].szFactName) <> 0 Then
               &szYAxisUniqueNameArr.Push(&compPGInfoObj.arrFacts [&arrIndex].szFactUniqueId);
            End-If;
            
            If &compPGInfoObj.arrFacts [&arrIndex].szFactUniqueId = &compPGInfoObj.szPGChartDualYAxis Then
               &szDualYAxisTitle = &compPGInfoObj.arrFacts [&arrIndex].szFactName;
            End-If;
            
         End-While;
      End-If;
      &blankText = MsgGetText(268, 124, "(Blanks)");
      &arrIndex = 0;
      While &compPGInfoObj.arrDimensions.Next(&arrIndex)
         If &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName = &compPGInfoObj.szPGChartXAxis Then
            &szXAxisUniqueName = &compPGInfoObj.arrDimensions [&arrIndex].szDimensionUniqueId;
         End-If;
         
         If &compPGInfoObj.arrDimensions [&arrIndex].szDimensionName = &compPGInfoObj.szPGChartSeries Then
            &szSeriesUniqueName = &compPGInfoObj.arrDimensions [&arrIndex].szDimensionUniqueId;
         End-If;
      End-While;
      
      PopulateDrillHTML();
      &arrIndex1 = 0;
      &strTemp = "";
      If &compPGInfoObj.arrSlicers <> Null Then
         While &compPGInfoObj.arrSlicers.Next(&arrIndex1)
            If &strTemp = "" Then
               &strTemp = &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerUniqueId | "=";
            Else
               &strTemp = &strTemp | ";" | &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerUniqueId | "=";
            End-If;
            &arrIndexSlicer = 0;
            &bAddFilValue = True;
            If &compPGInfoObj.arrSlicers [&arrIndex1].arrSlicerValues.Len = 2 Then
               &arrDimIndex = 0;
               While &compPGInfoObj.arrDimensions.Next(&arrDimIndex)
                  If &compPGInfoObj.arrDimensions [&arrDimIndex].szDimensionUniqueId = &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerUniqueId Then
                     If &compPGInfoObj.arrDimensions [&arrDimIndex].szTotalName <> "" Then
                        &strTemp = &strTemp | &compPGInfoObj.arrSlicers [&arrIndex1].arrSlicerValues [2];
                        &bAddFilValue = False;
                     End-If;
                  End-If;
               End-While;
            End-If;
            If &bAddFilValue = True Then
               While &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerValue.Next(&arrIndexSlicer)
                  If &arrIndexSlicer <> 1 Then
                     &strTemp = &strTemp | ",";
                  End-If;
                  If &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerValue [&arrIndexSlicer] = &blankText Then
                     &strTemp = &strTemp | " ";
                  Else
                     &strTemp = &strTemp | &compPGInfoObj.arrSlicers [&arrIndex1].szSlicerValue [&arrIndexSlicer];
                  End-If;
               End-While;
            End-If;
         End-While;
      End-If;
      &arrIndex1 = 0;
      If &compPGInfoObj.arrDSPrompts <> Null Then
         While &compPGInfoObj.arrDSPrompts.Next(&arrIndex1)
            If &strTemp = "" Then
               &strTemp = &compPGInfoObj.arrDSPrompts [&arrIndex1].szDSPromptUniqueId | "=";
            Else
               &strTemp = &strTemp | ";" | &compPGInfoObj.arrDSPrompts [&arrIndex1].szDSPromptUniqueId | "=";
            End-If;
            &strTemp = &strTemp | EscapeHTML(&compPGInfoObj.arrDSPrompts [&arrIndex1].szDSActPromptValue);
         End-While;
      End-If;
      
      &findIndex = Find("'", &strTemp);
      &strTemp1 = &strTemp;
      If &findIndex <> 0 Then
         &strTemp1 = Substitute(&strTemp, "'", "\'");
      End-If;
      
      PTPG_WORKREC1.PTPG_CHRT_ACTFIL.Value = GetHTMLText(HTML.PTPG_CHART_FILHTM, &strTemp1);
      /* End */
      Local number &nRet1 = &compPGInfoObj.ExecuteChart();
      If &nRet1 <> 0 Then
         Error MsgGet(268, 126, "Unable to load the pivot grid.");
      End-If;
      Local Chart &PGChart = GetChart(PTPG_WORKREC.PTPG_CHART_FIELD);
      Local array of string &szLegend1;
      &PGChart.Reset();
      If &compPGInfoObj.szPGChartOverlay = "" Then /*Non-overlay legends are handled below*/
         If &compPGInfoObj.nLegend <> - 1 Then
            If &compPGInfoObj.nChartType = 6 Or
                  &compPGInfoObj.nChartType = 9 Or
                  &compPGInfoObj.szPGChartSeries <> "" Or
                  &compPGInfoObj.szPGChartYAxisArr <> Null Then
               &PGChart.HasLegend = True;
               &PGChart.LegendPosition = &compPGInfoObj.nLegend;
            End-If;
         Else
            &PGChart.HasLegend = False;
         End-If;
      End-If;
      
      
      /*PB107 start*/
      If &compPGInfoObj.nYPrecision = 0 Then
         &PGChart.IsYAxisInteger = True;
      Else
         &PGChart.YAxisPrecision = &compPGInfoObj.nYPrecision;
      End-If;
      /*PB107 end*/
      Local boolean &bShowPercent = False;
      Local number &arrIndexCht = 0;
      While &compPGInfoObj.arrFacts.Next(&arrIndexCht)
         
         If &compPGInfoObj.arrFacts [&arrIndexCht].szFactName = &compPGInfoObj.szPGChartYAxis Then
            If &compPGInfoObj.arrFacts [&arrIndexCht].nCalcFormula <> 0 Then
               &bShowPercent = True;
            End-If;
         End-If;
      End-While;
      &PGChart.IsDrillable = True;
      &PGChart.Type = &compPGInfoObj.nChartType;
      
      Local number &nColorCnt = 1;
      
      Local number &indexDualY = 0;
      Local number &nIndexArr1 = 0;
      If &compPGInfoObj.szPGChartDualYAxis <> "" Then
         While &szYAxisUniqueNameArr.Next(&indexArr1)
            
            If &szYAxisUniqueNameArr [&indexArr1] = &compPGInfoObj.szPGChartDualYAxis Then
               &indexDualY = &indexArr1 - 1;
            End-If;
            
         End-While;
      End-If;
      
      Local array of string &szXAxisLabels = CreateArrayRept("", 0);
      Local array of string &szActXAxisVals = CreateArrayRept("", 0);
      Local Rowset &rsPGChart = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_CHART_DVW);
      &rsPGChart.Flush();
      If &compPGInfoObj.rsChart.ActiveRowCount > 0 Then
         For &i = 1 To &compPGInfoObj.rsChart.ActiveRowCount
            &szDataHint = &compPGInfoObj.szPGChartXAxis | ": ";
            If (&i <> 1) Then
               &rsPGChart.InsertRow(&rsPGChart.ActiveRowCount);
            End-If;
            &dType = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Type;
            If &dType = "CHAR" Or
                  &dType = "LONGCHAR" Then
               If &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value = "" Or
                     &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value = " " Then
                  &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value = &blankText;
                  If Len(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value) < Len(&blankText) Then
                     &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value = " ";
                  End-If;
               End-If;
            End-If;
            &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value;
            &szPrevVal = &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value;
            &szDataHint = &szDataHint | &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value | ", ";
            
            If &compPGInfoObj.szPGChartSeries <> "" Then
               &dType = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Type;
               If &dType = "CHAR" Or
                     &dType = "LONGCHAR" Then
                  If &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value = " " Or
                        &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value = "" Then
                     &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value = &blankText;
                     If Len(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value) < Len(&blankText) Then
                        &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value = " ";
                     End-If;
                  End-If;
               End-If;
               &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTSERIES.Value = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value;
               &nNo = Find("^", &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(3).Value);
               
               If &nNo <> 0 Then
                  &arr1 = Split(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(3).Value, "^");
                  &tempY = LTrim(&arr1 [2], "%");
                  &tempY = RTrim(&arr1 [2], "%");
                  If &bShowPercent = True Then
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &tempY;
                  Else
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &arr1 [1];
                  End-If;
               Else
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(3).Value;
               End-If;
               
               If &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value <> &szPrevVal Then
                  &szPrevVal = &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value;
                  If Len(&szPrevVal) > 19 Then
                     &szActXVal = Left(&szPrevVal, 16) | "...";
                  Else
                     &szActXVal = &szPrevVal;
                  End-If;
                  &szXAxisLabels.Push(&szActXVal);
                  &szActXAxisVals.Push(&szPrevVal);
                  &nColorCnt = 1;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_COLOR1.Value = &nColorCnt;
               Else
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_COLOR1.Value = &nColorCnt;
               End-If;
               &szDataHint = &szDataHint | &compPGInfoObj.szPGChartSeries | ": " | &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value | ", ";
               If &nNo <> 0 Then
                  &szDataHint = &szDataHint | &compPGInfoObj.szPGChartYaxislabel | ": " | &arr1 [2];
               Else
                  &szDataHint = &szDataHint | &compPGInfoObj.szPGChartYaxislabel | ": " | &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(3).Value;
               End-If;
            Else
               If &bMultipleYAxis = False Then
                  &nNo = Find("^", &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value);
                  If &nNo <> 0 Then
                     &arr1 = Split(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value, "^");
                     &tempY = LTrim(&arr1 [2], "%");
                     &tempY = RTrim(&arr1 [2], "%");
                     If &bShowPercent = True Then
                        &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &tempY;
                     Else
                        &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &arr1 [1];
                     End-If;
                  Else
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value;
                  End-If;
                  If &nNo <> 0 Then
                     &szDataHint = &szDataHint | &compPGInfoObj.szPGChartYaxislabel | ": " | &arr1 [2];
                  Else
                     &szDataHint = &szDataHint | &compPGInfoObj.szPGChartYaxislabel | ": " | &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(2).Value;
                  End-If;
                  If (&nColorCnt > 17) Then
                     &nColorCnt = 1;
                  End-If;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_COLOR1.Value = &nColorCnt;
               Else
                  Local number &indexArr = 0;
                  Local number &rsIndex = 2;
                  Local number &fldIndex = 0;
                  Local string &szDataHint1;
                  While &szYAxisUniqueNameArr.Next(&indexArr)
                     &szDataHint1 = "";
                     Local string &fldName = "FIELD.PTPG_CHARTYAXIS";
                     If &fldIndex <> 0 Then
                        &fldName = &fldName | String(&fldIndex);
                     End-If;
                     Local Record &recTemp = &rsPGChart.GetRow(&i).PTPG_CHART_DVW;
                     Local Field &fldChart = &recTemp.GetField(@&fldName);
                     &nNo = Find("^", &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(&rsIndex).Value);
                     If &nNo <> 0 Then
                        &arr1 = Split(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(&rsIndex).Value, "^");
                        &tempY = LTrim(&arr1 [2], "%");
                        &tempY = RTrim(&arr1 [2], "%");
                        Local boolean &bShowPercentTemp = False;
                        &arrIndexCht = 0;
                        While &compPGInfoObj.arrFacts.Next(&arrIndexCht)
                           
                           If &compPGInfoObj.arrFacts [&arrIndexCht].szFactName = &compPGInfoObj.szPGChartYAxisArr [&indexArr] Then
                              If &compPGInfoObj.arrFacts [&arrIndexCht].nCalcFormula <> 0 Then
                                 &bShowPercentTemp = True;
                              End-If;
                           End-If;
                        End-While;
                        If &bShowPercentTemp = True Then
                           &fldChart.Value = &tempY;
                        Else
                           &fldChart.Value = &arr1 [1];
                        End-If;
                     Else
                        
                        &fldChart.Value = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(&rsIndex).Value;
                     End-If;
                     
                     Local string &fldLegend = "FIELD.PT_PGCHARTLEGEND";
                     If &fldIndex <> 0 Then
                        &fldLegend = &fldLegend | String(&fldIndex);
                     End-If;
                     Local Record &recTempLegend = &rsPGChart.GetRow(&i).PTPG_CHART_DVW;
                     Local Field &fldChartLegend = &recTempLegend.GetField(@&fldLegend);
                     
                     If &nNo <> 0 Then
                        &szDataHint1 = &szDataHint | &compPGInfoObj.szPGChartYAxisArr [&indexArr] | ": " | &arr1 [2];
                     Else
                        &szDataHint1 = &szDataHint | &compPGInfoObj.szPGChartYAxisArr [&indexArr] | ": " | &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(&rsIndex).Value;
                     End-If;
                     
                     &fldChartLegend.Value = &szDataHint1;
                     
                     &fldIndex = &fldIndex + 1;
                     &rsIndex = &rsIndex + 1;
                  End-While;
               End-If;
            End-If;
            If (&nColorCnt > 17) Then
               &nColorCnt = 1;
            End-If;
            
            &pageName = %Page;
            
            &findIndex = Find("'", &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value);
            &strTemp1 = EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value);
            If &findIndex <> 0 Then
               &strTemp1 = EncodeURL(Substitute(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTXAXIS.Value, "'", "\'"));
            End-If;
            
            &szUrl = "javascript:showChartContextMenu('" | &compPGInfoObj.szPGName | "','" | &pageName | "','" | &szXAxisUniqueName | "=" | &strTemp1 | "','";
            &findindex2 = Find("%5c%27", &strTemp1);
            If &findindex2 <> 0 Then
               &strTemp1 = Substitute(&strTemp1, "%5c%27", "*");
            End-If;
            
            If &bMultipleYAxis = False Then
               If &compPGInfoObj.szPGChartSeries <> "" Then
                  &szUrl = &szUrl | &szSeriesUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTSERIES.Value) | "','" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value) | "',0)";
                  
                  If &pageName = "PTPG_PGVIEWERMINI" And
                        &compPGInfoObj.nChartWidth < 300 Then
                     &szUrl = EncodeURL(&szXAxisUniqueName | "=" | &strTemp1 | ";" | &szSeriesUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTSERIES.Value) | "@" | &pageName);
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_URL.Value = "javascript:onChartDetailedView('" | &szUrl | "')";
                  Else
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_URL.Value = (&szUrl);
                  End-If;
               Else
                  &szUrl = &szUrl | "','" | &yAxisUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value) | "',0)";
                  If &pageName = "PTPG_PGVIEWERMINI" And
                        &compPGInfoObj.nChartWidth < 300 Then
                     &szUrl = &szXAxisUniqueName | "=" | &strTemp1 | "@" | &pageName;
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_URL.Value = "javascript:onChartDetailedView('" | &szUrl | "')";
                  Else
                     &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHART_URL.Value = (&szUrl);
                  End-If;
               End-If;
            Else
               &indexArr = 0;
               
               &fldIndex = 0;
               While &szYAxisUniqueNameArr.Next(&indexArr)
                  &fldName = "FIELD.PTPG_CHART_URL";
                  &szUrl = "javascript:showChartContextMenu('" | &compPGInfoObj.szPGName | "','" | &pageName | "','" | &szXAxisUniqueName | "=" | &strTemp1 | "','";
                  &findindex2 = Find("%5c%27", &strTemp1);
                  If &findindex2 <> 0 Then
                     &strTemp1 = Substitute(&strTemp1, "%5c%27", "*");
                  End-If;
                  If &fldIndex <> 0 Then
                     &fldName = &fldName | String(&fldIndex);
                  End-If;
                  &recTemp = &rsPGChart.GetRow(&i).PTPG_CHART_DVW;
                  &fldChart = &recTemp.GetField(@&fldName);
                  If &compPGInfoObj.szPGChartSeries <> "" Then
                     &szUrl = &szUrl | &szSeriesUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTSERIES.Value) | "','" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value) | "',0)";
                     If &pageName = "PTPG_PGVIEWERMINI" And
                           &compPGInfoObj.nChartWidth < 300 Then
                        &szUrl = (&szXAxisUniqueName | "=" | &strTemp1 | ";" | &szSeriesUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTSERIES.Value) | "@" | &pageName);
                        &fldChart.Value = "javascript:onChartDetailedView('" | &szUrl | "')";
                     Else
                        &fldChart.Value = (&szUrl);
                     End-If;
                  Else
                     &szUrl = &szUrl | "','" | &yAxisUniqueName | "=" | EncodeURL(&rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTYAXIS.Value) | "',0)";
                     If &pageName = "PTPG_PGVIEWERMINI" And
                           &compPGInfoObj.nChartWidth < 300 Then
                        &szUrl = (&szXAxisUniqueName | "=" | &strTemp1 | "@" | &pageName);
                        &fldChart.Value = "javascript:onChartDetailedView('" | &szUrl | "')";
                     Else
                        &fldChart.Value = (&szUrl);
                     End-If;
                  End-If;
                  &fldIndex = &fldIndex + 1;
               End-While;
            End-If;
            &nColorCnt = &nColorCnt + 1;
            If &compPGInfoObj.szPGChartSeries = "" Then
               
               &szXVal = &compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value;
               If &szXVal = "" Then
                  &szXVal = &blankText;
               End-If;
               If Len(&szXVal) > 19 Then
                  &szXVal = Left(&szXVal, 16) | "...";
               End-If;
               &szXAxisLabels.Push(&szXVal);
               &szActXAxisVals.Push(&compPGInfoObj.rsChart.GetRow(&i).GetRecord(1).GetField(1).Value);
            End-If;
            If &bMultipleYAxis = False Then
               &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PT_PGCHARTLEGEND.Value = &szDataHint;
            End-If;
         End-For;
      End-If;
      
      /*PB107 start*/
      If &compPGInfoObj.nPieExploded = 1 Then
         Local array of number &ExplodedArray = CreateArray(1);
         For &k = 2 To &rsPGChart.RowCount
            &ExplodedArray.Push(&k);
         End-For;
         &PGChart.SetExplodedSectorsArray(&ExplodedArray);
      End-If;
      /*PB107 end*/
      
      &arrIndex = 0;
      While &compPGInfoObj.arrFacts.Next(&arrIndex)
         If &compPGInfoObj.arrFacts [&arrIndex].szFactUniqueId = &yAxisUniqueName Then
            If &compPGInfoObj.arrFacts [&arrIndex].bIsThrDefined = True Then
               &thrChtCol = getChartColor(&compPGInfoObj.arrFacts [&arrIndex].szThrColor);
               If &compPGInfoObj.arrFacts [&arrIndex].szThrType = "1" Then
                  Local ReferenceLine &refLine = GetReferenceLine();
                  &refLine.ReferenceLineColor = &thrChtCol;
                  &refLine.ReferenceLineValue = Value(&compPGInfoObj.arrFacts [&arrIndex].szThrVal);
                  &refLine.ReferenceLineLocation = 1;
                  &refLine.ShortText = &compPGInfoObj.arrFacts [&arrIndex].szThrDescr;
                  &refLine.Association = %Ref_Association_Y1;
                  Local array of ReferenceLine &refLineArr = CreateArray(&refLine);
                  &PGChart.SetReferenceLine(&refLineArr);
               Else
                  Local ReferenceArea &refArea = GetReferenceArea();
                  &refArea.ReferenceAreaColor = &thrChtCol;
                  Local array of number &arrThrNum = CreateArray(Value(&compPGInfoObj.arrFacts [&arrIndex].szThrLow));
                  &arrThrNum.Push(Value(&compPGInfoObj.arrFacts [&arrIndex].szThrHigh));
                  &refArea.ReferenceAreaValues = &arrThrNum;
                  &refArea.ReferenceAreaLocation = 1;
                  &refArea.ShortText = &compPGInfoObj.arrFacts [&arrIndex].szThrDescr;
                  &refArea.Association = %Ref_Association_Y1;
                  Local array of ReferenceArea &refAreaArr = CreateArray(&refArea);
                  &PGChart.SetReferenceArea(&refAreaArr);
               End-If;
            End-If;
            
         End-If;
      End-While;
      
      &PGChart.SetData(&rsPGChart);
      &PGChart.SetDataXAxis(PTPG_CHART_DVW.PTPG_CHARTXAXIS);
      &PGChart.SetDataSeries(PTPG_CHART_DVW.PTPG_CHARTSERIES);
      
      If &bMultipleYAxis = False Then
         &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL);
         &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS);
         &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND);
      Else
         Local number &nLen = &szYAxisUniqueNameArr.Len;
         Evaluate &nLen
         When 2
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1);
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            Break;
         When 3
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            Break;
         When 4
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
         When 5
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            Break;
         When 6
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4, PTPG_CHART_DVW.PTPG_CHART_URL5);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4, PTPG_CHART_DVW.PTPG_CHARTYAXIS5);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4, PTPG_CHART_DVW.PT_PGCHARTLEGEND5);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 5 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
         When 7
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4, PTPG_CHART_DVW.PTPG_CHART_URL5, PTPG_CHART_DVW.PTPG_CHART_URL6);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4, PTPG_CHART_DVW.PTPG_CHARTYAXIS5, PTPG_CHART_DVW.PTPG_CHARTYAXIS6);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4, PTPG_CHART_DVW.PT_PGCHARTLEGEND5, PTPG_CHART_DVW.PT_PGCHARTLEGEND6);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 5 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 6 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
         When 8
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4, PTPG_CHART_DVW.PTPG_CHART_URL5, PTPG_CHART_DVW.PTPG_CHART_URL6, PTPG_CHART_DVW.PTPG_CHART_URL7);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4, PTPG_CHART_DVW.PTPG_CHARTYAXIS5, PTPG_CHART_DVW.PTPG_CHARTYAXIS6, PTPG_CHART_DVW.PTPG_CHARTYAXIS7);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4, PTPG_CHART_DVW.PT_PGCHARTLEGEND5, PTPG_CHART_DVW.PT_PGCHARTLEGEND6, PTPG_CHART_DVW.PT_PGCHARTLEGEND7);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 5 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 6 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 7 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
         When 9
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4, PTPG_CHART_DVW.PTPG_CHART_URL5, PTPG_CHART_DVW.PTPG_CHART_URL6, PTPG_CHART_DVW.PTPG_CHART_URL7, PTPG_CHART_DVW.PTPG_CHART_URL8);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4, PTPG_CHART_DVW.PTPG_CHARTYAXIS5, PTPG_CHART_DVW.PTPG_CHARTYAXIS6, PTPG_CHART_DVW.PTPG_CHARTYAXIS7, PTPG_CHART_DVW.PTPG_CHARTYAXIS8);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4, PTPG_CHART_DVW.PT_PGCHARTLEGEND5, PTPG_CHART_DVW.PT_PGCHARTLEGEND6, PTPG_CHART_DVW.PT_PGCHARTLEGEND7, PTPG_CHART_DVW.PT_PGCHARTLEGEND8);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 5 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 6 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 7 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 8 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
         When 10
            &PGChart.SetDataURLs(PTPG_CHART_DVW.PTPG_CHART_URL, PTPG_CHART_DVW.PTPG_CHART_URL1, PTPG_CHART_DVW.PTPG_CHART_URL2, PTPG_CHART_DVW.PTPG_CHART_URL3, PTPG_CHART_DVW.PTPG_CHART_URL4, PTPG_CHART_DVW.PTPG_CHART_URL5, PTPG_CHART_DVW.PTPG_CHART_URL6, PTPG_CHART_DVW.PTPG_CHART_URL7, PTPG_CHART_DVW.PTPG_CHART_URL8, PTPG_CHART_DVW.PTPG_CHART_URL9);
            &PGChart.SetDataYAxis(PTPG_CHART_DVW.PTPG_CHARTYAXIS, PTPG_CHART_DVW.PTPG_CHARTYAXIS1, PTPG_CHART_DVW.PTPG_CHARTYAXIS2, PTPG_CHART_DVW.PTPG_CHARTYAXIS3, PTPG_CHART_DVW.PTPG_CHARTYAXIS4, PTPG_CHART_DVW.PTPG_CHARTYAXIS5, PTPG_CHART_DVW.PTPG_CHARTYAXIS6, PTPG_CHART_DVW.PTPG_CHARTYAXIS7, PTPG_CHART_DVW.PTPG_CHARTYAXIS8, PTPG_CHART_DVW.PTPG_CHARTYAXIS9);
            &PGChart.SetDataHints(PTPG_CHART_DVW.PT_PGCHARTLEGEND, PTPG_CHART_DVW.PT_PGCHARTLEGEND1, PTPG_CHART_DVW.PT_PGCHARTLEGEND2, PTPG_CHART_DVW.PT_PGCHARTLEGEND3, PTPG_CHART_DVW.PT_PGCHARTLEGEND4, PTPG_CHART_DVW.PT_PGCHARTLEGEND5, PTPG_CHART_DVW.PT_PGCHARTLEGEND6, PTPG_CHART_DVW.PT_PGCHARTLEGEND7, PTPG_CHART_DVW.PT_PGCHARTLEGEND8, PTPG_CHART_DVW.PT_PGCHARTLEGEND9);
            
            If &compPGInfoObj.szPGChartDualYAxis <> "" Then
               If &indexDualY = 0 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 1 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 2 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 3 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 4 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 5 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 6 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 7 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y, %Axis_Y));
               End-If;
               
               If &indexDualY = 8 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2, %Axis_Y));
               End-If;
               
               If &indexDualY = 9 Then
                  &PGChart.SetYAxisColumnType(CreateArray(%Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y, %Axis_Y2));
               End-If;
               
               &PGChart.Y2AxisTitle = &szDualYAxisTitle;
            End-If;
            
            Break;
            
         End-Evaluate;
         
         &PGChart.SetSeriesLabels(&compPGInfoObj.szPGChartYAxisArr.Clone());
         
      End-If;
      
      <*If &compPGInfoObj.szPGChartSeries = "" Then
         If &compPGInfoObj.nChartType <> %ChartType_2DScatter And
               &compPGInfoObj.nChartType <> %ChartType_2DScatter Then
            &arrLbls = GetUniqueLabels(&szXAxisLabels, &szActXAxisVals);
            &PGChart.SetXAxisLabels(&arrLbls);
         End-If;
      End-If;*>
      Local string &cursymbol = &compPGInfoObj.szCurrencySymbol;
      &PGChart.XAxisTitle = &compPGInfoObj.GetAliasForChart(&compPGInfoObj.szPGName, &compPGInfoObj.szPGChartXaxislabel);
      
      If All(&cursymbol) Then
         &arrIndex = 0;
         While &compPGInfoObj.arrFacts.Next(&arrIndex)
            If &compPGInfoObj.arrFacts [&arrIndex].szFactName = &compPGInfoObj.szPGChartYAxis Then
               If &compPGInfoObj.arrFacts [&arrIndex].bShowCurrSymbol = True Then
                  &PGChart.YAxisTitle = &compPGInfoObj.GetAliasForChart(&compPGInfoObj.szPGName, &compPGInfoObj.szPGChartYaxislabel) | " (" | &compPGInfoObj.szCurrencySymbol | ")";
               Else
                  &PGChart.YAxisTitle = &compPGInfoObj.GetAliasForChart(&compPGInfoObj.szPGName, &compPGInfoObj.szPGChartYaxislabel);
               End-If;
            End-If;
         End-While;
      Else
         &PGChart.YAxisTitle = &compPGInfoObj.GetAliasForChart(&compPGInfoObj.szPGName, &compPGInfoObj.szPGChartYaxislabel);
      End-If;
      
      
      If &PGChart.Type = 10 Then
         &PGChart.XAxisTitleOrient = 90;
         &PGChart.YAxisTitleOrient = 0;
      End-If;
      
      
      If &compPGInfoObj.nChartHeight <> 0 Then
         &PGChart.Height = &compPGInfoObj.nChartHeight;
      Else
         If %Page = Page.PTPG_PGVIEWERMINI Then
            &PGChart.Height = 265;
         End-If;
      End-If;
      If &compPGInfoObj.nChartWidth <> 0 Then
         &PGChart.Width = &compPGInfoObj.nChartWidth;
      End-If;
      
      Local string &szTempMainTitle = &compPGInfoObj.szChartTitle;
      &PGChart.MainTitle = &szTempMainTitle;
      If &compPGInfoObj.szChartSubTitle <> "" Then
         &PGChart.SubTitle = &compPGInfoObj.szChartSubTitle;
      End-If;
      If &compPGInfoObj.szChartFooter <> "" Then
         &PGChart.FootNote = &compPGInfoObj.szChartFooter;
      End-If;
      If &compPGInfoObj.szPGChartOverlay <> "" Then
         Local Rowset &rsPGChartOverlay = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_CHRT_DVW2);
         &rsPGChartOverlay.Flush();
         
         For &i = 1 To &compPGInfoObj.rsChartOverlay.ActiveRowCount
            If (&i = 1) Then
               &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTXAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(1).Value;
               
               If &compPGInfoObj.szPGChartSeries <> "" Then
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTSERIES.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(3).Value;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(3).Value;
               Else
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
               End-If;
               /*BP807R1 START*/
               &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PT_PGCHARTLEGEND.Value = &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PT_PGCHARTLEGEND.Value | ", " | &compPGInfoObj.szPGChartOverlay | ":" | &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value;
               /*BP807R1 END*/
               
               
            Else
               &rsPGChartOverlay.InsertRow(&rsPGChartOverlay.ActiveRowCount);
               &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTXAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(1).Value;
               If &compPGInfoObj.szPGChartSeries <> "" Then
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTSERIES.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(3).Value;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(3).Value;
               Else
                  &rsPGChartOverlay.GetRow(&i).PTPG_CHRT_DVW2.PTPG_CHARTYAXIS.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
                  &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value = &compPGInfoObj.rsChartOverlay.GetRow(&i).GetRecord(1).GetField(2).Value;
               End-If;
               /*BP807R1 START*/
               &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PT_PGCHARTLEGEND.Value = &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PT_PGCHARTLEGEND.Value | ", " | &compPGInfoObj.szPGChartOverlay | ":" | &rsPGChart.GetRow(&i).PTPG_CHART_DVW.PTPG_CHARTOLAY.Value;
               /*BP807R1 END*/
               
            End-If;
         End-For;
         If &compPGInfoObj.nChartType = %ChartType_2DBubble Then
            &PGChart.SetData(&rsPGChart);
            &PGChart.SetDataGlyphScale(PTPG_CHART_DVW.PTPG_CHARTOLAY);
            /*BP 807I1 start*/
            If &compPGInfoObj.nLegend <> - 1 And
                  &compPGInfoObj.szPGChartSeries <> "" Then
               &PGChart.HasLegend = True;
               &PGChart.LegendPosition = &compPGInfoObj.nLegend;
            End-If;
            /*BP 807I1 end*/
         Else
            &PGChart.SetOLData(&rsPGChartOverlay);
            &PGChart.SetOLDataXAxis(PTPG_CHRT_DVW2.PTPG_CHARTXAXIS);
            &PGChart.SetOLDataYAxis(PTPG_CHRT_DVW2.PTPG_CHARTYAXIS);
            &PGChart.SetOLDataSeries(PTPG_CHRT_DVW2.PTPG_CHARTSERIES);
            &PGChart.OLLineType = %ChartLine_Dash;
            &PGChart.OLType = %ChartType_2DLine;
            Local array of string &szLegend = CreateArrayRept("", 2);
            &szLegend [1] = &compPGInfoObj.szPGChartYAxis;
            &szLegend [2] = &compPGInfoObj.szPGChartOverlay;
            If &compPGInfoObj.nLegend <> - 1 Then
               If &compPGInfoObj.szPGChartSeries = "" Then
                  &PGChart.SetLegend(&szLegend);
               End-If;
               &PGChart.HasLegend = True;
               &PGChart.LegendPosition = &compPGInfoObj.nLegend;
            Else
               &PGChart.HasLegend = False;
            End-If;
         End-If;
      End-If;
      
   End-If;
   
   If (&compPGInfoObj.nDisplayType = 2 Or
         &compPGInfoObj.nDisplayType = 3) Then
      Local AnalyticGrid &MyAnalyticGrid;
      <*If %Page = Page.PTPG_PGVIEWER Then
         &MyAnalyticGrid = GetAnalyticGrid(Page.PTPG_PGVIEWER, "PTPGMDLVWR");
      Else
         &MyAnalyticGrid = GetAnalyticGrid(Page.PTPG_PGVIEWERMINI, "PTPGMDLVWR");
      End-If;*>
      &MyAnalyticGrid = GetAnalyticGrid(%Page, "PTPGMDLVWR");
      Local number &index = 0;
      
      &MyAnalyticGrid.SetPivotGridLayout(&compPGInfoObj.szArrGridFilters, &compPGInfoObj.szArrGridRows, &compPGInfoObj.szArrGridColumns);
      &compPGInfoObj.szCurrencySymbol = &MyAnalyticGrid.GetPivotGridCurrencySymbol();
      If &compPGInfoObj.arrSlicers <> Null Then
         While (&compPGInfoObj.arrSlicers.Next(&arrIndex))
            Local array of string &tempArr = CreateArrayRept("", 0);
            &MyAnalyticGrid.GetPivotGridFilterValues(&compPGInfoObj.arrSlicers [&arrIndex].szSlicerUniqueId, &tempArr);
            &compPGInfoObj.arrSlicers [&arrIndex].szSlicerValue = &tempArr;
         End-While;
      End-If;
      
      If (&compPGInfoObj.nDisplayType = 2) Then
         PTPG_WORKREC1.PTPG_GRPBOXDISP.Visible = False;
         PTPG_WORKREC1.PTPG_GRPBOXDISP1.Visible = True;
         PTPG_WORKREC.PTPG_CHART_OPT.Visible = False;
         PTPG_WORKREC.PTPG_CHART_DATVW.Visible = False;
      Else
         PTPG_WORKREC1.PTPG_GRPBOXDISP1.Visible = True;
         PTPG_WORKREC1.PTPG_GRPBOXDISP.Visible = True;
         PTPG_WORKREC.PTPG_CHART_OPT.Visible = True;
         PTPG_WORKREC.PTPG_CHART_DATVW.Visible = True;
      End-If;
      PTPG_WORKREC1.PTPG_VIEWGRID.Visible = False;
      &rsFilScroll = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_CHRT_FIL1);
      &rsFilScroll.HideAllRows();
      &rsFilScroll1 = GetLevel0().GetRow(1).GetRowset(Scroll.PTPG_CHRT_FIL2);
      &rsFilScroll1.HideAllRows();
      &rsFilScroll.GetRow(1).PTPG_WORKREC1.PTPG_CHART_FILHTM1.Visible = False;
      &rsFilScroll1.GetRow(1).PTPG_WORKREC1.PTPG_CHART_FILHTML.Visible = False;
      
      If (&compPGInfoObj.nDisplayType = 3) Then
         If %Page = Page.PTPG_PGVIEWERMINI Then
            If (&compPGInfoObj.nChartWidth = 0) Then
               /*In case of grid and chart override the chart width from default in narrow viewer*/
               &compPGInfoObj.nChartWidth = 550;
            End-If;
         End-If;
         GeneratePGChart(1);
      End-If;
      
   End-If;
   
   /*PB107 Change 18 start*/
   PTPG_MENU_WRK.PTPG_GROUP_BOX2.Visible = False;
   PTPG_MENU_WRK.PTPG_GROUP_BOX3.Visible = False;
   
   Local PTPG_MENU:MenuBuilder:HoverMenu &hMenu = create PTPG_MENU:MenuBuilder:HoverMenu();
   &hMenu.nDisplayType = &compPGInfoObj.nDisplayType;
   &arrIndex = 0;
   &nVisibleCnt = 0;
   &nDisplayValue = 0;
   If &compPGInfoObj.arrDSPrompts <> Null Then
      While &compPGInfoObj.arrDSPrompts.Next(&arrIndex)
         If &compPGInfoObj.arrDSPrompts [&arrIndex].szDSVisiblePrompt = "Y" Then
            &nVisibleCnt = &nVisibleCnt + 1;
         End-If;
         If &compPGInfoObj.arrDSPrompts [&arrIndex].szDisplayValue = "Y" Then
            &nDisplayValue = &nDisplayValue + 1;
         End-If;
      End-While;
   End-If;
   
   If &compPGInfoObj.nDSType = 2 Then
      &hMenu.bCompositeQuery = True;
   End-If;
   If &compPGInfoObj.arrDSPrompts = Null Then
      &hMenu.bFiltersPresent = False;
   Else
      If &compPGInfoObj.arrDSPrompts.Len = 0 Or
            &nVisibleCnt = 0 Then
         &hMenu.bFiltersPresent = False;
      Else
         &hMenu.bFiltersPresent = True;
      End-If;
   End-If;
   
   &hMenu.bIpadClient = &bIpadClient;
   If &compPGInfoObj.nDisplayType = 1 Then
      If &nDisplayValue > 0 Then
         Rem PTPG_MENU_WRK.HTML_AREA_02.Value = PopulatePromptValues();
         PTPG_MENU_WRK.HTML_AREA_02.Value = PTPG_MENU_WRK.HTML_AREA_02.Value | &hMenu.getMenuHTMLText();
      Else
         PTPG_MENU_WRK.HTML_AREA_02.Value = &hMenu.getMenuHTMLText();
      End-If;
   Else
      PTPG_MENU_WRK.HTML_AREA_01.Value = &hMenu.getMenuHTMLText();
   End-If;
   If &compPGInfoObj.nDisplayType = 3 Or
         &compPGInfoObj.nDisplayType = 1 Then
      PTPG_MENU_WRK.HTML_AREA_03.Value = &hMenu.getChartShortCuts();
   End-If;
   
   If &compPGInfoObj.nDisplayType <> 1 Or
         &bSlicerPresent = False Then
      PTPG_MENU_WRK.PTPG_GROUP_BOX1.Visible = False;
   End-If;
   /*PB107 Change 18 end*/
   PopulateIWCFields( False);
   
   Local string &sWsrp = %Request.GetParameter("PortletTechnology");
   If &sWsrp = "WSRP" Then
      Local string &sWSRPHTML;
      &sWSRPHTML = GetHTMLText(HTML.PTPG_LINKREL, %Response.GetStyleSheetURL(StyleSheet.PTPG_MENUSTYLE));
      &sWSRPHTML = &sWSRPHTML | GetHTMLText(HTML.PTPG_LINKREL, %Response.GetStyleSheetURL(StyleSheet.PT_PG_WSRP));
      Local string &styleSheet;
      SQLExec("Select STYLESHEETNAME from PSOPTIONS", &styleSheet);
      If &styleSheet = "PSSTYLEDEF_TANGERINE" Then
         &sWSRPHTML = &sWSRPHTML | GetHTMLText(HTML.PTPG_LINKREL, %Response.GetStyleSheetURL(StyleSheet.PT_ACE_SS1_CSS3));
      Else
         If &styleSheet = "PSSTYLEDEF_SWAN" Then
            &sWSRPHTML = &sWSRPHTML | GetHTMLText(HTML.PTPG_LINKREL, %Response.GetStyleSheetURL(StyleSheet.PT_ACE_SS1_SWAN));
         Else
            &sWSRPHTML = &sWSRPHTML | GetHTMLText(HTML.PTPG_LINKREL, %Response.GetStyleSheetURL(StyleSheet.PT_ACE_SS1));
         End-If;
      End-If;
      &sWSRPHTML = &sWSRPHTML | GetHTMLText(HTML.PTPG_CHART_WSRP);
      PTPG_WORKREC1.PTPG_CHART_WSRP.Value = &sWSRPHTML;
   End-If;
   
   /* Help Message Changes */
   Local number &nMsgSetNbr = 0;
   Local number &nMsgNbr = 0;
   Local string &sShowHelp = "Y";
   Local Rowset &rs = CreateRowset(Record.PSPGDISPOPT);
   &rs.Fill("WHERE PTPG_PGRIDNAME=:1", &compPGInfoObj.szPGName);
   If &rs.RowCount = 1 Then
      If All(&rs(1).PSPGDISPOPT.PTPG_PGRIDNAME.Value) Then
         &nMsgSetNbr = &rs(1).PSPGDISPOPT.MESSAGE_SET_NBR.Value;
         &nMsgNbr = &rs(1).PSPGDISPOPT.MESSAGE_NBR.Value;
         &sShowHelp = &rs(1).PSPGDISPOPT.PTPG_SHOWHELP.Value;
      End-If;
   End-If;
   Local string &HelpMsg = MsgGetExplainText(&nMsgSetNbr, &nMsgNbr, "Help");
   Local string &sAccessbility = GetUserOption("PPTL", "ACCESS");
   If (&nMsgSetNbr <> 0 And
         &nMsgNbr <> 0) And
         (&sShowHelp = "Y") Then
      If (&compPGInfoObj.nDisplayType = 2 Or
            &compPGInfoObj.nDisplayType = 3) Then
         PTPG_WORKREC.PTPG_HELP_MSG1.Value = &MyAnalyticGrid.GetPivotGridHelpMessage("PTPG_HELP_MSG1", &nMsgSetNbr, &nMsgNbr);
      Else
         Local AnalyticGrid &MyAnalyticGrid2 = GetAnalyticGrid(%Page, "PTPGMDLVWR");
         If (&MyAnalyticGrid2 <> Null) Then
            PTPG_WORKREC.PTPG_HELP_MSG2.Value = &MyAnalyticGrid2.GetPivotGridHelpMessage("PTPG_HELP_MSG2", &nMsgSetNbr, &nMsgNbr);
            
         End-If;
      End-If;
   End-If;
End-Function;

Function EnableDimTreeFields
   If &bShowTreeColumns Then
      PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = True;
      PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = True;
      PTPG_TREE_WRK.PTPG_ATTACHTREE.DisplayOnly = False;
      PTPG_TREE_WRK.PTPG_DETACHTREE.DisplayOnly = False;
      PSPGMODEL.SETID.DisplayOnly = False;
      PSPGMODEL.SETCNTRLVALUE.DisplayOnly = False;
      PSPGMODEL.PTPG_TREE_EFFDT.DisplayOnly = False;
      PSPGMODEL.TREE_NODE.Enabled = True;
      PSPGMODEL.TREE_NODE.DisplayOnly = False;
   Else
      PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = False;
      PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = False;
      PTPG_TREE_WRK.PTPG_ATTACHTREE.DisplayOnly = True;
      PTPG_TREE_WRK.PTPG_DETACHTREE.DisplayOnly = True;
      PSPGMODEL.TREE_NAME.Value = "";
      PSPGMODEL.SETID.Value = "";
      PSPGMODEL.SETCNTRLVALUE.Value = "";
      PSPGMODEL.PTPG_TREE_EFFDT.Value = "";
      PSPGMODEL.TREE_NODE.Value = "";
      PSPGMODEL.SETID.DisplayOnly = True;
      PSPGMODEL.SETCNTRLVALUE.DisplayOnly = True;
      PSPGMODEL.PTPG_TREE_EFFDT.DisplayOnly = True;
      PSPGMODEL.TREE_NODE.Enabled = False;
      PSPGMODEL.TREE_NODE.DisplayOnly = True;
   End-If;
End-Function;


Function DisableDimTreeFields
   PTPG_TREE_WRK.PTPG_ATTACHTREE.Enabled = False;
   PTPG_TREE_WRK.PTPG_DETACHTREE.Enabled = False;
   PTPG_TREE_WRK.PTPG_ATTACHTREE.DisplayOnly = True;
   PTPG_TREE_WRK.PTPG_DETACHTREE.DisplayOnly = True;
   PSPGMODEL.TREE_NAME.Value = "";
   PSPGMODEL.SETID.Value = "";
   PSPGMODEL.SETCNTRLVALUE.Value = "";
   PSPGMODEL.PTPG_TREE_EFFDT.Value = "";
   PSPGMODEL.TREE_NODE.Value = "";
   PSPGMODEL.SETID.DisplayOnly = True;
   PSPGMODEL.SETCNTRLVALUE.DisplayOnly = True;
   PSPGMODEL.PTPG_TREE_EFFDT.DisplayOnly = True;
   PSPGMODEL.TREE_NODE.Enabled = False;
   PSPGMODEL.TREE_NODE.DisplayOnly = True;
End-Function;


Function DownloadServerFile(&sFileId As string, &sLocalFileName As string, &sFileName As string)
   Local number &Rtn;
   
   /* attach local file to db */
   
   &Rtn = PutAttachment(URL.FILEDB_QAS, &sFileId, &sLocalFileName);
   If &Rtn <> %Attachment_Success Then
      throw CreateException(235, 105, "Error attaching file to database");
   End-If;
   /* detach file from db */
   &Rtn = ViewAttachment(URL.FILEDB_QAS, &sFileId, &sFileName);
   If &Rtn <> %Attachment_Success And
         &Rtn <> %Attachment_Cancelled Then
      throw CreateException(235, 5, "Error downloading file");
   End-If;
   /* clean up */
   &Rtn = DeleteAttachment(URL.FILEDB_QAS, &sFileId);
   If &Rtn <> %Attachment_Success Then
      throw CreateException(235, 106, "Error deleting file from database");
   End-If;
   
End-Function;



Function DeleteTempFile(&fileName As string)
   Local File &file = GetFile(&fileName, "E", %FilePath_Absolute);
   If &file.IsOpen Then
      &file.Delete();
      &file.Close();
   End-If;
End-Function;



Function GetSessionMessages() Returns string;
   Local ApiObject &PSMessages;
   Local number &MsgSetNbr, &MsgNbr, &NbrErrors;
   Local string &MsgText;
   
   &PSMessages = %Session.PSmessages;
   &NbrErrors = &PSMessages.Count;
   
   If &NbrErrors > 0 Then
      For &i = 1 To &NbrErrors
         &MsgSetNbr = &PSMessages.Item(&i).MessageSetNumber;
         &MsgNbr = &PSMessages.Item(&i).MessageNumber;
         If &PSMessages.Item(&i).Text <> "" Then
            &MsgText = &MsgText | &PSMessages.Item(&i).Text;
         End-If;
         
         /* show fetch error message in a popup */
         If &MsgSetNbr = 50 And
               &MsgNbr = 546 Then
            MessageBox(%MsgStyle_OK, "", 50, 546, "###Query Result Set too Large.");
         End-If;
         If &MsgSetNbr = 30 And
               &MsgNbr = 4 Then
            MessageBox(%MsgStyle_OK, "", 30, 4, "###The maximum number of rows have been fetched for this query.");
         End-If;
         If &MsgSetNbr = 30 And
               &MsgNbr = 11 Then
            MessageBox(%MsgStyle_OK, "", 30, 11, "###Database Driver Error.");
         End-If;
      End-For;
      &PSMessages.DeleteAll();
   End-If;
   
   Return &MsgText;
   
End-Function; /* GetSessionMessages */




Function DownloadToExcelCompositeQuery(&pgInfo As PT_PGPACKAGE:PT_PGInformation)
   
   Local string &sUrl;
   Local number &nPos;
   
   
   Local string &sOutputDir, &sDirSep;
   Local string &sServDir = GetEnv("PS_SERVDIR");
   Local string &sSep = "/";
   If Substring(&sServDir, 1, 1) <> "/" Then
      &sSep = "\";
   End-If;
   
   &sDirSep = &sSep;
   Local string &sFileID = UuidGen();
   Local string &sTempFileName = &sServDir | &sDirSep | "files" | &sDirSep | &sFileID;
   
   Local ApiObject &oCPQ = OpenCompositeQueryObj(&pgInfo.szDSName, "N");
   &QryPrompts = &oCPQ.Prompts;
   Local Record &rPromptRec = &oCPQ.PromptRecord;
   If &QryPrompts <> Null Then
      &nCount_prompt = &QryPrompts.Count;
      For &i = 1 To &nCount_prompt
         
         If &pgInfo.arrDSPrompts <> Null Then
            For &j = 1 To &pgInfo.arrDSPrompts.Len
               If &QryPrompts.item(&i).UniquePromptName = &pgInfo.arrDSPrompts [&j].szDSPromptUniqueId Then
                  <*For &k = 1 To &rPromptRec.FieldCount                        
                        If &rPromptRec.GetField(&k).Name = &QryPrompts.item(&i).PromptRecordFieldName Then
                           &rPromptRec.GetField(&k).Value = &pgInfo.arrDSPrompts [&j].szDSActPromptValue;
                           Break;
                        End-If;
                     End-For;*>
                  /* PromptRecordFieldName is not filled in composite query. Relying on the fact &QryPrompts and &rPromptRec store the fields in same sequence for now.Code above in comment should be used when query fixes PromptRecordFieldName*/
                  &rPromptRec.GetField(&i).Value = &pgInfo.arrDSPrompts [&j].szDSActPromptValue;
                  Break;
               End-If;
            End-For;
         End-If;
      End-For;
   End-If;
   
   
   Local integer &sResult = &oCPQ.RunToFile(&rPromptRec, &sTempFileName, %Query_XLS, 0, %Query_Prune);
   If (&sResult <> 0) Then
      Error (GetSessionMessages());
   End-If;
   If FileExists(&sTempFileName | ".xlsx", %FilePath_Absolute) Then
      DownloadServerFile(&sFileID, &sTempFileName | ".xlsx", &pgInfo.szPgridTitle | ".xlsx");
   Else
      DownloadServerFile(&sFileID, &sTempFileName | ".xls", &pgInfo.szPgridTitle | ".xls");
   End-If;
   
   /* clean up file */
   If FileExists(&sTempFileName | ".xlsx", %FilePath_Absolute) Then
      DeleteTempFile(&sTempFileName | ".xlsx");
   Else
      DeleteTempFile(&sTempFileName | ".xls");
   End-If;
   
End-Function;

