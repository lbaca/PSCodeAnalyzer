import HR_JOB_TREE_BLDR:TreeNodeKeyBase;
import HR_OC:ChartUtility;
import HR_OC:ChartDisplayUtils;
import HR_DIRECT_REPORTS:DirectReports;
import HR_DIRECT_REPORTS:DirectReportsUI;
import HR_DIRECT_REPORTS:DirectReportsAPI;
import HMAF_AWE:INTERFACES:ILaunchManager;

/*** class HRMHServices ***/

class HRMHServices
   method HRMHServices();
   
   /*** Returns rowset of all active matrix definitions to which &sEmplID is an owner */
   method getMatrixListOwner(&sEmplId As string, &dAsOfDate As date, &sOrgVwType As string) Returns Rowset;
   /*** Returns rowset of all active matrix definitions to which &sEmplID is an Lead and has access. */
   method getMatrixListLead(&sEmplId As string, &dAsOfDate As date, &sOrgVwType As string) Returns Rowset;
   /*** Returns rowset of all active matrix definitions to which &sEmplID is an member and has access. */
   method getMatrixListMember(&sEmplId As string, &dAsOfDate As date, &sOrgVwType As string) Returns Rowset;
   /*** Returns rowset of all active matrix definitions available to the Org View Type passed to the method. */
   method getMatrixListAll(&dAsOfDate As date, &sOrgVwType As string) Returns Rowset;
   
   /*** Returns a rowset of those reporting to the same supervisor as the target emplid ***/
   method GetPeers(&sMatrixID As string, &sSeed As string, &TargetNodeLevel As number, &dAsOfDate As date, &bShowSiblings As boolean) Returns Rowset;
   /*** Returns a rowset of the direct supervisors of the target emplid ***/
   method GetSupervisor(&sMatrixID As string, &sSeed As string, &TargetNodeLevel As number, &dAsOfDate As date, &bShowSiblings As boolean) Returns Rowset;
   
   /*** Returns a Rowset of all of those reporting indirectly to the target emplid. That is to say, not directly reporting but one or more levels away ***/
   method GetAllIndirectReports(&sMatrixID As string, &sSeed As string, &TargetNodeLevel As number, &dAsOfDate As date, &bShowSiblings As boolean) Returns Rowset;
   
   /*** Returns the number of direct reports for a matrix lead or owner */
   method GetDirectReportsCount(&MatrixId As string, &sTargetEmplId As string, &TargetEmplRcd As string, &dAsOfDate As date) Returns number;
   /*** Returns the number of direct reports for a position */
   method GetDirectReportsCountPosition(&MatrixId As string, &sTargetPosition As string, &dAsOfDate As date) Returns number;
   /*** Returns the number of employees that report to the direct reports of a matrix lead or owner */
   method GetInDirectReportsCount(&MatrixId As string, &sTargetEmplId As string, &TargetEmplRcd As string, &dAsOfDate As date) Returns number;
   /*** Returns the number of all employees that report through the hierarchy to a matrix lead or owner **/
   method GetAllReportsCount(&MatrixId As string, &sTargetEmplId As string, &TargetEmplRcd As string, &dAsOfDate As date) Returns number;
   /*** Returns the number of employees that will be exported **/
   method GetExportNumbers(&sMatrixID As string, &sSeed As string, &dAsOfDate As date, &bShowSiblings As boolean, &sParentOfSeed As string) Returns number;
   /*** Returns the number of peers for a matrix member */
   method GetPeersCount(&MatrixId As string, &sTargetEmplId As string, &TargetEmplRcd As string, &dAsOfDate As date) Returns number;
   
   /*** Returns whether has children for a specified emplid */
   method hasChildren(&sMatrixID As string, &sSeed As string, &dAsOfDate As date, &bShowSiblings As boolean, &sParentOfSeed As string) Returns boolean;
   /*** Returns a rowset representing a single reporting level starting from emplid */
   method drillDown(&sMatrixID As string, &sSeed As string, &dAsOfDate As date, &bShowSiblings As boolean, &sParentOfSeed As string) Returns Rowset;
   
   
   
   
   /*** Returns a containing a 3-level chart structure according to matrix config. */
   method getMatrix3LvlChart(&sMatrixID As string, &sSeed As string, &dAsOfDate As date, &bShowSiblings As boolean, &sParentOfSeed As string, &bIncludeBreadcrumbs As boolean, &arrDataPath As array of string) Returns Rowset;
   
   /*** Returns a containing a n-level chart structure according to matrix config. */
   method getMatrixNLvlStruct(&sMatrixID As string, &sSeed As string, &dAsOfDate As date, &bShowSiblings As boolean, &sParentOfSeed As string) Returns Rowset;
   
   
   
   /*** Returns a containing a 3-level chart structure by Access Type.  
        Note:  Public because shared by Matrix and Direct-Line */
   method get3LvlChartAccessType(&sAccessType As string, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean, &sTargetPosn As string, &sTargetGroupId As string, &sComponentName As string, &sSupvEmplid As string, &nSupvEmplRcd As integer, &bIncludeBreadcrumbs As boolean, &sRootEmplId As string, &nRootEmplRcd As integer, &arrDataPath As array of string, &bRefreshGroup As boolean, &sRootPosn As string, &bExclContWrkr As boolean) Returns Rowset;
   
   /*** Returns a containing all level chart structrue by Access Type*/
   method getNLvlStructAccessType(&sAccessType As string, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean, &sTargetPosn As string, &sTargetGroupId As string, &sComponentName As string, &sSupvEmplid As string, &nSupvEmplRcd As integer, &bExclContWrkr As boolean) Returns Rowset;
   
   
   
   
   /*** Returns a rowset those components that an EMPLID has access to within a Matrix */
   method getMatrixComponents(&sMatrixID As string, &sTargetEmplId As string, &dAsOfDate As date) Returns Rowset;
   /*** Returns a rowset those all matrices corresponding components (hrmh_trans structure) to which an EMPLID has access */
   method getMatrixComponentsAll(&sTargetEmplId As string, &dAsOfDate As date) Returns Rowset;
   /*** Returns a rowset those all matrices corresponding components (hrmh_trans structure) to which an in user Emplid has access to for a target emplid/empl_rcd */
   method getMatrixComponentList(&sinUserEmplid As string, &sTargetEmplId As string, &sTargetEmpl_Rcd As string, &dAsOfDate As date) Returns Rowset;
   /*** Returns an array of transaction names to which a user Emplid has access to for a target emplid/empl_rcd*/
   method getMatrixComponentArray(&sinUserEmplid As string, &sTargetEmplId As string, &sTargetEmpl_Rcd As string, &dAsOfDate As date) Returns array of string;
   
   /*** Reports to for component within a matrix- Returns a true if the Target emplid/empl_rcd reports to the &inUserEmplid passed to the method for the component for the passed matrix id */
   method ReportsToComponent(&sMatrixID As string, &sinUserEmplid As string, &sTargetEmplId As string, &sTargetEmpl_Rcd As string, &dAsOfDate As date, &sComponent As string) Returns boolean;
   /*** Reports to for component for any matrixes - Returns a true if the Target emplid/empl_rcd reports to the &inUserEmplid passed to the method for the component */
   method ReportsToComponentAny(&sinUserEmplid As string, &sTargetEmplId As string, &sTargetEmpl_Rcd As string, &dAsOfDate As date, &sComponent As string) Returns boolean;
   
   /*** Returns whether has children for a specified emplid */
   method hasChildrenAccessType(&sAccessType As string, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean, &sTargetPosn As string, &sTargetGroupId As string, &sComponentName As string, &sSupvEmplid As string, &nSupvEmplRcd As integer, &bExclContWrkr As boolean) Returns boolean;
   /*** Returns a rowset representing a single reporting level starting from emplid */
   method drillDownAccessType(&sAccessType As string, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean, &sTargetPosn As string, &sTargetGroupId As string, &sComponentName As string, &sSupvEmplid As string, &nSupvEmplRcd As integer, &bExclContWrkr As boolean) Returns Rowset;
   
   /*** Returns whether has children for a specified emplid */
   method hasChildrenTree(&treeName As string, &treeNode As string, &asOfDate As date, &bShowSiblings As boolean) Returns boolean;
   /*** Returns a rowset representing a single reporting level starting from emplid */
   method drillDownTree(&treeName As string, &treeNode As string, &asOfDate As date, &bShowSiblings As boolean, &lvlNum As integer) Returns Rowset;
   
   
   
   /*** Returns rowset of all active matrix definitions */
   method getAllActiveMatrixRowset(&dAsOfDate As date) Returns Rowset;
   method getAllActiveMatForOrgRowset(&dAsOfDate As date, &sOrgVwType As string) Returns Rowset;
   /*** Public Utilities */
   method getMatrixDefn(&sMatrixID As string, &dAsOfDate As date) Returns Record;
   method setSeedArray(&sSeedValue As string, &recMatrixDefn As Record) Returns array of string;
   
   method isMemberPublic(&sMatrixID As string, &dAsOfDate As date, &sTargetEmplId As string, &TargetEmplRcd As integer) Returns boolean;
   
   property string sLastFocusNodeId get;
   property string sInjectedOwnerNodeId get;
   property boolean bSmartNavMode;
   property boolean bExportMode;
   property HR_OC:ChartDisplayUtils oChartDisplayUtils;
   property integer MaxFetch;
   
   /*14204166*/
   property integer GenChartInfoBox get set;
   property string ChartAdditionalInfoMsg get set; /* ChartAdditionalInfoMsg enables applications to provide an app-specific message appended to the end of the common message set in ChartInfoBoxText. */
   property string ChartInfoBoxVariableText get;
   property string ChartInfoBoxText get;
   property string ChartInfoBoxHTML get;
   property array of number arrLevelNodeLimits;
   rem property array of number arrLevelNodeCounts;
   /*14204166*/
   
   
   /***************************************************/
private
   /***************************************************/
   
   
   /*** general methods */
   method isLeader(&recMatrixDefn As Record, &sEmplId As string, &TargetEmplRcd As string) Returns boolean;
   method isMember(&recMatrixDefn As Record, &sEmplId As string, &TargetEmplRcd As string) Returns boolean;
   method hasManualTranAccess(&recMatrixDefn As Record, &sEmplId As string, &sComponent As string) Returns boolean;
   /*** Reports to a Lead within a given matrix - Returns a true if the Target emplid/empl_rcd reports to the &inUserEmplid passed to the method */
   method ReportsToLead(&recMatrixDefn As Record, &sinUserEmplid As string, &sTargetEmplId As string, &sTargetEmpl_Rcd As string, &dAsOfDate As date) Returns boolean;
   
   
   
   /*** Manual-based methods */
   method isMemberManual(&recMatrixDefn As Record, &sEmplId As string) Returns boolean;
   method isLeaderManual(&recMatrixDefn As Record, &sEmplId As string) Returns boolean;
   method getTargetMemberManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date) Returns Rowset;
   method drillDownManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &nMaxFetch As integer) Returns Rowset;
   method getSupervisorManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date) Returns Rowset;
   method getPeersManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bRemoveTarget As boolean, &nMaxFetch As integer) Returns Rowset;
   
   method get3LvlChartManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean, &bRecursive As boolean, &bIncludeBreadcrumbs As boolean, &arrDataPath As array of string) Returns Rowset;
   
   method setStructRowSetManual(&recMatrixDefn As Record, &recMemb As Rowset, &level As integer, &sFocus As string, &sType As string) Returns Rowset;
   method getNLvlStructManual(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &bShowSiblings As boolean) Returns Rowset;
   method drillDownManualRecursive(&recMatrixDefn As Record, &sTargetEmplId As string, &TargetEmplRcd As integer, &dAsOfDate As date, &nTargetLevel As integer) Returns Rowset;
   
   
   
   /*** AccessType-based methods */
   method isMemberAccessType(&recMatrixDefn As Record, &sEmplId As string, &TargetEmplRcd As string, &dAsOfDate As date) Returns boolean;
   method isLeaderAccessType(&recMatrixDefn As Record, &sEmplId As string, &TargetEmplRcd As string) Returns boolean;
   method setStructRowSetAccessType(&DirRptsRS As Rowset, &dAsOfDate As date, &NodeLevel As number, &TargetEmplId As string, &TargetEmplRcd As integer, &TargetPosn As string, &ParentId As string) Returns Rowset;
   method isOwnerAccessType(&recMatrixDefn As Record, &sEmplId As string, &EmplRcd As string, &sSeed As string) Returns boolean;
   method getTargetAccessType(&sEmplId As string, &TargetEmplRcd As integer, &sTargetPosn As string, &sParentSeed As string) Returns Rowset;
   method getTotCountforEmplidAccessType(&sEmplId As string, &TargetEmplRcd As integer) Returns number;
   method getPerOrgParm() Returns string;
   method getPerOrgCondition(&sAlias As string) Returns string;
   
   
   /*** Tree-based methods */
   method isMemberTree(&recMatrixDefn As Record, &sEmplId As string, &bTestLead As boolean) Returns boolean;
   method isLeaderTree(&recMatrixDefn As Record, &sEmplId As string) Returns boolean;
   method getTargetTree(&treeName As string, &treeNode As string, &asOfDate As date, &bShowSiblings As boolean, &lvlNum As integer) Returns Rowset;
   method isOwnerTree(&recMatrixDefn As Record, &treeNode As string) Returns boolean;
   method getOwnerTreeNode(&recMatrixDefn As Record, &sEmplId As string, &sEmplRcd As number) Returns string;
   method get3LvlChartTree(&recMatrixDefn As Record, &sSeedTreeNodeName As string, &dAsOfDate As date, &bShowSiblings As boolean, &bIncludeBreadcrumbs As boolean, &arrDataPath As array of string) Returns Rowset;
   method getNLvlStuctTree(&recMatrixDefn As Record, &sSeedTreeNodeName As string, &dAsOfDate As date, &bShowSiblings As boolean) Returns Rowset;
   
   /*** Set tree instance variables and validates the tree and checks that node exists in the tree */
   method setValidateTree(&sTreeName As string, &sTreeNodeName As string) Returns boolean;
   method isChildTreeNode(&TestNodeName As string) Returns boolean;
   
   
   
   /*** Utilities */
   method setStructRowSet(&rsStruct As Rowset) Returns Rowset;
   method setOwnerTop(&recMatrixDefn As Record, &rsChartNodes As Rowset) Returns Rowset;
   method injectOwnerToRoot(&recMatrixDefn As Record, &rsChartNodes As Rowset, &bFocusOwner As boolean) Returns Rowset;
   method createInjectedNodeId(&recMatrixDefn As Record /*, &rsChartNodes As Rowset*/) Returns string;
   method isNodeOwnersNode(&recMatrixDefn As Record, &sNodeName As string) Returns boolean;
   method initializeClassVariables();
   method initializeTreeVariables();
   method initializeNodeVariables();
   method accessOrgViewType(&recMatrixDefn As Record, &TargetOrgViewType As string) Returns boolean;
   method addToStructureRowset(&SourceRS As Rowset, &MainRS As Rowset) Returns Rowset;
   method setFlagForStartNode(&arr As array of string, &recMatrixDefn As Record);
   
   /* ABN Breadcrumbs */
   method addBreadcrumbNodesToRootManual(&rsChartNodes As Rowset, &recMatrixDefn As Record, &arrDataPath As array of string) Returns Rowset;
   method addBreadcrumbNodesToRootAccessType(&rsChartNodes As Rowset, &arrDataPath As array of string, &recParms As Record, &oChartUtil As HR_OC:ChartUtility, &bIsMSS As boolean) Returns Rowset;
   method addBreadcrumbNodesToRootTree(&rsChartNodes As Rowset, &recMatrixDefn As Record, &arrDataPath As array of string) Returns Rowset;
   method mergeBreadcrumbRowset(&rsChartNodes As Rowset, &rsBreadCrumbs As Rowset, &sFirstBreadCrumbNode As string) Returns Rowset;
   method createBreadCrumbsFromDataPath(&arrABNDataPath As array of string, &rsChartNodes As Rowset, &sSourceType As string) Returns Rowset;
   
   instance ApiObject &oTree;
   instance ApiObject &oTreeStartNode;
   instance ApiObject &oTreeStructure;
   instance HR_JOB_TREE_BLDR:TreeNodeKeyBase &oTreeNodeKeyUtil;
   instance string &iOrgViewerDelim;
   instance string &iLastSeedValue;
   instance string &iLastFocusNodeId;
   instance string &iLastParentOfFocusNodeId;
   instance string &iLastTopNodeId;
   instance string &iTreeStructureId;
   instance boolean &iStartedFromOwner;
   instance boolean &iOwnerInjected;
   instance string &iInjectedOwnerNodeId;
   instance boolean &iLimitDrillUp;
   instance boolean &iInitialized;
   instance integer &iChartLevels;
   instance string &iEmptyPosnText;
   
   instance Record &recMatrixDefn_save; /* save the matrix definition record when it is retrieved then subsequent requests can use it */
   instance HR_DIRECT_REPORTS:DirectReports &DirectReports;
   
   instance string &iChartInfoBoxHTML;
   
   instance boolean &iExcludeContWorker;
   
   Constant &OrgChartMaxNodeCount = 250;
end-class;




Declare Function get_person_name PeopleCode FUNCLIB_NAME.PERSON_NAME FieldFormula;

Component HR_OC:ChartDisplayUtils &coChartDisplayUtils;
Component string &CountTblReady;



/* CONSTRUCTOR */
method HRMHServices
   %This.initializeClassVariables();
   &DirectReports = create HR_DIRECT_REPORTS:DirectReports();
   &DirectReports.ShowEmptyPositions = True;
   &DirectReports.ShowIndirectIndicator = True;
   %This.bSmartNavMode = True;
   &recMatrixDefn_save = CreateRecord(Record.HRMH_MATRX_DEFN);
   %This.MaxFetch = 250;
   /* bug 22450536 - only instanciate once for performance */
   If &coChartDisplayUtils = Null Then
      &coChartDisplayUtils = create HR_OC:ChartDisplayUtils();
   End-If;
   %This.oChartDisplayUtils = &coChartDisplayUtils;
   %This.arrLevelNodeLimits = %This.oChartDisplayUtils.arrLevelNodeLimits;
end-method;



/**************************************************************************
* Get / Set
**************************************************************************/
get sLastFocusNodeId
   /+ Returns String +/
   Return &iLastFocusNodeId;
end-get;

get sInjectedOwnerNodeId
   /+ Returns String +/
   Return &iInjectedOwnerNodeId;
end-get;

get GenChartInfoBox
   /+ Returns Integer +/
   Return %This.oChartDisplayUtils.GenChartInfoBox;
end-get;

set GenChartInfoBox
   /+ &NewValue as Integer +/
   %This.oChartDisplayUtils.GenChartInfoBox = &NewValue;
end-set;

get ChartAdditionalInfoMsg
   /+ Returns String +/
   Return %This.oChartDisplayUtils.ChartAdditionalInfoMsg;
end-get;

set ChartAdditionalInfoMsg
   /+ &NewValue as String +/
   %This.oChartDisplayUtils.ChartAdditionalInfoMsg = &NewValue;
end-set;

get ChartInfoBoxVariableText
   /+ Returns String +/
   Return %This.oChartDisplayUtils.ChartInfoBoxVariableText;
end-get;

get ChartInfoBoxText
   /+ Returns String +/
   Return %This.oChartDisplayUtils.ChartInfoBoxText;
end-get;

get ChartInfoBoxHTML
   /+ Returns String +/
   Return %This.oChartDisplayUtils.ChartInfoBoxHTML;
end-get;

/*set ChartInfoBoxHTML
   /+ &NewValue as String +/
   %This.oChartDisplayUtils.ChartInfoBoxHTML = &NewValue;
end-set;*/

/**************************************************************************
* Get / Set
**************************************************************************/


method initializeClassVariables
   &iOrgViewerDelim = ":::";
   &iTreeStructureId = "MATRIX_BY_JOB";
   
   %This.initializeNodeVariables();
   %This.initializeTreeVariables();
end-method;

method initializeNodeVariables
   &iLastSeedValue = "";
   &iLastFocusNodeId = "";
   &iLastParentOfFocusNodeId = "";
   &iLastTopNodeId = "";
   &iStartedFromOwner = False;
   &iOwnerInjected = False;
   &iInjectedOwnerNodeId = "";
   &iLimitDrillUp = False;
   &iChartLevels = 0;
   &iEmptyPosnText = "(" | MsgGetText(1030, 33, "MESSAGE NOT FOUND") | ")";
end-method;

method initializeTreeVariables
   &oTree = Null;
   &oTreeStartNode = Null;
   &oTreeStructure = Null;
   &oTreeNodeKeyUtil = Null;
   &iTreeStructureId = "";
end-method;

/*** 
Method:  getMatrixListOwner (Public)
Description:  Returns a rowset of Record.HRMH_MATRX_DEFN for all matrix defns to which the passed &sEmplId is owner and has access to view.
*/
method getMatrixListOwner
   /+ &sEmplId as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sOrgVwType as String +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn;
   Local integer &nRows;
   Local string &sEmployeeId = &sEmplId;
   Local number &i;
   Local Record &recMxDefn;
   If None(&sEmployeeId) Then
      &sEmployeeId = %EmployeeId;
   End-If;
   
   &rsReturn = CreateRowset(Record.HRMH_MATRX_DEFN);
   /*Matrix Enhancement*/
   rem &nRows = &rsReturn.Fill("WHERE FILL.EFF_STATUS = 'A' AND FILL.HRMH_OWNER_EMPLID = :1 AND FILL.EFFDT = (SELECT MAX(A.EFFDT) FROM PS_HRMH_MATRX_DEFN A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:2)) ORDER BY FILL.DESCR", &sEmployeeId, &dAsOfDate);
   &nRows = &rsReturn.Fill("WHERE FILL.EFF_STATUS = 'A' AND FILL.START_DT <= %DateIn(:2) AND FILL.HRMH_OWNER_EMPLID = :1 AND FILL.EFFDT = (SELECT MAX(A.EFFDT) FROM PS_HRMH_MATRX_DEFN A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:2)) ORDER BY FILL.DESCR", &sEmployeeId, &dAsOfDate);
   /*Matrix Enhancement*/
   
   If &nRows > 0 Then
      If All(&sOrgVwType) Then
         /* if they passed a org view type then check to see if they have access through it */
         For &i = &rsReturn.ActiveRowCount To 1 Step - 1
            /* is org view type allowed */
            &recMxDefn = &rsReturn(&i).GetRecord(Record.HRMH_MATRX_DEFN);
            If %This.accessOrgViewType(&recMxDefn, &sOrgVwType) = False Then
               rem &nRows = &nRows + 1;
               &rsReturn.DeleteRow(&i);
            End-If;
         End-For;
      End-If;
   End-If;
   
   If &nRows = 0 Or
         &rsReturn.ActiveRowCount = 0 Or
         (&rsReturn.ActiveRowCount = 1 And
            None(&rsReturn(1).HRMH_MATRX_DEFN.HRMH_MATRIX_ID.Value)) Then
      &rsReturn = Null;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getMatrixListLead (Public)
Description:  Returns a rowset of Record.HRMH_MATRX_DEFN for all matrix defns to which 
the passed &sEmplId is a lead or owner and has access to view.
If no Org View Type is passed then it is assumed that that logic is not required this is being processed to get the tabs/dynamic folder matrixes
*/
method getMatrixListLead
   /+ &sEmplId as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sOrgVwType as String +/
   /+ Returns Rowset +/
   Local Rowset &rsActiveMatrix;
   Local integer &i, &nStartActiveCt, &nDeleteCt;
   Local string &sEmployeeId = &sEmplId;
   Local boolean &checkMember;
   
   If None(&sEmployeeId) Then
      &sEmployeeId = %EmployeeId;
   End-If;
   
   %This.initializeClassVariables();
   /* bug 22450536 - for performance join to org type table */
   If All(&sOrgVwType) Then
      &rsActiveMatrix = %This.getAllActiveMatForOrgRowset(&dAsOfDate, &sOrgVwType);
   Else
      &rsActiveMatrix = %This.getAllActiveMatrixRowset(&dAsOfDate);
   End-If;
   If &rsActiveMatrix = Null Then
      Return Null;
   End-If;
   
   &nStartActiveCt = &rsActiveMatrix.ActiveRowCount;
   
   /* LOOP thru all active matrices.  Remove rows where &sEmplId is not a member */
   For &i = &rsActiveMatrix.ActiveRowCount To 1 Step - 1
      /* is org view type allowed */
      Local Record &recMxDefn = &rsActiveMatrix(&i).GetRecord(Record.HRMH_MATRX_DEFN);
      
      If &recMxDefn.HRMH_OWNER_EMPLID.Value = &sEmployeeId And
            &recMxDefn.HRMH_OWN_TOP.Value = "Y" Then /* they are the owner and the top they can see it */
         &checkMember = False;
      Else /* they are not the owner */
         If &recMxDefn.HRMH_OWN_ONLY.Value = "Y" Then
            /* this matrix is only available to the owner */
            &nDeleteCt = &nDeleteCt + 1;
            &rsActiveMatrix.DeleteRow(&i);
            &checkMember = False;
         Else /* the owner only is off so check if they are a leader. */
            &checkMember = True;
         End-If;
      End-If;
      
      If &checkMember = True Then /* passed org type and owner only test so check if they are a leader */
         If &recMxDefn.HRMH_OWNER_EMPLID.Value <> &sEmployeeId Then /* is Not owner  so check if is a lead*/
            Evaluate &recMxDefn.HRMH_SOURCE.Value
            When "M"
               If Not %This.isLeaderManual(&recMxDefn, &sEmployeeId) Then
                  &nDeleteCt = &nDeleteCt + 1;
                  &rsActiveMatrix.DeleteRow(&i);
               End-If;
               Break;
            When "A"
               If Not %This.isLeaderAccessType(&recMxDefn, &sEmployeeId, "") Then
                  &nDeleteCt = &nDeleteCt + 1;
                  &rsActiveMatrix.DeleteRow(&i);
               End-If;
               Break;
            When "T"
               If Not %This.isLeaderTree(&recMxDefn, &sEmployeeId) Then
                  &nDeleteCt = &nDeleteCt + 1;
                  &rsActiveMatrix.DeleteRow(&i);
               End-If;
               Break;
            When-Other
               /* exception */
               &nDeleteCt = &nDeleteCt + 1;
               &rsActiveMatrix.DeleteRow(&i);
            End-Evaluate;
         End-If;
      End-If;
      
   End-For;
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   
   If &nStartActiveCt = &nDeleteCt Or
         (&rsActiveMatrix.ActiveRowCount = 1 And
            None(&rsActiveMatrix(1).HRMH_MATRX_DEFN.HRMH_MATRIX_ID.Value)) Then
      /* all rows deleted */
      Return Null;
   Else
      Return &rsActiveMatrix;
   End-If;
   
end-method;



method getMatrixListAll
   /+ &dAsOfDate as Date, +/
   /+ &sOrgVwType as String +/
   /+ Returns Rowset +/
   Local Rowset &rsActiveMatrix;
   Local integer &i, &nDeleteCt;
   
   %This.initializeClassVariables();
   /* bug 22450536 - join to org view table for performance */
   If All(&sOrgVwType) Then
      &rsActiveMatrix = %This.getAllActiveMatForOrgRowset(&dAsOfDate, &sOrgVwType);
   Else
      &rsActiveMatrix = %This.getAllActiveMatrixRowset(&dAsOfDate);
   End-If;
   If &rsActiveMatrix = Null Then
      Return Null;
   End-If;
   Local integer &nStartActiveCt = &rsActiveMatrix.ActiveRowCount;
   <* checking org view type in original get of rowset  
/* LOOP thru all active matrices.  Remove rows where &sEmplId is not a member. */
   For &i = &rsActiveMatrix.ActiveRowCount To 1 Step - 1
      /* is org view type allowed */
      Local Record &recMxDefn = &rsActiveMatrix(&i).GetRecord(Record.HRMH_MATRX_DEFN);
      If All(&sOrgVwType) Then /* if they passed a org view type then check to see if they have access through it */
         If %This.accessOrgViewType(&recMxDefn, &sOrgVwType) = False Then
            &nDeleteCt = &nDeleteCt + 1;
            &rsActiveMatrix.DeleteRow(&i);
         End-If;
      End-If;
   End-For;*>
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   
   If &nDeleteCt = &nStartActiveCt Or
         (&rsActiveMatrix.ActiveRowCount = 1 And
            None(&rsActiveMatrix(1).HRMH_MATRX_DEFN.HRMH_MATRIX_ID.Value)) Then
      /* all rows deleted */
      Return Null;
   End-If;
   
   &rsActiveMatrix.Sort(HRMH_MATRX_DEFN.DESCR, "A", HRMH_MATRX_DEFN.HRMH_MATRIX_ID, "A");
   
   Return &rsActiveMatrix;
   
end-method;


/*** 
Method:  getMatrixListMember (Public)
Description:  Returns a rowset of Record.HRMH_MATRX_DEFN for all matrix defns to which the passed 
&sEmplId is a member or owner and has access to view.
If no Org View Type is passed then it is assumed that that logic is not required this is being processed to get the tabs/dynamic folder matrixes
*/
method getMatrixListMember
   /+ &sEmplId as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sOrgVwType as String +/
   /+ Returns Rowset +/
   Local Rowset &rsActiveMatrix;
   Local integer &i, &nDeleteCt;
   Local string &sEmployeeId = &sEmplId;
   Local boolean &checkMember;
   If None(&sEmployeeId) Then
      &sEmployeeId = %EmployeeId;
   End-If;
   
   %This.initializeClassVariables();
   /* join to org view table for performance */
   If All(&sOrgVwType) Then
      &rsActiveMatrix = %This.getAllActiveMatForOrgRowset(&dAsOfDate, &sOrgVwType);
   Else
      &rsActiveMatrix = %This.getAllActiveMatrixRowset(&dAsOfDate);
   End-If;
   If &rsActiveMatrix = Null Then
      Return Null;
   End-If;
   Local integer &nStartActiveCt = &rsActiveMatrix.ActiveRowCount;
   Local Record &recMxDefn;
   /* LOOP thru all active matrices.  Remove rows where &sEmplId is not a member. */
   For &i = &rsActiveMatrix.ActiveRowCount To 1 Step - 1
      &recMxDefn = &rsActiveMatrix(&i).GetRecord(Record.HRMH_MATRX_DEFN);
      /* is org view type allowed */
      <* checking org view in get of rowset 
      bug 22450536 removed
      If All(&sOrgVwType) Then /* if they passed a org view type then check to see if they have access through it */
         If %This.accessOrgViewType(&recMxDefn, &sOrgVwType) = False Then
            &nDeleteCt = &nDeleteCt + 1;
            &rsActiveMatrix.DeleteRow(&i);
            &checkMember = False;
         Else /* they do have access through the org chart if they are a lead or an owner */
            If &recMxDefn.HRMH_OWNER_EMPLID.Value <> &sEmployeeId Then /* if they are the owner then don't check membership and loop */
               &checkMember = True;
            Else
               &checkMember = False;
            End-If;
         End-If;
      Else /* there is no org view type to check so check if it is viewable through the owner only flag */*>
      If &recMxDefn.HRMH_OWNER_EMPLID.Value = &sEmployeeId Then /* they are the owner they can see it */
         &checkMember = False;
      Else /* they are not the owner */
         If &recMxDefn.HRMH_OWN_ONLY.Value = "Y" Then
            /* this matrix is only available to the owner */
            &nDeleteCt = &nDeleteCt + 1;
            &rsActiveMatrix.DeleteRow(&i);
            &checkMember = False;
         Else /* the owner only is off so check if they are a leader. */
            &checkMember = True;
         End-If;
      End-If;
      rem End-If;
      
      If &checkMember Then
         /* is member test */
         Evaluate &recMxDefn.HRMH_SOURCE.Value
         When "M"
            If Not %This.isMemberManual(&recMxDefn, &sEmployeeId) Then
               &nDeleteCt = &nDeleteCt + 1;
               &rsActiveMatrix.DeleteRow(&i);
            End-If;
            Break;
         When "A"
            If Not %This.isMemberAccessType(&recMxDefn, &sEmployeeId, "", &dAsOfDate) Then
               &nDeleteCt = &nDeleteCt + 1;
               &rsActiveMatrix.DeleteRow(&i);
            End-If;
            Break;
         When "T"
            If Not %This.isMemberTree(&recMxDefn, &sEmployeeId, False) Then
               &nDeleteCt = &nDeleteCt + 1;
               &rsActiveMatrix.DeleteRow(&i);
            End-If;
            Break;
         When-Other
            /* exception */
            &nDeleteCt = &nDeleteCt + 1;
            &rsActiveMatrix.DeleteRow(&i);
         End-Evaluate;
      End-If;
   End-For;
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   
   If &nDeleteCt = &nStartActiveCt Or
         (&rsActiveMatrix.ActiveRowCount = 1 And
            None(&rsActiveMatrix(1).HRMH_MATRX_DEFN.HRMH_MATRIX_ID.Value)) Then
      /* all rows deleted */
      Return Null;
   End-If;
   
   &rsActiveMatrix.Sort(HRMH_MATRX_DEFN.DESCR, "A", HRMH_MATRX_DEFN.HRMH_MATRIX_ID, "A");
   
   Return &rsActiveMatrix;
end-method;

/*** 
Method:  GetPeers (Public)
Description:  Returns a rowset of all those who report to the same person as the target emplid.
*/
method GetPeers
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &TargetNodeLevel as Number, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Rowset +/
   
   If None(&sMatrixID) Or
         None(&sSeed) Then
      Return Null;
   End-If;
   
   Local HR_OC:ChartUtility &oChartUtility;
   Local Rowset &rs_peers, &rs_tree_peers, &rs_pos_peers;
   Local Record &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   Local string &sTargetEmplId, &sTargetPosition;
   Local string &TargetEmplRcd;
   Local number &nTargetEmplRcd, &i;
   Local Record &recParms;
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   
   %This.initializeClassVariables();
   &iInitialized = True;
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return Null;
   End-If;
   
   Local array of string &arrSeed = CreateArrayRept("", 0);
   &arrSeed = %This.setSeedArray(&sSeed, &recMatrixDefn);
   If &arrSeed.Len > 1 Then
      If &arrSeed [2] = "P" Then
         &sTargetPosition = &arrSeed [1];
      Else
         &sTargetEmplId = &arrSeed [1];
         &TargetEmplRcd = &arrSeed [2];
      End-If;
   End-If;
   
   /* if the emplid is the owner and the top there are no peers */
   If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
         &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
      Return Null
   End-If;
   
   If None(&TargetEmplRcd) Or
         Not IsNumber(&TargetEmplRcd) Then
      &TargetEmplRcd = "0";
   End-If;
   
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      &rs_peers = %This.getPeersManual(&recMatrixDefn, &sTargetEmplId, Value(&TargetEmplRcd), &dAsOfDate, True, 0);
      If &rs_peers <> Null Then
         
         /* level = &TargetNodeLevel, focus = N, type = (P) peers */
         &rsReturn = %This.setStructRowSetManual(&recMatrixDefn, &rs_peers, &TargetNodeLevel, "N", "P");
      Else
         &rsReturn = Null;
      End-If;
      Break;
   When "T"
      If &arrSeed [1] <> &recMatrixDefn.TREE_NODE_START.Value Then
         /* if the node is the start node, it does not have peers in the context of the matrix */
         &oChartUtility = create HR_OC:ChartUtility();
         
         &oChartUtility.SmartNavMode = %This.bSmartNavMode;
         &oChartUtility.ShowSiblings = &bShowSiblings;
         
         &recParms = CreateRecord(Record.HR_OC_PARM_TREE);
         &recParms.ASOFDATE.Value = &dAsOfDate;
         &recParms.TREE_NAME.Value = &recMatrixDefn.TREE_NAME.Value;
         &recParms.TREE_NODE.Value = &arrSeed [1];
         If &iLimitDrillUp Then
            &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
         Else
            &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
         End-If;
         &oChartUtility.getSiblingsTree(&recParms, &TargetNodeLevel).CopyTo(&rsStruct);
         &rsReturn = %This.setStructRowSet(&rsStruct);
      End-If;
      Break;
      
   When "A"
      If All(&TargetEmplRcd) Then
         &nTargetEmplRcd = Value(&TargetEmplRcd);
      End-If;
      Local string &tmp_pos_nbr = " ";
      If All(&sTargetEmplId) Then
         /* the owner has no peers */
         If (&recMatrixDefn.HRMH_OWN_TOP.Value = "Y" And
               (&sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                  &nTargetEmplRcd = &recMatrixDefn.EMPL_RCD.Value)) Then
            Return Null;
         Else /* if the emplid is the starting point of the matrix There are no peers */
            If (&sTargetEmplId = &recMatrixDefn.HRMH_EMPLID_START.Value And
                  &nTargetEmplRcd = &recMatrixDefn.HRMH_START_EMPLRCD.Value) Then
               Return Null;
            End-If;
         End-If;
         /*need to make sure that the target is part of the matrix */
         If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
            /* find the position of the current person to determine if they are the starting one */
            SQLExec("SELECT POSITION_NBR FROM PS_JOB A WHERE  EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = A.EmplID AND EMPL_RCD = A.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND A.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = A.EmplID AND D.EMPL_RCD = A.EMPL_RCD AND D.EffDt = A.EffDt) AND EMPLID = :1 AND EMPL_RCD = :2", &sTargetEmplId, &nTargetEmplRcd, &tmp_pos_nbr);
         End-If;
      End-If;
      If &recMatrixDefn.HRMH_POSN_START.Value = &tmp_pos_nbr And
            All(&recMatrixDefn.HRMH_POSN_START.Value) And
            All(&sTargetEmplId) Then
         /* peers are those with the same position by using full position access type */
         &rs_pos_peers = CreateRowset(Record.HR_DRPT_4A_VW);
         &rs_peers = CreateRowset(Record.HR_DRPT_RS_WK);
         &rs_pos_peers.Fill("WHERE POSITION_NBR = :1 and EMPLID <> :2 AND EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = FILL.EmplID AND EMPL_RCD = FILL.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = FILL.EmplID AND D.EMPL_RCD = FILL.EMPL_RCD AND D.EffDt = FILL.EffDt) ", &recMatrixDefn.HRMH_POSN_START.Value, &sTargetEmplId);
         &rs_pos_peers.CopyTo(&rs_peers, Record.HR_DRPT_4A_VW, Record.HR_DRPT_RS_WK);
      Else
         If (All(&sTargetEmplId) And
               %This.isMemberAccessType(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate)) Or
               All(&sTargetPosition) Then
            
            &DirectReports.TargetPosition = &sTargetPosition;
            &DirectReports.TargetEmplid = &sTargetEmplId;
            If All(&TargetEmplRcd) Then
               &DirectReports.TargetERN = Value(&TargetEmplRcd);
            End-If;
            &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
            /* check Force Group Rebuild flag and send appropriate RebuildGroup property - only in initial drilldown
            If &recMatrixDefn.HR_DR_REFRESH_GRP.Value = "Y" Then
               &DirectReports.RebuildGroup = True;
            Else
               &DirectReports.RebuildGroup = False;
            End-If;*/
            &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
            &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
            &DirectReports.LimitDrillUp = False;
            rem &DirectReports.MaxFetch = %This.MaxFetch + 1;
            &DirectReports.MaxFetch = %This.MaxFetch;
            rem WriteToLog(%ApplicationLogFence_Level1, "MaxFetch=" | String(%This.MaxFetch));
            If &recMatrixDefn.ACCESS_TYPE.Value = 1 Or
                  &recMatrixDefn.ACCESS_TYPE.Value = 7 Then
               &DirectReports.TargetPosition = "";
               If &recMatrixDefn.ACCESS_TYPE.Value = 1 Then
                  &DirectReports.TargetEmplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
                  &DirectReports.TargetERN = &recMatrixDefn.HRMH_START_EMPLRCD.Value;
               End-If;
               &DirectReports.DrillDown();
            Else
               &DirectReports.GetPeers();
            End-If;
            &rs_peers = &DirectReports.DirectReports;
            For &i = &rs_peers.ActiveRowCount To 1 Step - 1
               If (&sTargetEmplId = &rs_peers(&i).GetRecord(1).EMPLID.Value And
                     &nTargetEmplRcd = &rs_peers(&i).GetRecord(1).EMPL_RCD.Value) Then
                  &rs_peers.DeleteRow(&i);
               End-If;
            End-For;
         Else
            &rsReturn = Null;
         End-If
      End-If;
      If None(&rs_peers(1).GetRecord(1).EMPLID.Value) And
            None(&rs_peers(1).GetRecord(1).POSITION_NBR.Value) Then
         REM   WriteToLog(%ApplicationLogFence_Level1, "getPeers returning none");
         &rsReturn = Null;
      Else
         &rsReturn = %This.setStructRowSet(%This.setStructRowSetAccessType(&rs_peers, &dAsOfDate, &TargetNodeLevel, &sTargetEmplId, Value(&TargetEmplRcd), &recMatrixDefn.HRMH_POSN_START.Value, ""));
      End-If;
      
   End-Evaluate;
   
   Return &rsReturn;
end-method;

/*** 
Method:  GetSupervisor (Public)
Description:  Returns a list of the supervisors for the target employee 
*/
method GetSupervisor
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &TargetNodeLevel as Number, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Rowset +/
   Local HR_OC:ChartUtility &oChartUtility;
   Local number &nTargetEmplRcd;
   Local Rowset &rs_supervisors;
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local Record &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   Local Record &recParms;
   Local integer &i;
   Local string &tmp_pos_nbr;
   
   %This.initializeClassVariables();
   &iInitialized = True;
   
   If &recMatrixDefn = Null Then
      Return Null;
   End-If;
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return Null;
   End-If;
   
   Local string &sTargetEmplId, &sTargetPosition;
   Local string &TargetEmplRcd;
   Local string &TargetNode;
   
   Local array of string &arrSeed = CreateArrayRept("", 0);
   &arrSeed = %This.setSeedArray(&sSeed, &recMatrixDefn);
   
   If &arrSeed <> Null And
         &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      
      Evaluate &recMatrixDefn.HRMH_SOURCE.Value
      When "M"
         
         &sTargetEmplId = &arrSeed [1];
         &TargetEmplRcd = &arrSeed [2];
         &TargetNode = "";
         If All(&TargetEmplRcd) And
               IsNumber(&TargetEmplRcd) Then
            &nTargetEmplRcd = Value(&TargetEmplRcd);
         End-If;
         
         If &arrSeed.Len = 2 Then
            &rs_supervisors = %This.getSupervisorManual(&recMatrixDefn, &sTargetEmplId, &nTargetEmplRcd, &dAsOfDate);
            If &rs_supervisors <> Null Then
               
               /* level = &TargetNodeLevel, focus = N, type = (S) supervisor */
               &rsReturn = %This.setStructRowSetManual(&recMatrixDefn, &rs_supervisors, &TargetNodeLevel, "N", "S");
            Else
               &rsReturn = Null;
            End-If;
         End-If;
         Break;
         
      When "T"
         
         &sTargetEmplId = "";
         &TargetEmplRcd = "";
         &TargetNode = &arrSeed [1];
         If &iStartedFromOwner And
               &TargetNode = &recMatrixDefn.TREE_NODE_START.Value Then
            /* no supervisor - target node is the owner, start and owner represent the same employee */
            Return Null;
         End-If;
         
         If &recMatrixDefn.HRMH_OWN_TOP.Value = "N" And
               &TargetNode = &recMatrixDefn.TREE_NODE_START.Value Then
            /* no supervisor - target node is the start node, start node is top */
            Return Null;
         End-If;
         
         If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" And
               %This.isNodeOwnersNode(&recMatrixDefn, &TargetNode) Then
            /* no supervisor - target node is the owner */
            &iStartedFromOwner = True;
            %This.initializeTreeVariables();
            Return Null;
         End-If;
         
         Local string &sInjectedOwnerNode;
         Local boolean &bReportsToOwner;
         If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" And
               &TargetNode = &recMatrixDefn.TREE_NODE_START.Value Then
            /* get a node for the owner */
            &bReportsToOwner = True;
            &sInjectedOwnerNode = %This.createInjectedNodeId(&recMatrixDefn);
         End-If;
         
         If &oChartUtility = Null Then
            &oChartUtility = create HR_OC:ChartUtility();
         End-If;
         &oChartUtility.SmartNavMode = %This.bSmartNavMode;
         &oChartUtility.ShowSiblings = &bShowSiblings;
         
         &recParms = CreateRecord(Record.HR_OC_PARM_TREE);
         &recParms.ASOFDATE.Value = &dAsOfDate;
         &recParms.TREE_NAME.Value = &recMatrixDefn.TREE_NAME.Value;
         If &iLimitDrillUp Then
            &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
         Else
            &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
         End-If;
         If None(&sInjectedOwnerNode) Then
            &recParms.TREE_NODE.Value = &TargetNode;
            &oChartUtility.getParentTree(&recParms, &TargetNodeLevel).CopyTo(&rsStruct);
         Else
            &recParms.TREE_NODE.Value = &sInjectedOwnerNode;
            &oChartUtility.getTargetTree(&recParms, &TargetNodeLevel).CopyTo(&rsStruct);
         End-If;
         
         &rsReturn = %This.setStructRowSet(&rsStruct);
         
         
         If &bReportsToOwner Then
            For &i = 1 To &rsReturn.ActiveRowCount
               &rsReturn(&i).GetRecord(1).PTPARENT_CHART_ND.Value = "";
            End-For;
         End-If;
         Break;
         
      When "A"
         
         If &arrSeed [2] = "P" Then
            &sTargetPosition = &arrSeed [1];
         Else
            &sTargetEmplId = &arrSeed [1];
            &TargetEmplRcd = &arrSeed [2];
         End-If;
         &TargetNode = "";
         /* if the emplid is the owner and the owner is at the top of the matrix, then there is no supervisor */
         If All(&sTargetEmplId) Then
            If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                  &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
               Return Null;
            End-If;
            
            If All(&TargetEmplRcd) And
                  IsNumber(&TargetEmplRcd) Then
               &nTargetEmplRcd = Value(&TargetEmplRcd);
            End-If;
         End-If;
         
         If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
            /* find the position of the current person to determine if they are the starting one */
            If All(&sTargetEmplId) Then
               SQLExec("SELECT POSITION_NBR FROM PS_JOB A WHERE  EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = A.EmplID AND EMPL_RCD = A.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND A.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = A.EmplID AND D.EMPL_RCD = A.EMPL_RCD AND D.EffDt = A.EffDt) AND EMPLID = :1 AND EMPL_RCD = :2", &sTargetEmplId, &nTargetEmplRcd, &tmp_pos_nbr);
            Else
               &tmp_pos_nbr = &sTargetPosition;
            End-If;
         End-If;
         
         If (&sTargetEmplId = &recMatrixDefn.HRMH_EMPLID_START.Value And
               &nTargetEmplRcd = &recMatrixDefn.HRMH_START_EMPLRCD.Value And
               All(&sTargetEmplId)) Or
               (&recMatrixDefn.HRMH_POSN_START.Value = &tmp_pos_nbr And
                  All(&recMatrixDefn.HRMH_POSN_START.Value)) Then
            If &recMatrixDefn.HRMH_OWN_TOP.Value = "N" Then
               /*start employee is the starting point and the owner is not the top of the matrix*/
               Return Null;
            Else
               /* return owner info as supervisor */
               &rsReturn = %This.getTargetAccessType(&recMatrixDefn.HRMH_OWNER_EMPLID.Value, &recMatrixDefn.EMPL_RCD.Value, "", &sSeed);
            End-If;
         Else
            /*need to make sure that the target is part of the matrix 
              Can only do this for EMPLID as Position_nbr can not be retrieved through direct reports reports to */
            If Not %This.isMemberAccessType(&recMatrixDefn, &sTargetEmplId, String(&nTargetEmplRcd), &dAsOfDate) And
                  All(&sTargetEmplId) Then
               Return Null;
            End-If;
            
            Evaluate &recMatrixDefn.ACCESS_TYPE.Value
            When "1"
            When "7"
               If (&sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                     &nTargetEmplRcd = &recMatrixDefn.EMPL_RCD.Value And
                     All(&sTargetEmplId)) Then
                  Return Null;
               Else
                  &rsReturn = %This.getTargetAccessType(&recMatrixDefn.HRMH_OWNER_EMPLID.Value, &recMatrixDefn.EMPL_RCD.Value, "", &sSeed);
               End-If;
               Break;
            When-Other
               &DirectReports.TargetEmplid = &sTargetEmplId;
               &DirectReports.TargetERN = &nTargetEmplRcd;
               &DirectReports.TargetPosition = &sTargetPosition;
               &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
               /* check Force Group Rebuild flag and send appropriate RebuildGroup property - groupid is always owner on top
               If &recMatrixDefn.HR_DR_REFRESH_GRP.Value = "Y" Then
                  &DirectReports.RebuildGroup = True;
               Else
                  &DirectReports.RebuildGroup = False;
               End-If;*/
               &DirectReports.ShowEmptyPositions = True;
               &DirectReports.ShowIndirectIndicator = False;
               &DirectReports.ShowName = True;
               &DirectReports.LimitDrillUp = False;
               &DirectReports.IncludeTargetEmployee = False;
               &DirectReports.NavigationMethod = Value(&recMatrixDefn.ACCESS_TYPE.Value);
               rem &DirectReports.MaxFetch = %This.MaxFetch + 1;
               &DirectReports.MaxFetch = %This.MaxFetch;
               &DirectReports.GetSupervisor();
               
               &rs_supervisors = CreateRowset(Record.HR_DRPT_RS_WK);
               &DirectReports.Supervisor.CopyTo(&rs_supervisors);
               
               If None(&rs_supervisors(1).GetRecord(1).EMPLID.Value) And
                     None(&rs_supervisors(1).GetRecord(1).POSITION_NBR.Value) Then
                  &rs_supervisors = Null;
               Else
                  
                  If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
                     Local HR_DIRECT_REPORTS:DirectReportsAPI &oDirectRptsApi = create HR_DIRECT_REPORTS:DirectReportsAPI();
                     
                     /* dr api may return rows that do not report to the start emplid - remove these rows */
                     For &i = &rs_supervisors.ActiveRowCount To 1 Step - 1
                        If Not &oDirectRptsApi.ReportsTo(&recMatrixDefn.HRMH_EMPLID_START.Value, "", &rs_supervisors(&i).HR_DRPT_RS_WK.EMPLID.Value, &rs_supervisors(&i).HR_DRPT_RS_WK.EMPL_RCD.Value, %Date, "", Value(&recMatrixDefn.ACCESS_TYPE.Value), "") Then
                           &rs_supervisors.DeleteRow(&i);
                        End-If;
                     End-For;
                     
                  End-If;
                  &rsReturn = %This.setStructRowSet(%This.setStructRowSetAccessType(&rs_supervisors, &dAsOfDate, &TargetNodeLevel, &sTargetEmplId, Value(&TargetEmplRcd), &recMatrixDefn.HRMH_POSN_START.Value, ""));
               End-If;
               
            End-Evaluate;
            
         End-If;
      End-Evaluate;
   Else
      &rsReturn = Null;
   End-If;
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   &iInitialized = False;
   
   Return &rsReturn;
end-method;

/*** 
Method:  GetAllIndirectReports (Public)
Description:  Returns a list of all those who report to employees that report to the target empldi
Assumptions:  
--This method does not return any heirarchy. 
--This method Returns all levels
*/
method GetAllIndirectReports
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &TargetNodeLevel as Number, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Rowset +/
   Local Rowset &rs_indirects, &rs_1evel_rpt;
   Local number &rowcnt, &i;
   Local boolean &next_level = True;
   Local array of string &arrEmplid = CreateArrayRept("", 0);
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   
   Local Record &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return Null;
   End-If;
   
   Local array of string &arrSeed = CreateArrayRept("", 0);
   &arrSeed = %This.setSeedArray(&sSeed, &recMatrixDefn);
   Local string &sTargetEmplId = &arrSeed [1];
   Local string &TargetEmplRcd = &arrSeed [2];
   
   If None(&TargetEmplRcd) Or
         Not IsNumber(&TargetEmplRcd) Then
      &TargetEmplRcd = "0";
   End-If;
   
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      /*load rowset with all level 2 indirect reports */
      &rs_indirects = CreateRowset(Record.HRMH_MATRX_MEMB);
      &rs_indirects.Flush();
      /*Matrix Enhancement*/
      rem &rowcnt = &rs_indirects.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID in (select EMPLID from PS_HRMH_MATRX_MEMB B WHERE FILL.HRMH_MATRIX_ID = B.HRMH_MATRIX_ID AND FILL.EFFDT = B.EFFDT AND SUPERVISOR_ID = :3)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId);
      &rowcnt = &rs_indirects.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID in (select EMPLID from PS_HRMH_MATRX_MEMB B WHERE FILL.HRMH_MATRIX_ID = B.HRMH_MATRIX_ID AND FILL.EFFDT = B.EFFDT AND SUPERVISOR_ID = :3) AND START_DT <= %DateIn(:4) AND HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate);
      /*Matrix Enhancement*/
      If &rowcnt = 0 Then
         Return Null;
      Else
         For &i = 1 To &rs_indirects.ActiveRowCount
            &arrEmplid.Push(&rs_indirects(&i).HRMH_MATRX_MEMB.EMPLID.Value);
         End-For;
         &rs_1evel_rpt = CreateRowset(Record.HRMH_MATRX_MEMB);
         While &rowcnt > 0
            /* if next level has direct reports load them */
            &rs_1evel_rpt.Flush();
            /*Matrix Enhancement*/
            rem &rowcnt = &rs_1evel_rpt.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID in (:3)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &arrEmplid);
            &rowcnt = &rs_1evel_rpt.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID in (:3) AND START_DT <= %DateIn(:4) AND HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &arrEmplid, &dAsOfDate);
            /*Matrix Enhancement*/
            If &rowcnt = 0 Then
               Break;
            Else
               /* copy this level data into rowset to return and create a new array to look for the next level */
               &rs_1evel_rpt.CopyTo(&rs_indirects);
               &arrEmplid = CreateArrayRept("", 0);
               For &i = 1 To &rs_1evel_rpt.ActiveRowCount
                  &arrEmplid.Push(&rs_1evel_rpt(&i).HRMH_MATRX_MEMB.EMPLID.Value);
               End-For;
            End-If;
         End-While;
      End-If;
      If &rs_indirects <> Null Then
         /* level = &TargetNodeLevel, focus = N, type = (C) children */
         &rsReturn = %This.setStructRowSetManual(&recMatrixDefn, &rs_indirects, &TargetNodeLevel, "N", "C");
      End-If;
      Break;
   When "T"
      /* tree processing */
      Break;
   When "A"
      /* check that the emplid is a member of the matrix before returning direct reports */
      If %This.isMemberAccessType(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate) Then
         &DirectReports.TargetPosition = &recMatrixDefn.HRMH_POSN_START.Value;
         &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
         /* check Force Group Rebuild flag and send appropriate RebuildGroup property - no indirects for group id only owner as supervisor
         If &recMatrixDefn.HR_DR_REFRESH_GRP.Value = "Y" Then
            &DirectReports.RebuildGroup = True;
         Else
            &DirectReports.RebuildGroup = False;
         End-If;*/
         &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
         /* if the emplid is the owner and the owner is at the top of the matrix get the top of the reporting structure */
         If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
            If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
               &DirectReports.TargetEmplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
               &DirectReports.TargetERN = &recMatrixDefn.HRMH_START_EMPLRCD.Value;
               &rs_indirects = %This.drillDownAccessType(&recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.HRMH_EMPLID_START.Value, &recMatrixDefn.HRMH_START_EMPLRCD.Value, &dAsOfDate, True, "", "", "", "", 0, &iExcludeContWorker);
            Else
               &DirectReports.TargetEmplid = &sTargetEmplId;
               &DirectReports.TargetERN = Value(&TargetEmplRcd);
               &rs_indirects = &DirectReports.GetAllIndirectReports();
            End-If;
         End-If;
         
         If None(&rs_indirects(1).GetRecord(1).EMPLID.Value) Then
            &rs_indirects = Null;
         End-If;
      Else
         &rs_indirects = Null;
      End-If;
      &rsReturn = %This.setStructRowSet(%This.setStructRowSetAccessType(&rs_indirects, &dAsOfDate, &TargetNodeLevel, &sTargetEmplId, Value(&TargetEmplRcd), &recMatrixDefn.HRMH_POSN_START.Value, ""));
      Break;
   End-Evaluate;
   Return &rsReturn;
end-method;

/*** 
Method:  GetPeersCount (Public)
Description:  Returns a number of peers for a member.  This is a count of distinct employees, not jobs.
*/
method GetPeersCount
   /+ &MatrixId as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Number +/
   Local Record &recMatrixDefn = %This.getMatrixDefn(&MatrixId, &dAsOfDate);
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return 0;
   End-If;
   
   Local number &directs = 0;
   Local ApiObject &TargetNode;
   Local string &TargetNodeName, &sql, &SupvId;
   Local array of string &arrTreeNodes;
   Local integer &i;
   Local integer &nTargetEmplRcd;
   
   If All(&TargetEmplRcd) And
         IsNumber(&TargetEmplRcd) Then
      &nTargetEmplRcd = Value(&TargetEmplRcd);
   End-If;
   
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      /*Matrix Enhancement*/
      /*18411600*/
      <*rem SQLExec("Select COUNT(DISTINCT A.EMPLID) from PS_HRMH_MATRX_MEMB A where A.HRMH_MATRIX_ID = :1 and A.EFFDT = %DateIn(:2) and A.SUPERVISOR_ID <> ' ' and A.SUPERVISOR_ID = (select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where EMPLID = :3 and EMPL_RCD = :4)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &nTargetEmplRcd, &directs);
      SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3 and EMPL_RCD = :4", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &nTargetEmplRcd, &SupvId);
      If All(&SupvId) Then
         SQLExec("select COUNT(DISTINCT EMPLID) from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and SUPERVISOR_ID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &SupvId, &directs);
      End-If;

      /*18411600*/
      Break;*>
      SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3 and EMPL_RCD = :4 and START_DT <= %DateIn(:5) and HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &nTargetEmplRcd, &dAsOfDate, &SupvId);
      If All(&SupvId) Then
         SQLExec("select COUNT(DISTINCT EMPLID) from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and SUPERVISOR_ID = :3 and START_DT <= %DateIn(:4) and HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &SupvId, &dAsOfDate, &directs);
      End-If;
      
      Break;
      /*Matrix Enhancement*/
      
   When "T"
      /* validate the tree and starting node defined on the matrix */
      If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
         If &oTree = Null Or
               &oTreeStartNode = Null Then
            /* tree is invalid or start tree node is invalid ;*/
            %This.initializeTreeVariables();
            Return 0;
         End-If;
      End-If;
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         /* No Peers */
         &directs = 0;
      Else /* find the node and return the directs for the node*/
         /* &arrTreeNodes is an arrary of tree node names not the actual nodes */
         rem &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sTargetEmplId);
         &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAll(&sTargetEmplId, Value(&TargetEmplRcd));
         &TargetNodeName = " ";
         For &i = 1 To &arrTreeNodes.Len
            If &arrTreeNodes [&i] = &oTreeStartNode.Name Then
               /* No Peers */
               &TargetNodeName = " ";
               &directs = 0;
            Else
               If %This.isChildTreeNode(&arrTreeNodes [&i]) Then
                  &TargetNodeName = &arrTreeNodes [&i];
                  Break;
               End-If;
            End-If;
         End-For;
         If All(&TargetNodeName) Then
            &TargetNode = &oTree.FindNode(&TargetNodeName, "");
            rem &directs = &TargetNode.ChildNodeCount;
            If &TargetNode <> Null Then
               /* bug 22450536 - implements count table for performance */
               If None(&CountTblReady) Then
                  SQLExec("select 'Y' from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2)", &oTree.Name, &oTree.EffDt, &CountTblReady);
                  If &CountTblReady <> "Y" Then
                     &CountTblReady = "N";
                  End-If;
               End-If;
               If &CountTblReady = "Y" Then
                  SQLExec("select peer_count from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2) and tree_node = :3", &oTree.Name, &oTree.EffDt, &TargetNodeName, &directs);
               Else
                  SQLExec(SQL.HRCD_REPORTS_COUNT_PEERS, &oTree.Name, &oTree.EffDt, &TargetNodeName, &directs);
               End-If;
            End-If;
         End-If;
      End-If;
      %This.initializeTreeVariables();
      Break;
   When "A"
      /* if the owner is passed and is over a hierarchy with a starting emplid that is not the owner there is only one direct */
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         /* No Peers */
         &directs = 0;
      Else
         If &sTargetEmplId = &recMatrixDefn.HRMH_EMPLID_START.Value Then
            /* No Peers */
            &directs = 0;
         Else
            &DirectReports.TargetEmplid = &sTargetEmplId;
            &DirectReports.TargetERN = &nTargetEmplRcd;
            &DirectReports.GroupId = "";
            &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
            Evaluate &recMatrixDefn.ACCESS_TYPE.Value
            When 1
               &DirectReports.TargetEmplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
               &DirectReports.TargetERN = &recMatrixDefn.HRMH_START_EMPLRCD.Value;
               &directs = &DirectReports.GetPeersCountDistinctEmplId();
               Break;
            When 7
               &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
               &directs = &DirectReports.GetPeersCountDistinctEmplId();
               Break;
            When-Other
               /* process to find counts of peers */
               &directs = &DirectReports.GetPeersCountDistinctEmplId();
            End-Evaluate;
         End-If;
      End-If;
      Break;
   End-Evaluate;
   
   Return &directs;
end-method;

/*** 
Method:  GetDirectReportsCountPosition (Public)
Description:  Returns a number of direct reports for a lead or owner.  This is a count of distinct employees, not jobs.
*/
method GetDirectReportsCountPosition
   /+ &MatrixId as String, +/
   /+ &sTargetPosition as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Number +/
   Local Record &recMatrixDefn = %This.getMatrixDefn(&MatrixId, &dAsOfDate);
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return 0;
   End-If;
   
   Local number &directs = 0;
   &DirectReports.TargetPosition = &sTargetPosition;
   &DirectReports.TargetEmplid = " ";
   &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
   &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
   /* if the owner is passed and is over a hierarchy with a starting emplid that is not the owner there is only one direct */
   
   If &recMatrixDefn.ACCESS_TYPE.Value = 4 Or
         &recMatrixDefn.ACCESS_TYPE.Value = 5 Or
         &recMatrixDefn.ACCESS_TYPE.Value = 6 Then
      &directs = &DirectReports.GetDirectReportsCount();
      Return &directs;
   Else
      Return 0;
   End-If;
   
end-method;

/*** 
Method:  GetDirectReportsCount (Public)
Description:  Returns a number of direct reports for a lead or owner.  This is a count of distinct employees, not jobs.
*/
method GetDirectReportsCount
   /+ &MatrixId as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Number +/
   Local Record &recMatrixDefn = %This.getMatrixDefn(&MatrixId, &dAsOfDate);
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return 0;
   End-If;
   
   Local number &directs = 0;
   Local ApiObject &TargetNode;
   Local string &TargetNodeName, &sql;
   Local array of string &arrTreeNodes;
   Local integer &i;
   Local integer &nTargetEmplRcd;
   
   If All(&TargetEmplRcd) And
         IsNumber(&TargetEmplRcd) Then
      &nTargetEmplRcd = Value(&TargetEmplRcd);
   End-If;
   
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      /*Matrix Enhancement*/
      rem SQLExec("Select COUNT(DISTINCT EMPLID) from PS_HRMH_MATRX_MEMB WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &directs);
      SQLExec("Select COUNT(DISTINCT EMPLID) from PS_HRMH_MATRX_MEMB WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID = :3 AND START_DT <= %DateIn(:4) AND HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate, &directs);
      /*Matrix Enhancement*/
      Break;
   When "T"
      /* validate the tree and starting node defined on the matrix */
      If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
         If &oTree = Null Or
               &oTreeStartNode = Null Then
            /* tree is invalid or start tree node is invalid ;*/
            Return 0;
         End-If;
      End-If;
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         /* directs are a count of the child nodes */
         rem &directs = &oTreeStartNode.ChildNodeCount;
         /* bug 22450536 - implements the tree count table for performance */
         If None(&CountTblReady) Then
            SQLExec("select distinct 'Y' from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2)", &oTree.Name, &oTree.EffDt, &CountTblReady);
            If &CountTblReady <> "Y" Then
               &CountTblReady = "N";
            End-If;
         End-If;
         If &CountTblReady = "Y" Then
            SQLExec("select dr_count from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2) and tree_node = :3", &oTree.Name, &oTree.EffDt, &oTreeStartNode.Name, &directs);
            
         Else
            SQLExec(SQL.HRCD_REPORTS_COUNT_DIRECTS, &oTree.Name, &oTree.EffDt, &oTreeStartNode.Name, &directs);
         End-If;
      Else /* find the node and return the directs for the node*/
         /* &arrTreeNodes is an arrary of tree node names not the actual nodes */
         rem &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sTargetEmplId);
         &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAll(&sTargetEmplId, Value(&TargetEmplRcd));
         &TargetNodeName = " ";
         For &i = 1 To &arrTreeNodes.Len
            If &arrTreeNodes [&i] = &oTreeStartNode.Name Then
               &TargetNodeName = &arrTreeNodes [&i];
               Break;
            Else
               If %This.isChildTreeNode(&arrTreeNodes [&i]) Then
                  &TargetNodeName = &arrTreeNodes [&i];
                  Break;
               End-If;
            End-If;
         End-For;
         If All(&TargetNodeName) Then
            &TargetNode = &oTree.FindNode(&TargetNodeName, "");
            rem &directs = &TargetNode.ChildNodeCount;
            If &TargetNode <> Null Then
               /* bug 22450536 - implements tree count table for performance */
               If None(&CountTblReady) Then
                  SQLExec("select distinct 'Y' from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2)", &oTree.Name, &oTree.EffDt, &CountTblReady);
                  If &CountTblReady <> "Y" Then
                     &CountTblReady = "N";
                  End-If;
               End-If;
               If &CountTblReady = "Y" Then
                  SQLExec("select dr_count from ps_HRCD_TREE_COUNT where tree_name = :1 and effdt = %datein(:2) and tree_node = :3", &oTree.Name, &oTree.EffDt, &TargetNodeName, &directs);
               Else
                  SQLExec(SQL.HRCD_REPORTS_COUNT_DIRECTS, &oTree.Name, &oTree.EffDt, &TargetNodeName, &directs);
               End-If;
            End-If;
         End-If;
      End-If;
      %This.initializeTreeVariables();
      Break;
   When "A"
      &DirectReports.TargetEmplid = &sTargetEmplId;
      &DirectReports.TargetERN = &nTargetEmplRcd;
      &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
      
      /* if the owner is passed and is over a hierarchy with a starting emplid that is not the owner there is only one direct */
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
         If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
            
            If &recMatrixDefn.ACCESS_TYPE.Value = 7 Then
               &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
               &DirectReports.IncludeTargetEmployee = False;
            Else
               If &recMatrixDefn.ACCESS_TYPE.Value = 1 Then
                  /* count of those in the dept security table with the same rowsecclass as the starting emplid */
                  If &recMatrixDefn.HRMH_EMPLID_START.Value = %EmployeeId Then
                     SQLExec(SQL.HRMH_COUNT_AC1_OPRID, %UserId, &dAsOfDate, &recMatrixDefn.HRMH_EMPLID_START.Value, %This.getPerOrgParm(), &directs); /*16519417*/
                  Else
                     SQLExec(SQL.HRMH_COUNT_AC1, &recMatrixDefn.HRMH_EMPLID_START.Value, &dAsOfDate, &recMatrixDefn.HRMH_EMPLID_START.Value, %This.getPerOrgParm(), &directs); /*16519417*/
                  End-If;
                  Return &directs;
               Else
                  If &recMatrixDefn.HRMH_OWNER_EMPLID.Value <> &recMatrixDefn.HRMH_EMPLID_START.Value Then
                     If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
                        /* the owner is at top and only one emplid reports to the owner */
                        Return 1;
                     Else
                        /* return the count of people in the starting position currently */
                        If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
                           /*16519417*/
                           rem &sql = "SELECT COUNT(DISTINCT EMPLID) FROM PS_HR_DIRECT_REP_" | &recMatrixDefn.ACCESS_TYPE.Value | " WHERE REPORTS_TO = :1 AND HR_DR_LEVEL = 1 AND DRILL_DOWN_FLAG = 'Y' AND EMPL_STATUS IN ('A','L','P','W')";
                           /* 20471970 remove drill down flag to allow for empty positions to be found */
                           &sql = "SELECT COUNT(DISTINCT EMPLID) FROM PS_HR_DR_VW_" | &recMatrixDefn.ACCESS_TYPE.Value | " WHERE POSITION_NBR=:1 AND TREE_LEVEL_NUM=1 AND HR_STATUS='A'" | %This.getPerOrgCondition("");
                           /*16519417*/
                           SQLExec(&sql, &recMatrixDefn.HRMH_POSN_START.Value, &directs);
                           
                           Return &directs;
                        End-If;
                     End-If;
                  End-If;
               End-If;
            End-If;
         End-If;
      Else
         If &recMatrixDefn.ACCESS_TYPE.Value = 7 Or
               &recMatrixDefn.ACCESS_TYPE.Value = 1 Then
            If &recMatrixDefn.ACCESS_TYPE.Value = 1 And
                  &sTargetEmplId = &recMatrixDefn.HRMH_EMPLID_START.Value Then
               /* count of those in the dept security table with the same rowsecclass as the starting emplid */
               If &recMatrixDefn.HRMH_EMPLID_START.Value = %EmployeeId Then
                  SQLExec(SQL.HRMH_COUNT_AC1_OPRID, %UserId, &dAsOfDate, &recMatrixDefn.HRMH_EMPLID_START.Value, %This.getPerOrgParm(), &directs); /*16519417*/
               Else
                  SQLExec(SQL.HRMH_COUNT_AC1, &recMatrixDefn.HRMH_EMPLID_START.Value, &dAsOfDate, &recMatrixDefn.HRMH_EMPLID_START.Value, %This.getPerOrgParm(), &directs); /*16519417*/
               End-If;
               Return &directs;
            Else
               Return 0;
            End-If;
         End-If;
      End-If;
      /* check that the emplid is a member of the matrix before returning direct reports */
      If %This.isMemberAccessType(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate) Then
         &DirectReports.TargetPosition = &recMatrixDefn.HRMH_POSN_START.Value;
         &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
         /* don't count empty positions so reseting the property and then back after the count */
         REM &DirectReports.ShowEmptyPositions = False;
         &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
         REM WriteToLog(%ApplicationLogFence_Level1, "Matrix id " | &MatrixId | ", matrix access type " | &recMatrixDefn.ACCESS_TYPE.Value | " Access type " | &DirectReports.NavigationMethod | ", super " | &DirectReports.TargetEmplid | ", position " | &DirectReports.TargetPosition | ", cnt " | &directs);
         rem &directs = &DirectReports.GetDirectReportsCount();
         &DirectReports.ShowEmptyPositions = True;
         &directs = &DirectReports.GetDirectReportsCountDistinctEmplId();
         &DirectReports.ShowEmptyPositions = True;
      End-If;
      
   End-Evaluate;
   Return &directs;
end-method;

/*** 
Method:  GetInDirectReportsCount (Public)
Description:  Returns a number of indirect reports for a lead or owner.
*/
method GetInDirectReportsCount
   /+ &MatrixId as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Number +/
   Local Record &recMatrixDefn = %This.getMatrixDefn(&MatrixId, &dAsOfDate);
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return 0;
   End-If;
   
   Local number &inDirects = 0;
   Local Rowset &rs_indirects;
   Local ApiObject &TargetNode;
   Local string &TargetNodeName, &sSeed;
   Local array of string &arrTreeNodes;
   Local integer &i;
   Local integer &nTargetEmplRcd;
   
   If All(&TargetEmplRcd) And
         IsNumber(&TargetEmplRcd) Then
      &nTargetEmplRcd = Value(&TargetEmplRcd);
   End-If;
   
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      /* manual matrix always has owner as top of matrix */
      /* if targetemplid = owner, then all other members not reporting to owner in HRMH_MATRIX_MEMB are indirects */
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
         /*Matrix Enhancement*/
         rem SQLExec("Select Count(*) from PS_HRMH_MATRX_MEMB WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID <> :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &inDirects);
         SQLExec("Select Count(*) from PS_HRMH_MATRX_MEMB WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND SUPERVISOR_ID <> :3 AND START_DT <= %DateIn(:4) AND HRMH_MEMBER_STATUS = 'A' ", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate, &inDirects);
         /*Matrix Enhancement*/
      Else
         &sSeed = &sTargetEmplId | &iOrgViewerDelim | &TargetEmplRcd;
         &rs_indirects = %This.GetAllIndirectReports(&recMatrixDefn.HRMH_MATRIX_ID.Value, &sSeed, 0, &dAsOfDate, False);
         If &rs_indirects = Null Then
            &inDirects = 0
         Else
            &inDirects = &rs_indirects.ActiveRowCount;
         End-If;
      End-If;
      Break;
   When "T"
      /* validate the tree and starting node defined on the matrix */
      If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
         If &oTree = Null Or
               &oTreeStartNode = Null Then
            /* tree is invalid or start tree node is invalid ;*/
            Return 0;
         End-If;
      End-If;
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         /* indirects are a count of the all child nodes - directs*/
         &inDirects = &oTreeStartNode.AllChildNodeCount - &oTreeStartNode.ChildNodeCount;
      Else
         /* find the requested node and count down from there */
         /* &arrTreeNodes is an arrary of tree node names not the actual nodes */
         &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sTargetEmplId);
         &TargetNodeName = " ";
         For &i = 1 To &arrTreeNodes.Len
            If &arrTreeNodes [&i] = &oTreeStartNode.Name Then
               &TargetNodeName = &arrTreeNodes [&i];
               Break;
            Else
               If %This.isChildTreeNode(&arrTreeNodes [&i]) Then
                  &TargetNodeName = &arrTreeNodes [&i];
                  Break;
               End-If;
            End-If;
         End-For;
         If All(&TargetNodeName) Then
            &TargetNode = &oTree.FindNode(&TargetNodeName, "");
            &inDirects = &TargetNode.AllChildNodeCount - &TargetNode.ChildNodeCount;
         End-If;
      End-If;
      %This.initializeTreeVariables();
      Break;
   When "A"
      /* type 1 and 7 only have one dimentsion so return 0*/
      If &recMatrixDefn.ACCESS_TYPE.Value = 1 Or
            &recMatrixDefn.ACCESS_TYPE.Value = 7 Then
         Return 0;
      End-If;
      /* check that the emplid is a member of the matrix before returning direct reports */
      
      &DirectReports.TargetPosition = &recMatrixDefn.HRMH_POSN_START.Value;
      &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
      &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
      &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
      
      /* if the emplid is the owner and the owner is at the top of the matrix get the entire reporting structure */
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         &DirectReports.TargetEmplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
         &DirectReports.TargetERN = &recMatrixDefn.HRMH_START_EMPLRCD.Value;
      Else
         &DirectReports.TargetEmplid = &sTargetEmplId;
         &DirectReports.TargetERN = &nTargetEmplRcd;
      End-If;
      rem &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
      /* don't count empty positions so reseting the property and then back after the count */
      &DirectReports.ShowEmptyPositions = False;
      
      If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
         /* get everyone with the position and run them through the count method */
         Local Rowset &rs_startempl = CreateRowset(Record.JOB);
         &rs_startempl.Fill("WHERE  EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = FILL.EmplID AND EMPL_RCD = FILL.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND FILL.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = FILL.EmplID AND D.EMPL_RCD = FILL.EMPL_RCD AND D.EffDt = FILL.EffDt) AND POSITION_NBR = :1", &recMatrixDefn.HRMH_POSN_START.Value);
         
         For &i = 1 To &rs_startempl.ActiveRowCount
            &DirectReports.TargetEmplid = &rs_startempl(&i).JOB.EMPLID.Value;
            &DirectReports.TargetERN = &rs_startempl(&i).JOB.EMPL_RCD.Value;
            &inDirects = &inDirects + &DirectReports.GetInDirectReportsCount();
         End-For;
      Else
         &inDirects = &DirectReports.GetInDirectReportsCount();
      End-If;
      &DirectReports.ShowEmptyPositions = True;
   End-Evaluate;
   Return &inDirects;
end-method;

/*** 
Method:  GetAllReportsCount (Public)
Description:  Returns a number of direct and indirect reports for a lead or owner.
*/
method GetAllReportsCount
   /+ &MatrixId as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Number +/
   Local number &reports = 0;
   Local number &indirects;
   Local string &cur_super;
   Local Rowset &supers;
   Local Record &recMatrixDefn = %This.getMatrixDefn(&MatrixId, &dAsOfDate);
   Local ApiObject &TargetNode;
   Local string &TargetNodeName;
   Local array of string &arrTreeNodes;
   Local integer &i;
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return 0;
   End-If;
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      &reports = %This.GetDirectReportsCount(&MatrixId, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate);
      &reports = &reports + %This.GetInDirectReportsCount(&MatrixId, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate);
      Break;
   When "T"
      /* validate the tree and starting node defined on the matrix */
      
      If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
         If &oTree = Null Or
               &oTreeStartNode = Null Then
            /* tree is invalid or start tree node is invalid ;*/
            Return 0;
         End-If;
      End-If;
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
         /* count for the entire tree from the starting node */
         &reports = &oTreeStartNode.AllChildNodeCount;
      Else
         /* &arrTreeNodes is an arrary of tree node names not the actual nodes */
         &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sTargetEmplId);
         &TargetNodeName = " ";
         For &i = 1 To &arrTreeNodes.Len
            If &arrTreeNodes [&i] = &oTreeStartNode.Name Then
               &TargetNodeName = &arrTreeNodes [&i];
               Break;
            Else
               If %This.isChildTreeNode(&arrTreeNodes [&i]) Then
                  &TargetNodeName = &arrTreeNodes [&i];
                  Break;
               End-If;
            End-If;
         End-For;
         If All(&TargetNodeName) Then
            &TargetNode = &oTree.FindNode(&TargetNodeName, "");
            &reports = &TargetNode.AllChildNodeCount;
         End-If;
      End-If;
      %This.initializeTreeVariables();
      Break;
   When "A"
      /* check that the emplid is a member of the matrix before returning direct reports */
      Local string &emplid, &empl_rcd;
      
      &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
      &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
      &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
      
      &emplid = &sTargetEmplId;
      If All(&TargetEmplRcd) Then
         &empl_rcd = &TargetEmplRcd;
      End-If;
      /* if the emplid is the owner and the owner is at the top of the matrix get the entire reporting structure */
      If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
         If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
            &emplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
            &empl_rcd = &recMatrixDefn.HRMH_START_EMPLRCD.Value;
            &reports = 1;
         End-If;
      Else /* if this is group id or dept security tbl and not the owner there are no reports */
         If &recMatrixDefn.ACCESS_TYPE.Value = 1 Or
               &recMatrixDefn.ACCESS_TYPE.Value = 7 Then
            Return 0
         End-If;
      End-If;
      If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
         /* get everyone with the position and run them through the count method */
         Local Rowset &rs_startempl = CreateRowset(Record.JOB);
         &rs_startempl.Fill("WHERE  EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = FILL.EmplID AND EMPL_RCD = FILL.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND FILL.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = FILL.EmplID AND D.EMPL_RCD = FILL.EMPL_RCD AND D.EffDt = FILL.EffDt) AND POSITION_NBR = :1", &recMatrixDefn.HRMH_POSN_START.Value);
         
         For &i = 1 To &rs_startempl.ActiveRowCount
            &reports = &reports + %This.getTotCountforEmplidAccessType(&rs_startempl(&i).JOB.EMPLID.Value, &rs_startempl(&i).JOB.EMPL_RCD.Value);
         End-For;
      Else
         &reports = %This.getTotCountforEmplidAccessType(&emplid, Value(&empl_rcd));
      End-If;
   End-Evaluate;
   Return &reports;
end-method;

/* method to get the total directs through access type. Needed because when the start is a position this needs to be done multiple times */
method getTotCountforEmplidAccessType
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as Integer +/
   /+ Returns Number +/
   
   Local number &reports, &indirects;
   &DirectReports.TargetEmplid = &sEmplId;
   &DirectReports.TargetERN = &TargetEmplRcd;
   /* don't count empty positions so reseting the property and then back after the count */
   &DirectReports.ShowEmptyPositions = False;
   &DirectReports.ExcludeContingentWorker = &iExcludeContWorker; /*16519417*/
   &reports = &DirectReports.GetDirectReportsCount();
   rem WriteToLog(%ApplicationLogFence_Level1, "GetAllReportsCount : " | &sTargetEmplId | " - Directs count " | &reports);
   /* type 1 and 7 only have one dimentsion so 0 indirects*/
   If &DirectReports.NavigationMethod = 1 Or
         &DirectReports.NavigationMethod = 7 Then
      &indirects = 0;
   Else
      &indirects = &DirectReports.GetInDirectReportsCount();
   End-If;
   rem WriteToLog(%ApplicationLogFence_Level1, "GetAllReportsCount : " | &sTargetEmplId | " - Indirects count " | &indirects);
   
   &reports = &reports + &indirects;
   &DirectReports.ShowEmptyPositions = True;
   Return &reports;
end-method;

method GetExportNumbers
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sParentOfSeed as String +/
   /+ Returns Number +/
   Local number &total, &siblingsNumber;
   Local Record &recMxDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   Local array of string &arrSeed = CreateArrayRept("", 0);
   Local array of string &arrParentOfSeed = CreateArrayRept("", 0);
   If &recMxDefn = Null Then
      Return 0;
   End-If;
   
   &arrSeed = %This.setSeedArray(&sSeed, &recMxDefn);
   /* parse seed value's parent node */
   If All(&sParentOfSeed) Then
      &arrParentOfSeed = Split(&sParentOfSeed, &iOrgViewerDelim);
   End-If;
   
   &total = 1;
   If &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      If &arrSeed.Len = 1 Then
         &arrSeed.Push("0");
      End-If;
      If &arrSeed.Len = 2 And
            Not IsNumber(&arrSeed [2]) Then
         /*The input is for Position*/
         rem WriteToLog(%ApplicationLogFence_Level1, "GetExportNumbers: calling GetAllReportsCount with no emplid matrixid  " | &sMatrixID);
         &total = &total + %This.GetAllReportsCount(&sMatrixID, "", "", &dAsOfDate);
      Else
         &total = &total + %This.GetAllReportsCount(&sMatrixID, &arrSeed [1], &arrSeed [2], &dAsOfDate);
         rem WriteToLog(%ApplicationLogFence_Level1, "GetExportNumbers: calling GetAllReportsCount  emplid " | &arrSeed [1] | ", matrixid  " | &sMatrixID);
      End-If;
      rem WriteToLog(%ApplicationLogFence_Level1, "GetExportNumbers: GetAllReportsCount returns " | &total);
      rem Start from root;
      If Not &iStartedFromOwner And
            &iLimitDrillUp And
            &recMxDefn.HRMH_OWN_TOP.Value = "Y" Then
         &total = &total + 1;
      Else
         If &bShowSiblings And
               Not (&arrParentOfSeed.Len = 0 Or
                  None(&arrParentOfSeed [1]) Or
                  Not IsNumber(&arrParentOfSeed [2])) Then
            &siblingsNumber = %This.GetDirectReportsCount(&sMatrixID, &arrParentOfSeed [1], &arrParentOfSeed [2], &dAsOfDate);
            &total = &total + &siblingsNumber;
         End-If;
      End-If;
   End-If;
   Return &total;
end-method;

method hasChildren
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sParentOfSeed as String +/
   /+ Returns Boolean +/
   
   %This.initializeClassVariables();
   &iInitialized = True;
   
   Local Record &recMxDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMxDefn = Null Then
      Return False;
   End-If;
   
   
   rem Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local array of string &arrSeed = CreateArrayRept("", 0);
   &arrSeed = %This.setSeedArray(&sSeed, &recMxDefn);
   
   Local array of string &arrParentOfSeed = CreateArrayRept("", 0);
   
   /* parse seed value's parent node */
   If All(&sParentOfSeed) Then
      &arrParentOfSeed = Split(&sParentOfSeed, &iOrgViewerDelim);
   End-If;
   
   If &arrParentOfSeed.Len = 0 Or
         None(&arrParentOfSeed [1]) Or
         (&arrParentOfSeed.Len > 1 And
            Not IsNumber(&arrParentOfSeed [2])) Then
      &arrParentOfSeed = CreateArrayRept("", 0);
      &arrParentOfSeed.Push("");
      &arrParentOfSeed.Push("0");
   End-If;
   
   If &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      Evaluate &recMxDefn.HRMH_SOURCE.Value
      When "M"
         If &arrSeed.Len = 2 Then
            /* manual */
            Return %This.isLeaderManual(&recMxDefn, &arrSeed [1]);
         Else
            Return False
         End-If;
         Break;
      When "A" /* access type */
         If &arrSeed.Len = 2 Then
            Evaluate &arrSeed [2]
            When "P"
               /*When "Field.POSITION_NBR"*/
               Return %This.hasChildrenAccessType(&recMxDefn.ACCESS_TYPE.Value, "", 0, &dAsOfDate, &bShowSiblings, &arrSeed [1], "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
               Break;
               /*When "Field.GB_GROUP_ID"
                  Return %This.hasChildrenAccessType(&recMxDefn.ACCESS_TYPE.Value, &recMxDefn.HRMH_OWNER_EMPLID.Value, &recMxDefn.EMPL_RCD.Value, &dAsOfDate, &bShowSiblings, "", &arrSeed [1], "");
                  Break;*/
            When-Other
               If IsNumber(&arrSeed [2]) Then
                  /* this is manually set false for Access Type is 7 and 1 */
                  If &recMxDefn.ACCESS_TYPE.Value = "7" /*Or
                        &recMxDefn.ACCESS_TYPE.Value = "1"*/ Then
                     Return False;
                     rem Return %This.hasChildrenAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", &recMxDefn.GB_GROUP_ID.Value, "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]));
                  Else
                     Return %This.hasChildrenAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                  End-If;
               Else
                  Return False;
               End-If;
            End-Evaluate;
         End-If;
         Break;
      When "T" /* tree */
         Return %This.hasChildrenTree(&recMxDefn.TREE_NAME.Value, &arrSeed [1], &dAsOfDate, &bShowSiblings);
         Break;
      When-Other
         /* exception */
         Return False;
      End-Evaluate;
      
   Else
      Return False;
   End-If;
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   &iInitialized = False;
   
   Return False;
end-method;

method drillDown
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sParentOfSeed as String +/
   /+ Returns Rowset +/
   
   %This.initializeClassVariables();
   &iInitialized = True;
   
   Local Record &recMxDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMxDefn = Null Then
      Return Null;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local array of string &arrSeed = CreateArrayRept("", 0);
   Local array of string &arrParentOfSeed = CreateArrayRept("", 0);
   
   &arrSeed = %This.setSeedArray(&sSeed, &recMxDefn);
   
   /* parse seed value's parent node */
   If All(&sParentOfSeed) Then
      &arrParentOfSeed = Split(&sParentOfSeed, &iOrgViewerDelim);
   End-If;
   
   If &arrParentOfSeed.Len = 0 Or
         None(&arrParentOfSeed [1]) Or
         (&arrParentOfSeed.Len > 1 And
            Not IsNumber(&arrParentOfSeed [2])) Then
      &arrParentOfSeed = CreateArrayRept("", 0);
      &arrParentOfSeed.Push("");
      &arrParentOfSeed.Push("0");
   End-If;
   
   If &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      Evaluate &recMxDefn.HRMH_SOURCE.Value
      When "M"
         If &arrSeed.Len = 2 Then
            /* manual */
            &rsReturn = %This.drillDownManual(&recMxDefn, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, 0);
            
            If &rsReturn <> Null Then
               &rsReturn = %This.setStructRowSetManual(&recMxDefn, &rsReturn, 3, "N", "C");
            End-If;
         Else
            Return Null
         End-If;
         Break;
      When "A" /* access type */
         If &arrSeed.Len = 2 Then
            /* owner in */
            If %This.isOwnerAccessType(&recMxDefn, &arrSeed [1], &arrSeed [2], &sSeed) Then
               If &recMxDefn.ACCESS_TYPE.Value = "7" Then
                  &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", &recMxDefn.GB_GROUP_ID.Value, "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
               Else
                  If All(&recMxDefn.HRMH_POSN_START.Value) Then
                     Local string &position_nbr;
                     SQLExec("SELECT DISTINCT POSITION_NBR FROM PS_HR_DIRECT_REP_" | &recMxDefn.ACCESS_TYPE.Value | " WHERE EMPLID = '" | &recMxDefn.HRMH_OWNER_EMPLID.Value | "' AND EMPL_RCD = '" | &recMxDefn.EMPL_RCD.Value | "'", &position_nbr);
                     If All(&position_nbr) And
                           &position_nbr <> &recMxDefn.HRMH_POSN_START.Value Then
                        /* the starting position is not the owners position */
                        &rsReturn = %This.getTargetAccessType("", 0, &recMxDefn.HRMH_POSN_START.Value, &sSeed);
                        rem WriteToLog(%ApplicationLogFence_Level1, "drillDown: start pos emplid " | &rsReturn(1).HR_OC_NODE_WRK.EMPLID.Value);
                     Else
                        &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, "", 0, &dAsOfDate, &bShowSiblings, &recMxDefn.HRMH_POSN_START.Value, "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                     End-If;
                  Else
                     &rsReturn = %This.getTargetAccessType(&recMxDefn.HRMH_EMPLID_START.Value, &recMxDefn.HRMH_START_EMPLRCD.Value, "", &sSeed);
                  End-If;
               End-If;
               Break;
               /* owner in */
            Else
               Evaluate &arrSeed [2]
               When "P"
                  /*When "Field.POSITION_NBR"*/
                  &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, "", 0, &dAsOfDate, &bShowSiblings, &arrSeed [1], "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                  Break;
                  /*When "Field.GB_GROUP_ID"
                  &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, &recMxDefn.HRMH_OWNER_EMPLID.Value, &recMxDefn.EMPL_RCD.Value, &dAsOfDate, &bShowSiblings, "", &arrSeed [1], "");
                  Break;*/
               When-Other
                  If IsNumber(&arrSeed [2]) Then
                     If &recMxDefn.ACCESS_TYPE.Value = "7" Then
                        Return Null;
                     Else
                        &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                     End-If;
                     rem &rsReturn = %This.drillDownAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", "", "");
                  Else
                     Return Null;
                  End-If;
               End-Evaluate;
            End-If;
         End-If;
         Break;
      When "T" /* tree */
         If %This.isOwnerTree(&recMxDefn, &sSeed) Then
            &rsReturn = %This.getTargetTree(&recMxDefn.TREE_NAME.Value, &recMxDefn.TREE_NODE_START.Value, &dAsOfDate, &bShowSiblings, 1);
         Else
            &rsReturn = %This.drillDownTree(&recMxDefn.TREE_NAME.Value, &arrSeed [1], &dAsOfDate, &bShowSiblings, 1);
         End-If;
         Break;
      When-Other
         /* exception */
         Return Null;
      End-Evaluate;
   Else
      Return Null;
   End-If;
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   &iInitialized = False;
   
   Return &rsReturn;
end-method;





/*** 
Method:  getMatrix3LvlChart (Public)
Description:  Returns an org chart structure as a rowset of nodes.
*/
method getMatrix3LvlChart
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sParentOfSeed as String, +/
   /+ &bIncludeBreadcrumbs as Boolean, +/
   /+ &arrDataPath as Array of String +/
   /+ Returns Rowset +/
   %This.initializeClassVariables();
   &iInitialized = True;
   Local Record &recMxDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMxDefn = Null Then
      Return Null;
   End-If;
   
   Local boolean &bSetBreadcrumbs = &bIncludeBreadcrumbs;
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local array of string &arrSeed = CreateArrayRept("", 0);
   Local array of string &arrParentOfSeed = CreateArrayRept("", 0);
   
   &arrSeed = %This.setSeedArray(&sSeed, &recMxDefn);
   
   /* parse seed value's parent node */
   If All(&sParentOfSeed) Then
      /* application provided a parent node */
      &arrParentOfSeed = Split(&sParentOfSeed, &iOrgViewerDelim);
   Else
      /* use abn data path to get parent node */
      If &arrDataPath <> Null Then
         If &arrDataPath.Len > 1 Then
            &arrParentOfSeed = Split(&arrDataPath [&arrDataPath.Len - 1], &iOrgViewerDelim);
         End-If;
      End-If;
   End-If;
   
   If &arrParentOfSeed.Len = 0 Or
         None(&arrParentOfSeed [1]) Or
         (&arrParentOfSeed.Len > 1 And
            Not IsNumber(&arrParentOfSeed [2])) Then
      &arrParentOfSeed = CreateArrayRept("", 0);
      /*12989132*/
      rem &arrParentOfSeed.Push("");
      rem &arrParentOfSeed.Push("0");
      If &recMxDefn.ACCESS_TYPE.Value = "7" Or
            &recMxDefn.ACCESS_TYPE.Value = "1" Then
         &arrParentOfSeed.Push(&recMxDefn.HRMH_OWNER_EMPLID.Value);
         &arrParentOfSeed.Push(&recMxDefn.EMPL_RCD.Value);
      Else
         &arrParentOfSeed.Push("");
         &arrParentOfSeed.Push("0");
      End-If;
      /*12989132*/
   End-If;
   
   /*12989132*/
   If &recMxDefn.ACCESS_TYPE.Value = "7" Or
         &recMxDefn.ACCESS_TYPE.Value = "1" Then
      &bSetBreadcrumbs = False;
   End-If;
   /*12989132*/
   
   If &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      
      /* owner in */
      If &arrSeed.Len = 2 And
            IsNumber(&arrSeed [2]) And
            &arrSeed [1] = &recMxDefn.HRMH_OWNER_EMPLID.Value And
            &arrSeed [2] = &recMxDefn.EMPL_RCD.Value And /*13687681*/
            &recMxDefn.HRMH_OWN_TOP.Value = "Y" /*13687681*/ Then
         &arrSeed = %This.setSeedArray("", &recMxDefn);
         &bSetBreadcrumbs = False;
      End-If;
      /* end of owner in */
      
      Evaluate &recMxDefn.HRMH_SOURCE.Value
      When "M" /* manual */
         If &arrSeed.Len = 2 Then
            &rsReturn = %This.get3LvlChartManual(&recMxDefn, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, False, &bSetBreadcrumbs, &arrDataPath);
         Else
            Return Null
         End-If;
         Break;
         
      When "A" /* access type */
         
         Local boolean &bPosnStart = False;
         If (&recMxDefn.ACCESS_TYPE.Value = "4" Or
               &recMxDefn.ACCESS_TYPE.Value = "5" Or
               &recMxDefn.ACCESS_TYPE.Value = "6") And
               None(&recMxDefn.HRMH_EMPLID_START.Value) And
               All(&recMxDefn.HRMH_POSN_START.Value) Then
            rem &bSetBreadcrumbs = False;
            &bPosnStart = True;
         End-If;
         
         
         If &arrSeed.Len = 2 Then
            Evaluate &arrSeed [2]
            When "P"
               If &arrSeed [1] = &recMxDefn.HRMH_POSN_START.Value Then
                  &iLimitDrillUp = True;
                  &bSetBreadcrumbs = False;
               End-If;
               
               &rsReturn = %This.get3LvlChartAccessType(&recMxDefn.ACCESS_TYPE.Value, "", 0, &dAsOfDate, &bShowSiblings, &arrSeed [1], "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &bSetBreadcrumbs, &recMxDefn.HRMH_EMPLID_START.Value, &recMxDefn.HRMH_START_EMPLRCD.Value, &arrDataPath, False, &recMxDefn.HRMH_POSN_START.Value, &iExcludeContWorker);
               Break;
            When-Other
               If IsNumber(&arrSeed [2]) Then
                  
                  If &recMxDefn.ACCESS_TYPE.Value = "7" Then
                     Local boolean &bGrpRefresh;
                     If &recMxDefn.HR_DR_REFRESH_GRP.Value = "Y" Then
                        &bGrpRefresh = True;
                     End-If;
                     /*12989132*/
                     rem &rsReturn = %This.get3LvlChartAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", &recMxDefn.GB_GROUP_ID.Value, "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &bSetBreadcrumbs, &recMxDefn.HRMH_EMPLID_START.Value, &recMxDefn.HRMH_START_EMPLRCD.Value, &arrDataPath, &bGrpRefresh, "");
                     &rsReturn = %This.get3LvlChartAccessType("7", &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", &recMxDefn.GB_GROUP_ID.Value, "", &recMxDefn.HRMH_OWNER_EMPLID.Value, &recMxDefn.EMPL_RCD.Value, &bSetBreadcrumbs, &recMxDefn.HRMH_OWNER_EMPLID.Value, &recMxDefn.EMPL_RCD.Value, &arrDataPath, &bGrpRefresh, "", &iExcludeContWorker);
                     /*12989132*/
                     
                  Else
                     
                     If &bPosnStart Then
                        Local string &sExists;
                        SQLExec(SQL.HR_POSN_ACTIVE_INCUMBENT_TEST, &recMxDefn.HRMH_POSN_START.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &sExists);
                        If &sExists = "Y" Then
                           /* requested node is an incumbent of the seed position */
                           &iLimitDrillUp = True;
                           &bSetBreadcrumbs = False;
                        End-If;
                     End-If;
                     
                     &rsReturn = %This.get3LvlChartAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &bSetBreadcrumbs, &recMxDefn.HRMH_EMPLID_START.Value, &recMxDefn.HRMH_START_EMPLRCD.Value, &arrDataPath, False, &recMxDefn.HRMH_POSN_START.Value, &iExcludeContWorker);
                  End-If;
               Else
                  Return Null;
               End-If;
            End-Evaluate;
         End-If;
         Break;
         
      When "T" /* tree */
         &rsReturn = %This.get3LvlChartTree(&recMxDefn, &arrSeed [1], &dAsOfDate, &bShowSiblings, &bSetBreadcrumbs, &arrDataPath);
         Break;
      When-Other
         /* exception */
         Return Null;
      End-Evaluate;
   Else
      Return Null;
   End-If;
   
   &rsReturn = %This.setOwnerTop(&recMxDefn, &rsReturn);
   Local Rowset &srcRS = &rsReturn;
   Local number &i;
   
   
   /* clean-up tree variables */
   %This.initializeTreeVariables();
   
   &iInitialized = False;
   Return &rsReturn;
end-method;

/*** 
Method:  getMatrixNLvlStruct (Public)
Description:  Returns a rowset containing a n-level chart structure according to matrix config.
*/
method getMatrixNLvlStruct
   /+ &sMatrixID as String, +/
   /+ &sSeed as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sParentOfSeed as String +/
   /+ Returns Rowset +/
   
   %This.initializeClassVariables();
   &iInitialized = True;
   
   Local Record &recMxDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMxDefn = Null Then
      Return Null;
   End-If;
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local array of string &arrSeed = CreateArrayRept("", 0);
   Local array of string &arrParentOfSeed = CreateArrayRept("", 0);
   
   &arrSeed = %This.setSeedArray(&sSeed, &recMxDefn);
   
   /* parse seed value's parent node */
   If All(&sParentOfSeed) Then
      &arrParentOfSeed = Split(&sParentOfSeed, &iOrgViewerDelim);
   End-If;
   
   If &arrParentOfSeed = Null Or
         &arrParentOfSeed.Len = 0 Or
         None(&arrParentOfSeed [1]) Or
         (&arrParentOfSeed.Len > 1 And
            Not IsNumber(&arrParentOfSeed [2])) Then
      &arrParentOfSeed = CreateArrayRept("", 0);
      &arrParentOfSeed.Push("");
      &arrParentOfSeed.Push("0");
   End-If;
   
   If &arrSeed.Len > 0 And
         All(&arrSeed [1]) Then
      Evaluate &recMxDefn.HRMH_SOURCE.Value
      When "M" /* manual */
         If &arrSeed.Len = 2 Then
            &rsReturn = %This.getNLvlStructManual(&recMxDefn, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings);
         Else
            Return Null
         End-If;
         Break;
      When "A" /* access type */
         If &arrSeed.Len = 2 Then
            Evaluate &arrSeed [2]
            When "P"
               /*When "Field.POSITION_NBR"*/
               &rsReturn = %This.getNLvlStructAccessType(&recMxDefn.ACCESS_TYPE.Value, "", 0, &dAsOfDate, &bShowSiblings, &arrSeed [1], "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
               Break;
               /*When "Field.GB_GROUP_ID"
                  &rsReturn = %This.getNLvlStructAccessType(&recMxDefn.ACCESS_TYPE.Value, &recMxDefn.HRMH_OWNER_EMPLID.Value, &recMxDefn.EMPL_RCD.Value, &dAsOfDate, &bShowSiblings, "", &arrSeed [1], "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]));
                  Break;*/
            When-Other
               If IsNumber(&arrSeed [2]) Then
                  If &recMxDefn.ACCESS_TYPE.Value = "7" Then
                     &rsReturn = %This.getNLvlStructAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", &recMxDefn.GB_GROUP_ID.Value, "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                  Else
                     &rsReturn = %This.getNLvlStructAccessType(&recMxDefn.ACCESS_TYPE.Value, &arrSeed [1], Value(&arrSeed [2]), &dAsOfDate, &bShowSiblings, "", "", "", &arrParentOfSeed [1], Value(&arrParentOfSeed [2]), &iExcludeContWorker);
                  End-If;
               Else
                  Return Null;
               End-If;
            End-Evaluate;
            
         End-If;
         Break;
      When "T" /* tree */
         &rsReturn = %This.getNLvlStuctTree(&recMxDefn, &arrSeed [1], &dAsOfDate, &bShowSiblings);
         Break;
      When-Other
         /* exception */
         Return Null;
      End-Evaluate;
      &rsReturn = %This.setOwnerTop(&recMxDefn, &rsReturn);
      
   Else
      Return Null;
   End-If;
   
   Return &rsReturn;
   
end-method;


/*** 
Method:  getMatrixComponents (Public)
Description:  Returns a rowset of those components that an EMPLID has access to within a Matrix
For use when screening if the logged in use has access to a action dropdown related service
*/
method getMatrixComponents
   /+ &sMatrixID as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   Local Rowset &rs_comps = CreateRowset(Record.HRMH_TRANS);
   Local Rowset &rs_emplid_comps = CreateRowset(Record.HRMH_TRANS);
   
   Local Record &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   Local number &i, &rowcnt, &rtn_cnt;
   Local boolean &isOwner, &keep;
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return Null;
   End-If;
   If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
      &isOwner = True;
   Else
      &isOwner = False
   End-If;
   &rowcnt = &rs_comps.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value);
   If &rowcnt > 0 Then
      &rtn_cnt = 0;
      For &i = &rs_comps.ActiveRowCount To 1 Step - 1
         /* check if the emplid has access to the component in this row */
         /* if it is owner access, are they the owner */
         If &isOwner = True Then
            If &rs_comps(&i).HRMH_TRANS.HRMH_OWNER_ACCESS.Value = "N" Then
               &rs_comps.DeleteRow(&i);
            Else /* the emplid has access to this component */
               &rtn_cnt = &rtn_cnt + 1;
            End-If;
         Else
            If %This.isLeader(&recMatrixDefn, &sTargetEmplId, "") = True Then
               /* They are not the owner, if it is all lead, are they a lead */
               If &rs_comps(&i).HRMH_TRANS.HRMH_LEAD_ACCESS.Value = "N" Then
                  /* lean access is no, check for manual lead */
                  /* if it is manual, are they in the manual list */
                  SQLExec("SELECT COUNT(*) FROM PS_HRMH_TRANACCESS WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) AND PNLGRPNAME = :4 AND EMPLID = :5", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &rs_comps(&i).HRMH_TRANS.PNLGRPNAME.Value, &sTargetEmplId, &rowcnt);
                  If &rowcnt = 0 Then
                     &rs_comps.DeleteRow(&i);
                  Else
                     &rtn_cnt = &rtn_cnt + 1;
                  End-If;
               Else
                  &rtn_cnt = &rtn_cnt + 1;
               End-If;
            Else
               &rs_comps.DeleteRow(&i);
            End-If;
         End-If;
      End-For;
   Else
      &rs_comps = Null;
   End-If;
   /* if we did not keep any of the component then return null */
   If &rtn_cnt = 0 Then
      Return Null;
   Else
      Return &rs_comps;
   End-If;
end-method;

/*** 
Method:  getMatrixComponentsAll (Public)
Description:  Returns a rowset those all matrices corresponding components (hrmh_trans structure) to 
which an EMPLID has access */
method getMatrixComponentsAll
   /+ &sTargetEmplId as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   Local number &nRows, &nTotalRows, &i, &j;
   Local Record &recMatrixDefn;
   Local Rowset &rs_Trans = CreateRowset(Record.HRMH_TRANS);
   Local Rowset &rs_lead_trans = CreateRowset(Record.HRMH_TRANS);
   Local boolean &tran_found = False;
   Local boolean &isLeader;
   /*Matrix Enhancement*/
   REM Local string &valid_matrix_sql = " AND EXISTS (SELECT 'X' FROM PS_HRMH_MATRX_DEFN M WHERE FILL.HRMH_MATRIX_ID = M.HRMH_MATRIX_ID AND FILL.EFFDT = M.EFFDT AND M.EFF_STATUS = 'A')";
   Local string &valid_matrix_sql = " AND EXISTS (SELECT 'X' FROM PS_HRMH_MATRX_DEFN M WHERE FILL.HRMH_MATRIX_ID = M.HRMH_MATRIX_ID AND FILL.EFFDT = M.EFFDT AND M.EFF_STATUS = 'A' AND M.START_DT <= %DateIn('" | &dAsOfDate | "'))";
   /*Matrix Enhancement*/
   Local string &sql_where;
   /* get all components where the emplid is a lead and all lead access is set */
   rem WriteToLog(%ApplicationLogFence_Level1, "getMatrixComponentsAll  for " | &sTargetEmplId);
   &sql_where = "WHERE %EffDtCheck(HRMH_TRANS B, FILL, %datein('" | &dAsOfDate | "')) AND HRMH_LEAD_ACCESS = 'A' " | &valid_matrix_sql;
   &rs_lead_trans.Fill(&sql_where);
   &nRows = 0;
   
   For &i = 1 To &rs_lead_trans.ActiveRowCount
      &recMatrixDefn = %This.getMatrixDefn(&rs_lead_trans(&i).HRMH_TRANS.HRMH_MATRIX_ID.Value, &dAsOfDate);
      &isLeader = %This.isLeader(&recMatrixDefn, &sTargetEmplId, "");
      If &isLeader = True Then
         If &nRows > 0 Then
            &rs_Trans.InsertRow(&rs_Trans.ActiveRowCount);
         End-If;
         &rs_lead_trans(&i).HRMH_TRANS.CopyFieldsTo(&rs_Trans(&rs_Trans.ActiveRowCount).HRMH_TRANS);
         &nRows = &nRows + 1;
      End-If;
   End-For;
   &nTotalRows = &nRows;
   /* get all components where the emplid granted access manually*/
   &sql_where = "WHERE %EffDtCheck(HRMH_TRANS B, FILL, %datein('" | &dAsOfDate | "')) and EXISTS (SELECT 'X' FROM PS_HRMH_TRANACCESS A WHERE FILL.HRMH_MATRIX_ID = A.HRMH_MATRIX_ID AND FILL.EFFDT = A.EFFDT AND FILL.PNLGRPNAME = A.PNLGRPNAME AND A.EMPLID = '" | &sTargetEmplId | "')" | &valid_matrix_sql;
   
   If &nRows > 0 Then
      &nRows = &rs_Trans.FillAppend(&sql_where);
   Else
      &nRows = &rs_Trans.Fill(&sql_where);
   End-If;
   &nTotalRows = &nTotalRows + &nRows;
   /* get all component with access owner where target emplid is the owner */
   /*Matrix Enhancement*/
   rem  &sql_where = "WHERE %EffDtCheck(HRMH_TRANS B, FILL, %datein('" | &dAsOfDate | "')) AND HRMH_OWNER_ACCESS = 'Y' and EXISTS (SELECT 'X' FROM PS_HRMH_MATRX_DEFN A WHERE FILL.HRMH_MATRIX_ID = A.HRMH_MATRIX_ID AND FILL.EFFDT = A.EFFDT AND A.HRMH_OWNER_EMPLID = '" | &sTargetEmplId | "' AND A.EFF_STATUS = 'A')";
   &sql_where = "WHERE %EffDtCheck(HRMH_TRANS B, FILL, %datein('" | &dAsOfDate | "')) AND HRMH_OWNER_ACCESS = 'Y' and EXISTS (SELECT 'X' FROM PS_HRMH_MATRX_DEFN A WHERE FILL.HRMH_MATRIX_ID = A.HRMH_MATRIX_ID AND FILL.EFFDT = A.EFFDT AND A.HRMH_OWNER_EMPLID = '" | &sTargetEmplId | "' AND A.EFF_STATUS = 'A' AND A.START_DT <= %DateIn('" | &dAsOfDate | "'))";
   /*Matrix Enhancement*/
   &nRows = &rs_Trans.FillAppend(&sql_where);
   &nTotalRows = &nTotalRows + &nRows;
   
   If &nTotalRows = 0 Then
      &rs_Trans = Null;
   End-If;
   
   Return &rs_Trans;
end-method;

/*** 
Method:  getMatrixComponentList (Public)
Description: returns a list of matrixes/components that a given in user emplid can access for a 
given emplid/empl_rcd */
method getMatrixComponentList
   /+ &sinUserEmplid as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &sTargetEmpl_Rcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   Local Record &recMatrixDefn;
   Local Rowset &rs_return_trans = CreateRowset(Record.HRMH_TRANS);
   Local Rowset &rs_all_trans;
   Local number &rowcnt, &i;
   Local boolean &copy_row = False;
   Local string &last_matrix_id = "";
   Local boolean &is_member, &reports_to;
   /* Get a rowset of all matrix/components for the in user emplid */
   /* these all have the user emplid as either a lead or an owner with access */
   &rs_all_trans = %This.getMatrixComponentsAll(&sinUserEmplid, &dAsOfDate);
   If &rs_all_trans <> Null Then
      &rs_all_trans.Sort(HRMH_TRANS.HRMH_MATRIX_ID, "A");
      /* find out if the employee reports to the lead in each of the matrixes */
      &rowcnt = 0;
      &recMatrixDefn = Null;
      
      For &i = 1 To &rs_all_trans.ActiveRowCount
         REM rem WriteToLog(%ApplicationLogFence_Level1, "getMatrixComponentlist process " | &rs_all_trans(&i).HRMH_TRANS.HRMH_MATRIX_ID.Value);
         
         /* get the matrix definition to detmine reporting structure */
         %This.initializeClassVariables();
         &iInitialized = True;
         &recMatrixDefn = %This.getMatrixDefn(&rs_all_trans(&i).HRMH_TRANS.HRMH_MATRIX_ID.Value, &rs_all_trans(&i).HRMH_TRANS.EFFDT.Value);
         &copy_row = False;
         If &recMatrixDefn <> Null Then
            /* if the user emplid is the owner check if the target is a member */
            If &sinUserEmplid = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
               &is_member = %This.isMember(&recMatrixDefn, &sTargetEmplId, &sTargetEmpl_Rcd);
               If &is_member Then
                  &copy_row = True;
               End-If;
            Else /* else check if the target emplid reports to the user emplid in the matrix */
               &copy_row = %This.ReportsToLead(&recMatrixDefn, &sinUserEmplid, &sTargetEmplId, &sTargetEmpl_Rcd, &dAsOfDate);
            End-If;
            
         End-If;
         
         If &copy_row = True Then
            If &rowcnt > 0 Then
               &rs_return_trans.InsertRow(&rs_return_trans.ActiveRowCount);
            End-If;
            &rs_all_trans(&i).HRMH_TRANS.CopyFieldsTo(&rs_return_trans(&rs_return_trans.ActiveRowCount).HRMH_TRANS);
            &rowcnt = &rowcnt + 1;
         End-If;
         
      End-For;
   End-If;
   REM rem WriteToLog(%ApplicationLogFence_Level1, "getMatrixComponentlist ROWSET COUNT " | &rs_return_trans.ActiveRowCount);
   
   
   If &rowcnt = 0 Then
      &rs_return_trans = Null;
   End-If;
   Return &rs_return_trans;
end-method;

/*** 
Method:  getMatrixComponentArray (Public)
Description: Returns an array of transaction names to which a user Emplid has access to 
for a target emplid/empl_rcd */
method getMatrixComponentArray
   /+ &sinUserEmplid as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &sTargetEmpl_Rcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Array of String +/
   Local Rowset &rs_return_trans = CreateRowset(Record.HRMH_TRANS);
   Local Rowset &rs_all_trans;
   Local number &i;
   
   Local array of string &arr;
   &arr = CreateArrayRept("", 0);
   &rs_return_trans = %This.getMatrixComponentList(&sinUserEmplid, &sTargetEmplId, &sTargetEmpl_Rcd, &dAsOfDate);
   
   If &rs_return_trans = Null Then
      &arr = Null;
   Else
      For &i = 1 To &rs_return_trans.ActiveRowCount
         &arr.Push(&rs_return_trans(&i).HRMH_TRANS.PNLGRPNAME.Value);
         REM rem WriteToLog(%ApplicationLogFence_Level1, "getMatrixComponentArray COMPONENT " | &rs_return_trans(&i).HRMH_TRANS.PNLGRPNAME.Value);
         
      End-For;
   End-If;
   Return &arr;
end-method;

/*** 
Method: ReportsToComponent (Public)
Description: checks to see if a user has access to a specified employee through a component in 
a given matrix */
method ReportsToComponent
   /+ &sMatrixID as String, +/
   /+ &sinUserEmplid as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &sTargetEmpl_Rcd as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sComponent as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   Local Record &recMatrixDefn;
   Local Rowset &rs_comps = CreateRowset(Record.HRMH_TRANS);
   Local number &rowcnt;
   
   %This.initializeClassVariables();
   &iInitialized = True;
   &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   
   If &recMatrixDefn = Null Then
      Return &bReturn;
   End-If;
   
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return &bReturn;
   End-If;
   
   /* get transaction access for the matrix - if there is not tran access for the emplid return false */
   &rowcnt = &rs_comps.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DateIn(:2) and PNLGRPNAME = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sComponent);
   If &rowcnt = 0 Then
      &bReturn = False;
   Else
      /* if the in user emplid is the owner and the target emplid is a member and access allowed for owner return true */
      If &sinUserEmplid = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
         If &rs_comps(1).HRMH_TRANS.HRMH_OWNER_ACCESS.Value = "Y" Then
            /* is the target emplid a member of the matrix - if they are return true */
            If %This.isMember(&recMatrixDefn, &sTargetEmplId, &sTargetEmpl_Rcd) Then
               &bReturn = True;
            Else
               &bReturn = False;
            End-If;
         Else
            &bReturn = False;
         End-If;
      Else
         /* the in user emplid is not the owner so check if the transaction allows access to any lead or the in user emplid as lead in particual*/
         If &rs_comps(1).HRMH_TRANS.HRMH_LEAD_ACCESS.Value = "A" Or
               %This.hasManualTranAccess(&recMatrixDefn, &sinUserEmplid, &sComponent) Then
            /* check to see if the target emplid reports to the in user emplid */
            &bReturn = %This.ReportsToLead(&recMatrixDefn, &sinUserEmplid, &sTargetEmplId, &sTargetEmpl_Rcd, &dAsOfDate);
         Else
            /* if they are not allowing any leads and this emplid is not give access manually then they are not allowed access via matrix */
            &bReturn = False;
         End-If;
      End-If;
   End-If;
   
   Return &bReturn;
end-method;

/*** 
Method: ReportsToComponentAny (Public)
Description: checks to see if a user has access to a specified employee through a component in 
any matrix */
method ReportsToComponentAny
   /+ &sinUserEmplid as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &sTargetEmpl_Rcd as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sComponent as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   Local Rowset &rsComp = CreateRowset(Record.HRMH_TRNMTX_VW);
   Local number &i, &rowcnt;
   Local Record &recMatrixDefn;
   &rowcnt = &rsComp.Fill("WHERE FILL.PNLGRPNAME = :1 and FILL.EFFDT = (SELECT MAX(E.EFFDT) FROM PS_HRMH_TRNMTX_VW E WHERE E.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND E.PNLGRPNAME = FILL.PNLGRPNAME AND E.EFFDT <= %DateIn(:2))", &sComponent, &dAsOfDate);
   REM rem WriteToLog(%ApplicationLogFence_Level1, "ReportsToComponentAny COMPONENT " | &rowcnt);
   
   If &rowcnt = 0 Then
      &bReturn = False;
   Else
      For &i = 1 To &rsComp.ActiveRowCount
         &recMatrixDefn = %This.getMatrixDefn(&rsComp(&i).HRMH_TRNMTX_VW.HRMH_MATRIX_ID.Value, &rsComp(&i).HRMH_TRNMTX_VW.EFFDT.Value);
         /* if the in user emplid is the owner and the target emplid is a member and access allowed for owner return true */
         If &sinUserEmplid = &rsComp(&i).HRMH_TRNMTX_VW.HRMH_OWNER_EMPLID.Value Then
            If &rsComp(&i).HRMH_TRNMTX_VW.HRMH_OWNER_ACCESS.Value = "Y" Then
               /* is the target emplid a member of the matrix - if they are return true */
               
               If %This.isMember(&recMatrixDefn, &sTargetEmplId, &sTargetEmpl_Rcd) Then
                  &bReturn = True;
                  Break;
               Else
                  &bReturn = False;
               End-If;
            Else
               &bReturn = False;
            End-If;
         Else
            /* the in user emplid is not the owner so check if the transaction allows access to any lead or the in user emplid as lead in particual*/
            
            If &rsComp(&i).HRMH_TRNMTX_VW.HRMH_LEAD_ACCESS.Value = "A" Or
                  %This.hasManualTranAccess(&recMatrixDefn, &sinUserEmplid, &sComponent) Then
               /* check to see if the target emplid reports to the in user emplid */
               &bReturn = %This.ReportsToLead(&recMatrixDefn, &sinUserEmplid, &sTargetEmplId, &sTargetEmpl_Rcd, &dAsOfDate);
               REM rem WriteToLog(%ApplicationLogFence_Level1, "ReportsToLEAD " | &bReturn | " FOR MATRIX " | &rsComp(&i).HRMH_TRNMTX_VW.HRMH_MATRIX_ID.Value);
               If &bReturn = True Then
                  Break;
               End-If;
            Else
               /* if they are not allowing any leads and this emplid is not give access manually then they are not allowed access via matrix */
               &bReturn = False;
            End-If;
         End-If;
      End-For;
   End-If;
   Return &bReturn;
end-method;

/*** 
Method:  hasChildrenAccessType (Public)
Description:  Returns whether has children for a specified emplid
*/
method hasChildrenAccessType
   /+ &sAccessType as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sTargetPosn as String, +/
   /+ &sTargetGroupId as String, +/
   /+ &sComponentName as String, +/
   /+ &sSupvEmplid as String, +/
   /+ &nSupvEmplRcd as Integer, +/
   /+ &bExclContWrkr as Boolean +/
   /+ Returns Boolean +/
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   Local boolean &bIsMSS;
   
   If Not &iInitialized Then
      %This.initializeClassVariables();
   End-If;
   
   If None(&sAccessType) Then
      Return False;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   /* add this flag for List*/
   &oChartUtility.ExportMode = %This.bExportMode;
   If &sAccessType = "1" Or
         &sAccessType = "7" Then
      &oChartUtility.ShowSiblings = False;
   Else
      &oChartUtility.ShowSiblings = &bShowSiblings;
   End-If;
   
   &recParms = CreateRecord(Record.HR_OC_PARM_API);
   &recParms.ACCESS_TYPE.Value = &sAccessType;
   &recParms.ASOFDATE.Value = &dAsOfDate;
   If &recParms.ACCESS_TYPE.Value = "7" Then
      If All(&sTargetGroupId) Then
         &recParms.GB_GROUP_ID.Value = &sTargetGroupId;
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         Return False;
      End-If;
   Else
      If All(&sTargetEmplId) Then
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         If All(&sTargetPosn) Then
            &recParms.POSITION_NBR.Value = &sTargetPosn;
            &recParms.ACCESS_TYPE.Value = "4";
         Else
            Return False;
         End-If;
      End-If;
   End-If;
   
   If All(&sComponentName) Then
      &recParms.PNLGRPNAME.Value = &sComponentName;
      &bIsMSS = True;
   Else
      &recParms.PNLGRPNAME.Value = "???$DUszMMY-7-";
      &bIsMSS = False;
      If &bExclContWrkr Then
         &recParms.HR_DR_EX_CWR.Value = "Y";
      Else
         &recParms.HR_DR_EX_CWR.Value = "N";
      End-If;
   End-If;
   
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &iLimitDrillUp = False;
   &iInitialized = False;
   
   If All(&sSupvEmplid) Then
      &recParms.SUPERVISOR_ID.Value = &sSupvEmplid;
      &recParms.SUPERVIS_EMPL_RCD.Value = &nSupvEmplRcd;
   End-If;
   
   Return &oChartUtility.hasChildrenDirRptsAPI(&recParms, &bIsMSS);
end-method;

/*** 
Method:  drillDownAccessType (Public)
Description:  Returns a rowset representing a single reporting level starting from emplid
*/
method drillDownAccessType
   /+ &sAccessType as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sTargetPosn as String, +/
   /+ &sTargetGroupId as String, +/
   /+ &sComponentName as String, +/
   /+ &sSupvEmplid as String, +/
   /+ &nSupvEmplRcd as Integer, +/
   /+ &bExclContWrkr as Boolean +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   Local boolean &bIsMSS;
   %This.initializeClassVariables();
   
   If None(&sAccessType) Then
      Return Null;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   /* add this flag for List*/
   &oChartUtility.ExportMode = %This.bExportMode;
   If &sAccessType = "1" Or
         &sAccessType = "7" Then
      &oChartUtility.ShowSiblings = False;
   Else
      &oChartUtility.ShowSiblings = &bShowSiblings;
   End-If;
   
   &recParms = CreateRecord(Record.HR_OC_PARM_API);
   &recParms.ACCESS_TYPE.Value = &sAccessType;
   &recParms.ASOFDATE.Value = &dAsOfDate;
   If &recParms.ACCESS_TYPE.Value = "7" Then
      If All(&sTargetGroupId) Then
         &recParms.GB_GROUP_ID.Value = &sTargetGroupId;
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         Return Null;
      End-If;
   Else
      If All(&sTargetEmplId) Then
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         If All(&sTargetPosn) Then
            &recParms.POSITION_NBR.Value = &sTargetPosn;
            &recParms.ACCESS_TYPE.Value = "4";
         Else
            Return Null;
         End-If;
      End-If;
   End-If;
   
   If All(&sComponentName) Then
      &recParms.PNLGRPNAME.Value = &sComponentName;
      &bIsMSS = True;
   Else
      &recParms.PNLGRPNAME.Value = "???$DUszMMY-7-";
      &bIsMSS = False;
      If &bExclContWrkr Then
         &recParms.HR_DR_EX_CWR.Value = "Y";
      Else
         &recParms.HR_DR_EX_CWR.Value = "N";
      End-If;
   End-If;
   
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   If All(&sSupvEmplid) Then
      &recParms.SUPERVISOR_ID.Value = &sSupvEmplid;
      &recParms.SUPERVIS_EMPL_RCD.Value = &nSupvEmplRcd;
   End-If;
   
   &oChartUtility.MaxFetchDRAPI = %This.MaxFetch;
   
   &oChartUtility.getChildrenDirRptsAPI(&recParms, &bIsMSS).CopyTo(&rsStruct);
   
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   &iLimitDrillUp = False;
   &iInitialized = False;
   
   Return &rsReturn;
end-method;

/*** 
Method:  hasChildrenTree (Public)
Description:  Returns boolean has children for a specified emplid
*/
method hasChildrenTree
   /+ &treeName as String, +/
   /+ &treeNode as String, +/
   /+ &asOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Boolean +/
   Local HR_OC:ChartUtility &oChartUtility = create HR_OC:ChartUtility();
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   Local Record &recParms = CreateRecord(Record.HR_OC_PARM_TREE);
   &recParms.TREE_NAME.Value = &treeName;
   &recParms.TREE_NODE.Value = &treeNode;
   &recParms.ASOFDATE.Value = &asOfDate;
   
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   Return &oChartUtility.hasChildrenTree(&recParms);
end-method;

/*** 
Method:  drillDownTree (Public)
Description:  Returns a rowset representing a single reporting level starting from emplid 
*/
method drillDownTree
   /+ &treeName as String, +/
   /+ &treeNode as String, +/
   /+ &asOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &lvlNum as Integer +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   
   Local HR_OC:ChartUtility &oChartUtility = create HR_OC:ChartUtility();
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   Local Record &param = CreateRecord(Record.HR_OC_PARM_TREE);
   &param = CreateRecord(Record.HR_OC_PARM_TREE);
   &param.TREE_NAME.Value = &treeName;
   &param.TREE_NODE.Value = &treeNode;
   &param.ASOFDATE.Value = &asOfDate;
   If &iLimitDrillUp Then
      &param.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &param.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &oChartUtility.getChildrenTree(&param, &lvlNum).CopyTo(&rsStruct);
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   Return &rsReturn;
end-method;

/*** 
Method:  get3LvlChartAccessType (Public)
Description:  Returns an org chart structure as a rowset of nodes.
*/
method get3LvlChartAccessType
   /+ &sAccessType as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sTargetPosn as String, +/
   /+ &sTargetGroupId as String, +/
   /+ &sComponentName as String, +/
   /+ &sSupvEmplid as String, +/
   /+ &nSupvEmplRcd as Integer, +/
   /+ &bIncludeBreadcrumbs as Boolean, +/
   /+ &sRootEmplId as String, +/
   /+ &nRootEmplRcd as Integer, +/
   /+ &arrDataPath as Array of String, +/
   /+ &bRefreshGroup as Boolean, +/
   /+ &sRootPosn as String, +/
   /+ &bExclContWrkr as Boolean +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   Local boolean &bIsMSS;
   
   If Not &iInitialized Then
      %This.initializeClassVariables();
   End-If;
   
   If None(&sAccessType) Then
      Return Null;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   /*14204166*/
   &oChartUtility.GenChartInfoBox = %This.GenChartInfoBox;
   &oChartUtility.ChartAdditionalInfoMsg = %This.ChartAdditionalInfoMsg;
   /*14204166*/
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   /* add this flag for List*/
   &oChartUtility.ExportMode = %This.bExportMode;
   /*12989132
   If &sAccessType = "1" Or
         &sAccessType = "7" Then
      &oChartUtility.ShowSiblings = False;
   Else
      &oChartUtility.ShowSiblings = &bShowSiblings;
   End-If;
   12989132*/
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   &recParms = CreateRecord(Record.HR_OC_PARM_API);
   &recParms.ACCESS_TYPE.Value = &sAccessType;
   &recParms.ASOFDATE.Value = &dAsOfDate;
   If &recParms.ACCESS_TYPE.Value = "7" Then
      If All(&sTargetGroupId) Then
         &recParms.GB_GROUP_ID.Value = &sTargetGroupId;
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         Return Null;
      End-If;
      If &bRefreshGroup Then
         &recParms.HR_DR_REFRESH_GRP.Value = "Y";
      End-If;
   Else
      If All(&sTargetEmplId) Then
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         If All(&sTargetPosn) Then
            &recParms.POSITION_NBR.Value = &sTargetPosn;
            &recParms.ACCESS_TYPE.Value = "4";
         Else
            Return Null;
         End-If;
      End-If;
   End-If;
   
   If All(&sSupvEmplid) Then
      &recParms.SUPERVISOR_ID.Value = &sSupvEmplid;
      &recParms.SUPERVIS_EMPL_RCD.Value = &nSupvEmplRcd;
   End-If;
   
   If All(&sRootEmplId) Then
      &recParms.ROOT_EMPLID.Value = &sRootEmplId;
      &recParms.ROOT_EMPL_RCD.Value = &nRootEmplRcd;
      If None(&sSupvEmplid) Then
         &recParms.SUPERVISOR_ID.Value = &sRootEmplId;
         &recParms.SUPERVIS_EMPL_RCD.Value = &nRootEmplRcd;
      End-If;
      If (&sTargetEmplId = &sRootEmplId) And
            (&TargetEmplRcd = &nRootEmplRcd) Then
         &iLimitDrillUp = True;
      End-If;
   Else
      If All(&sRootPosn) Then
         &recParms.ROOT_POSITION_NBR.Value = &sRootPosn;
      End-If;
   End-If;
   
   If All(&sComponentName) Then
      &recParms.PNLGRPNAME.Value = &sComponentName;
      &bIsMSS = True;
   Else
      &recParms.PNLGRPNAME.Value = "äöÅ$DUszMMY-7-";
      &bIsMSS = False;
      If &bExclContWrkr Then
         &recParms.HR_DR_EX_CWR.Value = "Y";
      Else
         &recParms.HR_DR_EX_CWR.Value = "N";
      End-If;
   End-If;
   
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
      rem &oChartUtility.ShowSiblings = False;
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &oChartUtility.getStructure3LvlDirRptsAPI(&recParms, &bIsMSS).CopyTo(&rsStruct);
   
   /*14204166*/
   %This.oChartDisplayUtils.ChartInfoBoxHTML = &oChartUtility.ChartInfoBoxHTML;
   /*14204166*/
   
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   /* start - breadcrumb processing */
   If &bIncludeBreadcrumbs And
         &rsReturn <> Null And
         Not &iLimitDrillUp And
         Not (&sAccessType = "1" Or
            &sAccessType = "7") Then
      Local Rowset &rsCrumb;
      /* re-initialize parm rec for breadcrumb generation */
      &recParms.EMPLID.Value = "";
      &recParms.EMPL_RCD.Value = "";
      &recParms.POSITION_NBR.Value = "";
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
      If All(&sRootEmplId) Then
         &recParms.SUPERVISOR_ID.Value = &sRootEmplId;
         &recParms.SUPERVIS_EMPL_RCD.Value = &nRootEmplRcd;
      End-If;
      &oChartUtility.ShowSiblings = False;
      
      &rsCrumb = %This.addBreadcrumbNodesToRootAccessType(&rsReturn, &arrDataPath, &recParms, &oChartUtility, &bIsMSS);
      If &rsCrumb <> Null Then
         &rsReturn = &rsCrumb;
      End-If;
   End-If;
   /* end - breadcrumb processing */
   
   &iLimitDrillUp = False;
   &iInitialized = False;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getNLvlStructAccessType (Public)
Description:  Returns a containing all level chart structrue by Access Type
*/
method getNLvlStructAccessType
   /+ &sAccessType as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &sTargetPosn as String, +/
   /+ &sTargetGroupId as String, +/
   /+ &sComponentName as String, +/
   /+ &sSupvEmplid as String, +/
   /+ &nSupvEmplRcd as Integer, +/
   /+ &bExclContWrkr as Boolean +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   Local boolean &bIsMSS;
   
   If Not &iInitialized Then
      %This.initializeClassVariables();
   End-If;
   
   If None(&sAccessType) Then
      Return Null;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = False;
   &oChartUtility.ExportMode = True;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   &recParms = CreateRecord(Record.HR_OC_PARM_API);
   &recParms.ACCESS_TYPE.Value = &sAccessType;
   &recParms.ASOFDATE.Value = &dAsOfDate;
   If &recParms.ACCESS_TYPE.Value = "7" Then
      If All(&sTargetGroupId) Then
         &recParms.GB_GROUP_ID.Value = &sTargetGroupId;
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         Return Null;
      End-If;
   Else
      If All(&sTargetEmplId) Then
         &recParms.EMPLID.Value = &sTargetEmplId;
         &recParms.EMPL_RCD.Value = &TargetEmplRcd;
      Else
         If All(&sTargetPosn) Then
            &recParms.POSITION_NBR.Value = &sTargetPosn;
            &recParms.ACCESS_TYPE.Value = "4";
         Else
            Return Null;
         End-If;
      End-If;
   End-If;
   
   If All(&sComponentName) Then
      &recParms.PNLGRPNAME.Value = &sComponentName;
      &bIsMSS = True;
   Else
      &recParms.PNLGRPNAME.Value = "äöÅ$DUszMMY-7-";
      &bIsMSS = False;
      If &bExclContWrkr Then
         &recParms.HR_DR_EX_CWR.Value = "Y";
      Else
         &recParms.HR_DR_EX_CWR.Value = "N";
      End-If;
   End-If;
   
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   If All(&sSupvEmplid) Then
      &recParms.SUPERVISOR_ID.Value = &sSupvEmplid;
      &recParms.SUPERVIS_EMPL_RCD.Value = &nSupvEmplRcd;
   End-If;
   
   &oChartUtility.getStructureNLvlDirRptsAPI(&recParms, &bIsMSS).CopyTo(&rsStruct);
   &rsReturn = %This.setStructRowSet(&rsStruct);
   &iLimitDrillUp = False;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getAllActiveMatForOrgRowset (Public)
Description:  Returns a rowset of Record.HRMH_MATRX_DEFN for all active matrix defns.
Added for bug 22450536 so we can retieve only those matrix that are for the org view type
*/
method getAllActiveMatForOrgRowset
   /+ &dAsOfDate as Date, +/
   /+ &sOrgVwType as String +/
   /+ Returns Rowset +/
   Local Rowset &rs, &rstemp;
   Local integer &nRows, &i;
   &rs = CreateRowset(Record.HRMH_MATRX_DEFN);
   &rstemp = CreateRowset(Record.HRMH_ORGACC_VW);
   &nRows = &rstemp.Fill("WHERE FILL.EFFDT = (SELECT MAX(A.EFFDT) FROM PS_HRMH_ORGACC_VW A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:1)) and FILL.HRCD_ORGVIEW_TYPE = :2 ORDER BY FILL.DESCR", &dAsOfDate, &sOrgVwType);
   If &nRows > 0 Then
      For &i = 1 To &nRows
         If &i > 1 Then
            &rs.InsertRow(&rs.ActiveRowCount);
         End-If;
         &rstemp(&i).HRMH_ORGACC_VW.CopyFieldsTo(&rs(&rs.ActiveRowCount).HRMH_MATRX_DEFN);
      End-For;
      
      Return &rs;
   Else
      Return Null;
   End-If;
end-method;

/*** 
Method:  getAllActiveMatrixRowset (Public)
Description:  Returns a rowset of Record.HRMH_MATRX_DEFN for all active matrix defns.
*/
method getAllActiveMatrixRowset
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   Local Rowset &rs;
   Local integer &nRows;
   &rs = CreateRowset(Record.HRMH_MATRX_DEFN);
   /*Matrix Enhancement*/
   rem &nRows = &rs.Fill("WHERE FILL.EFF_STATUS = 'A' AND FILL.EFFDT = (SELECT MAX(A.EFFDT) FROM PS_HRMH_MATRX_DEFN A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:1)) ORDER BY FILL.DESCR", &dAsOfDate);
   &nRows = &rs.Fill("WHERE FILL.EFF_STATUS = 'A' AND FILL.START_DT <= %DateIn(:1) AND FILL.EFFDT = (SELECT MAX(A.EFFDT) FROM PS_HRMH_MATRX_DEFN A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:1)) ORDER BY FILL.DESCR", &dAsOfDate);
   /*Matrix Enhancement*/
   If &nRows > 0 Then
      Return &rs;
   Else
      Return Null;
   End-If;
end-method;

/*** Public Utilities ***/
/*** 
Method:  getMatrixDefn (Public)
Description:  
*/
method getMatrixDefn
   /+ &sMatrixID as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Record +/
   Local Record &rec = CreateRecord(Record.HRMH_MATRX_DEFN);
   /* if the saved matrix defn is the one being requested return it */
   If &recMatrixDefn_save.HRMH_MATRIX_ID.Value = &sMatrixID Then
      &rec = &recMatrixDefn_save;
   Else /* if the saved is different from the requested one, get the requested one and save it */
      &rec.HRMH_MATRIX_ID.Value = &sMatrixID;
      If Not &rec.SelectByKeyEffDt(&dAsOfDate) Then
         &rec = Null;
      End-If;
      /*Matrix Enhancement*/
      <*If &rec.SelectByKeyEffDt(&dAsOfDate) And
            &rec.START_DT.Value >= Value(&dAsOfDate) Then
         &rec = Null;
      End-If;*>
      /*Matrix Enhancement*/
      &recMatrixDefn_save = &rec;
   End-If;
   
   If &rec <> Null Then
      If &rec.HR_DR_EX_CWR.Value = "Y" Then
         &iExcludeContWorker = True;
      Else
         &iExcludeContWorker = False;
      End-If;
   End-If;
   
   Return &rec;
end-method;

/*** 
Method:  setSeedArray (Public)
Description:  
*/
method setSeedArray
   /+ &sSeedValue as String, +/
   /+ &recMatrixDefn as Record +/
   /+ Returns Array of String +/
   Local array of string &arr;
   
   /* seed value is passed as a single string.  the format is as follows:
       Normal employee:  EMPLID:::EMPL_RCD
       Empty position:   POSITION_NBR:::P
       Tree Node:        TREE_NODE   */
   &iLastSeedValue = &sSeedValue;
   &iStartedFromOwner = False;
   &iLimitDrillUp = False;
   
   If All(&sSeedValue) Then
      Evaluate &recMatrixDefn.HRMH_SOURCE.Value
      When "T"
         &arr = CreateArrayRept("", 0);
         &arr.Push(&sSeedValue);
         %This.setFlagForStartNode(&arr, &recMatrixDefn);
         %This.initializeTreeVariables();
         Break;
      When-Other
         &arr = Split(&sSeedValue, &iOrgViewerDelim);
         If &arr <> Null And
               All(&arr [1]) Then
            %This.setFlagForStartNode(&arr, &recMatrixDefn);
         End-If;
      End-Evaluate;
      If &arr = Null Or
            None(&arr [1]) Then
         /* exception */
         &arr = CreateArrayRept("", 0);
      End-If;
   Else
      &iLimitDrillUp = True;
      /* no value passed - return info for top node */
      &arr = CreateArrayRept("", 0);
      Evaluate &recMatrixDefn.HRMH_SOURCE.Value
      When "M"
         &arr.Push(&recMatrixDefn.HRMH_OWNER_EMPLID.Value);
         &arr.Push(String(&recMatrixDefn.EMPL_RCD.Value));
         &iStartedFromOwner = True;
         Break;
      When "A"
         Evaluate &recMatrixDefn.ACCESS_TYPE.Value
         When "7"
            If All(&recMatrixDefn.GB_GROUP_ID.Value) Then
               /* BL:  generic approach for by group id */
               rem &arr.Push(&recMatrixDefn.GB_GROUP_ID.Value);
               rem &arr.Push("Field.GB_GROUP_ID");
               &arr.Push(&recMatrixDefn.HRMH_OWNER_EMPLID.Value);
               &arr.Push(String(&recMatrixDefn.EMPL_RCD.Value));
               &iStartedFromOwner = True;
            Else
               /* exception */
               &arr = CreateArrayRept("", 0);
            End-If;
            Break;
         When "1"
         When "2"
         When "3"
         When "4"
         When "5"
         When "6"
            <*If &recMatrixDefn.ACCESS_TYPE.Value = "1" Then
               &iStartedFromOwner = True;
            End-If;*>
            If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
               &arr.Push(&recMatrixDefn.HRMH_EMPLID_START.Value);
               &arr.Push(String(&recMatrixDefn.HRMH_START_EMPLRCD.Value));
            Else
               If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
                  &arr.Push(&recMatrixDefn.HRMH_POSN_START.Value);
                  &arr.Push("P");
               Else
                  /* exception */
                  &arr = CreateArrayRept("", 0);
               End-If;
            End-If;
            
            Break;
         When-Other
            &arr = CreateArrayRept("", 0);
         End-Evaluate;
         Break;
      When "T"
         If All(&recMatrixDefn.TREE_NAME.Value) And
               All(&recMatrixDefn.TREE_NODE_START.Value) Then
            &arr.Push(&recMatrixDefn.TREE_NODE_START.Value);
            &iStartedFromOwner = %This.isNodeOwnersNode(&recMatrixDefn, "");
         Else
            /* exception */
            &arr = CreateArrayRept("", 0);
         End-If;
         Break;
      When-Other
         /* exception */
         &arr = CreateArrayRept("", 0);
      End-Evaluate;
   End-If;
   
   Return &arr;
end-method;

/**************************************
  PRIVATE METHODS
***************************************/
/*** 
Method:  isLeader 
Description:  Returns a boolean as to whether the emplid is a leader on the given matrix.
*/
method isLeader
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as String +/
   /+ Returns Boolean +/
   Local boolean &isLead;
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return False;
   End-If;
   /* manually built matrix */
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      &isLead = %This.isLeaderManual(&recMatrixDefn, &sEmplId);
      Break;
   When "T" /* tree built matrix */
      &isLead = %This.isLeaderTree(&recMatrixDefn, &sEmplId);
      Break;
   When "A" /* Direct reports access type built matrix */
      &isLead = %This.isLeaderAccessType(&recMatrixDefn, &sEmplId, &TargetEmplRcd);
      Break;
   End-Evaluate;
   Return &isLead;
end-method;

/*** 
Method:  isMember
Description: checks if an employee is a member of a given matrix 
*/
method isMember
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      &bReturn = %This.isMemberManual(&recMatrixDefn, &sEmplId);
      Break;
   When "A"
      
      &bReturn = %This.isMemberAccessType(&recMatrixDefn, &sEmplId, &TargetEmplRcd, &recMatrixDefn.EFFDT.Value);
      
      Break;
   When "T"
      &bReturn = %This.isMemberTree(&recMatrixDefn, &sEmplId, False);
   End-Evaluate;
   
   Return &bReturn;
end-method;

/*** 
Method:  hasManualTranAccess
Description: 
*/
method hasManualTranAccess
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &sComponent as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   Local string &sAccess = "N";
   SQLExec("SELECT 'Y' FROM PS_HRMH_TRANACCESS WHERE HRMH_MATRIX_ID = :1 AND EFFDT = %DATEIN(:2) AND PNLGRPNAME = :3 AND EMPLID = :4", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sComponent, &sEmplId, &sAccess);
   If &sAccess = "Y" Then
      &bReturn = True;
   End-If;
   Return &bReturn;
end-method;

/*** 
Method:  ReportsToLead
Description: Reports to a Lead within a given matrix - Returns a true if the Target emplid/empl_rcd 
reports to the &inUserEmplid passed to the method */
method ReportsToLead
   /+ &recMatrixDefn as Record, +/
   /+ &sinUserEmplid as String, +/
   /+ &sTargetEmplId as String, +/
   /+ &sTargetEmpl_Rcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   Local number &i;
   Local string &sql;
   Local number &EmplRcd;
   Local SQL &SQLFetchAssgn;
   
   /* first make sure the sinUserEmplid is a lead for the matrix */
   rem WinMessage("calling is leader");
   If %This.isLeader(&recMatrixDefn, &sinUserEmplid, "") Then
      
      /* check if the empoyee reports to the lead */
      Evaluate &recMatrixDefn.HRMH_SOURCE.Value
      When "M"
         Local string &srch_super, &test_emplid;
         Local Rowset &rs_Matrix_Memb = CreateRowset(Record.HRMH_MATRX_MEMB);
         &test_emplid = &sTargetEmplId;
         &srch_super = "";
         /* checking employee's supervisor if all supervisors above the 
                                      employee lead to the owner then the in user emplid is not the targets lead */
         /*Matrix Enhancement*/
         rem &rs_Matrix_Memb.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = :2", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value;
         &rs_Matrix_Memb.Fill("WHERE HRMH_MATRIX_ID = :1 AND EFFDT = :2 AND START_DT <= %DateIn(:3) AND HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &dAsOfDate);
         /*Matrix Enhancement*/
         For &i = 1 To &rs_Matrix_Memb.ActiveRowCount
            /* find the employee's row */
            If &rs_Matrix_Memb(&i).HRMH_MATRX_MEMB.EMPLID.Value = &test_emplid Then
               &srch_super = &rs_Matrix_Memb(&i).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value;
               /* if the supervisor for the employee is the one passed in exit the loop and return true */
               If &srch_super = &sinUserEmplid Then
                  &bReturn = True;
                  Break;
               Else
                  /* if the supervisor is not the one passed start the loop from the top searching for the employee's supervisor */
                  &test_emplid = &srch_super;
                  &i = 0;
               End-If;
            End-If;
         End-For;
         Break;
      When "A"
         Local HR_DIRECT_REPORTS:DirectReportsUI &DirectReportsUI = create HR_DIRECT_REPORTS:DirectReportsUI();
         If All(&sTargetEmpl_Rcd) Then /* if the empl_rcd was not passed check them all */
            &bReturn = &DirectReportsUI.ReportsTo(&sinUserEmplid, %OperatorId, &sTargetEmplId, Value(&sTargetEmpl_Rcd), &dAsOfDate, &recMatrixDefn.GB_GROUP_ID.Value, Value(&recMatrixDefn.ACCESS_TYPE.Value));
         Else
            &sql = FetchSQL(SQL.HR_DR_ASOF_JOBS_SQL);
            &SQLFetchAssgn = CreateSQL(&sql, &sTargetEmplId, &dAsOfDate);
            /* retrieve Empl Rcd of all active assignments */
            While &SQLFetchAssgn.Fetch(&EmplRcd)
               &bReturn = &DirectReportsUI.ReportsTo(&sinUserEmplid, %OperatorId, &sTargetEmplId, Value(&sTargetEmpl_Rcd), &dAsOfDate, &recMatrixDefn.GB_GROUP_ID.Value, Value(&recMatrixDefn.ACCESS_TYPE.Value));
               If &bReturn = True Then
                  Break;
               End-If;
            End-While;
         End-If;
         Break;
      When "T"
         rem WinMessage("tree processing");
         Local string &sTargetTreeNode;
         /* get all the nodes for the supervisor we are trying to find (since we don't have empl_rcd we have to loop) */
         If %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
            
            If &oTreeNodeKeyUtil <> Null Then
               rem WinMessage("getTreeNodeKeyAllByEmplId");
               Local array of string &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sinUserEmplid);
               /* get the tree node for the target emplid */
               rem WinMessage("getTreeNodeKeyFirst");
               &sTargetTreeNode = &oTreeNodeKeyUtil.getTreeNodeKeyFirst(&sTargetEmplId, Value(&sTargetEmpl_Rcd));
               /* traverse up the tree to see if we fine any of tree nodes for the pass in user emplid if we get to the start node then exit with false */
               rem WinMessage("FindNode");
               Local ApiObject &oTestNode = &oTree.FindNode(&sTargetTreeNode, "");
               If &oTestNode = Null Or
                     &oTestNode.IsRoot Then
                  &bReturn = False
               Else
                  /* node found, no determine if it reports to the passed in user emplid */
                  Local ApiObject &oTempParent = &oTestNode.Parent;
                  While Not &oTempParent.IsRoot
                     /* check to see if the parent is the node name for the passed user emplid*/
                     For &i = 1 To &arrTreeNodes.Len
                        If &oTempParent.name = &arrTreeNodes [&i] Then
                           &bReturn = True;
                           Break;
                        End-If;
                     End-For;
                     If &oTempParent.Name = &oTreeStartNode.Name Then
                        /* start node found so the user emplid was not found as a parent */
                        &bReturn = False;
                        Break;
                     End-If;
                     &oTempParent = &oTempParent.Parent;
                  End-While;
               End-If;
            End-If;
         End-If;
         Break;
         
      End-Evaluate;
   End-If;
   Return &bReturn;
end-method;

/*** Manual-based methods */
/*** 
Method:  isMemberManual
Description:  
*/
method isMemberManual
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String +/
   /+ Returns Boolean +/
   
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return False;
   End-If;
   
   If &recMatrixDefn.HRMH_OWNER_EMPLID.Value = &sEmplId Then
      /* employee passed to method is the owner so assumed to be a member */
      Return True;
   End-If;
   
   /* EMPLID is in the members table */
   Local string &sExists = "N";
   /*Matrix Enhancement*/
   rem SQLExec("select 'Y' from PS_INSTALLATION where exists (select 'X' from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sEmplId, &sExists);
   SQLExec("select 'Y' from PS_INSTALLATION where exists (select 'X' from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3 and HRMH_MEMBER_STATUS = 'A' AND START_DT <= %DateIn(:4))", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sEmplId, %Date, &sExists);
   /*Matrix Enhancement*/
   If &sExists = "Y" Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

/*** 
Method:  isLeaderManual
Description: 
*/
method isLeaderManual
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String +/
   /+ Returns Boolean +/
   
   
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return False;
   End-If;
   /* owner is not a lead for transaction assignment purposes there is a separate setting for owner access.*/
   /* removing the below logic b/c Manual matrix will always have Owner as lead */
   rem   If &recMatrixDefn.HRMH_OWNER_EMPLID.Value = &sTargetEmplId Then
      Return False;
   rem   End-If;
   
   /* the EMPLID is a lead in the members table */
   Local string &sExists = "N";
   /*Matrix Enhancement*/
   rem SQLExec("select 'Y' from PS_INSTALLATION where exists (select 'X' from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and SUPERVISOR_ID = :3)", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sEmplId, &sExists);
   SQLExec("select 'Y' from PS_INSTALLATION where exists (select 'X' from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and SUPERVISOR_ID = :3 and HRMH_MEMBER_STATUS = 'A')", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sEmplId, &sExists);
   /*Matrix Enhancement*/
   
   If &sExists = "Y" Then
      Return True;
   Else
      Return False;
   End-If;
   
end-method;

/*** 
Method:  getTargetMemberManual
Description:  Returns a rowset based on Record.HRMH_MATRX_MEMB the row for the passed &sTargetEmplId.
*/
method getTargetMemberManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   If &recMatrixDefn = Null Or
         None(&sTargetEmplId) Then
      Return Null;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local integer &nRows;
   /*Matrix Enhancement*/
   rem &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.EMPLID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId);
   &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.EMPLID = :3 AND FILL.START_DT <= %DateIn(:4) AND FILL.HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate);
   /*Matrix Enhancement*/
   If &nRows = 0 Then
      &rsReturn = Null;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  drillDownManual
Description:  Returns a rowset based on Record.HRMH_MATRX_MEMB containing all the members reporting to the passed &sTargetEmplId.
*/
method drillDownManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &nMaxFetch as Integer +/
   /+ Returns Rowset +/
   If &recMatrixDefn = Null Then
      Return Null;
   End-If;
   If None(&sTargetEmplId) Then
      /* if no TargetEmplid, application wants to start from top */
      &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value;
      &TargetEmplRcd = &recMatrixDefn.EMPL_RCD.Value;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HRMH_MATRX_MEMB);
   rem Local integer &nRows;
   rem &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = (Select MAX(A.EFFDT) FROM PS_HRMH_MATRX_MEMB A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:2)) and FILL.SUPERVISOR_ID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &dAsOfDate, &sTargetEmplId);
   
   rem Local Record &rec = CreateRecord(Record.HRMH_MATRX_MEMB);
   Local Record &rec = CreateRecord(Record.HRMH_MBR_NAME_V);
   Local integer &nBreak = &nMaxFetch;
   Local integer &i;
   Local string &sSQL;
   Local SQL &sql;
   
   /*Matrix Enhancement*/
   rem &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = (Select MAX(A.EFFDT) FROM PS_HRMH_MATRX_MEMB A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:3)) and FILL.SUPERVISOR_ID = :4 ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &dAsOfDate, &sTargetEmplId);
   &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = (Select MAX(A.EFFDT) FROM PS_HRMH_MATRX_MEMB A WHERE A.HRMH_MATRIX_ID = FILL.HRMH_MATRIX_ID AND A.EFFDT <= %DateIn(:3)) and FILL.SUPERVISOR_ID = :4 AND FILL.START_DT <= %DateIn(:3) AND FILL.HRMH_MEMBER_STATUS = 'A' ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &dAsOfDate, &sTargetEmplId);
   /*Matrix Enhancement*/
   
   While &sql.Fetch(&rec)
      &i = &i + 1;
      If &i = 1 Then
         &rec.CopyFieldsTo(&rsReturn(1).GetRecord(Record.HRMH_MATRX_MEMB));
      Else
         &rsReturn.InsertRow(&rsReturn.ActiveRowCount);
         &rec.CopyFieldsTo(&rsReturn(&rsReturn.ActiveRowCount).GetRecord(Record.HRMH_MATRX_MEMB));
      End-If;
      If &nBreak > 0 And
            &i = &nBreak Then
         /*14204166*/
         /* ADD CODE HERE TO SET DIRECTS MESSAGE IN ChartDisplayUtility */
         /*14204166*/
         Break;
      End-If;
   End-While;
   &sql.Close();
   
   If &i = 0 Then
      &rsReturn = Null;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getSupervisorManual
Description:  Returns a rowset based on Record.HRMH_MATRX_MEMB containing the supervisor of the passed &sTargetEmplId.
*/
method getSupervisorManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Rowset +/
   
   If &recMatrixDefn = Null Or
         None(&sTargetEmplId) Then
      Return Null;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local integer &nRows;
   Local string &sTargetsMgr = " ";
   
   /* get target emp's manual supervisor */
   /*Matrix Enhancement*/
   rem SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &sTargetsMgr);
   SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3 and START_DT <= %DateIn(:4) and HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate, &sTargetsMgr);
   /*Matrix Enhancement*/
   
   If All(&sTargetsMgr) Then
      If &sTargetsMgr = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
         /* target reports to owner, so return a dummy member row with owner's info */
         &rsReturn(1).HRMH_MATRX_MEMB.HRMH_MATRIX_ID.Value = &recMatrixDefn.HRMH_MATRIX_ID.Value;
         &rsReturn(1).HRMH_MATRX_MEMB.EFFDT.Value = &recMatrixDefn.EFFDT.Value;
         &rsReturn(1).HRMH_MATRX_MEMB.EMPLID.Value = &recMatrixDefn.HRMH_OWNER_EMPLID.Value;
         &rsReturn(1).HRMH_MATRX_MEMB.EMPL_RCD.Value = &recMatrixDefn.EMPL_RCD.Value;
         &rsReturn(1).HRMH_MATRX_MEMB.HRMH_TITLE.Value = &recMatrixDefn.HRMH_TITLE.Value;
         &rsReturn(1).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value = " ";
         &rsReturn(1).HRMH_MATRX_MEMB.SUPERVIS_EMPL_RCD.Value = 0;
         &nRows = 1;
      Else
         /* fill rowset supervisor's row */
         /*Matrix Enhancement*/
         rem &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.EMPLID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr);
         &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.EMPLID = :3 AND FILL.START_DT <= %DateIn(:4) AND FILL.HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr, &dAsOfDate);
         /*Matrix Enhancement*/
      End-If;
   Else
      &nRows = 0;
   End-If;
   
   If &nRows = 0 Then
      &rsReturn = Null;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getPeersManual
Description:  Returns a rowset based on Record.HRMH_MATRX_MEMB containing the peers of the passed &sTargetEmplId.
*/
method getPeersManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bRemoveTarget as Boolean, +/
   /+ &nMaxFetch as Integer +/
   /+ Returns Rowset +/
   If &recMatrixDefn = Null Or
         None(&sTargetEmplId) Then
      Return Null;
   End-If;
   
   /* if &sTargetEmplid is owner, there are no peers  */
   If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
      Return Null;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local integer &nRows, &i;
   Local string &sTargetsMgr;
   
   /* get target emp's manual supervisor */
   /*Matrix Enhancement*/
   rem SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &sTargetsMgr);
   SQLExec("select SUPERVISOR_ID from PS_HRMH_MATRX_MEMB where HRMH_MATRIX_ID = :1 and EFFDT = %DateIn(:2) and EMPLID = :3 and START_DT <= %DateIn(:4) and HRMH_MEMBER_STATUS = 'A'", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetEmplId, &dAsOfDate, &sTargetsMgr);
   /*Matrix Enhancement*/
   
   <*If All(&sTargetsMgr) Then
      /* fill rowset directs of target's supervisor row */
      If &bRemoveTarget Then
         &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.SUPERVISOR_ID = :3 AND FILL.EMPLID <> :4", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr, &sTargetEmplId);
      Else
         &nRows = &rsReturn.Fill("WHERE FILL.HRMH_MATRIX_ID = :1 and FILL.EFFDT = %DateIn(:2) and FILL.SUPERVISOR_ID = :3", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr);
      End-If;
   End-If;*>
   
   rem Local Record &rec = CreateRecord(Record.HRMH_MATRX_MEMB);
   Local Record &rec = CreateRecord(Record.HRMH_MBR_NAME_V);
   Local integer &nBreak = &nMaxFetch;
   Local string &sSQL;
   Local SQL &sql;
   
   If All(&sTargetsMgr) Then
      /* fill rowset directs of target's supervisor row */
      /*Matrix Enhancement*/
      <*If &bRemoveTarget Then
         &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = %DateIn(:3) and FILL.SUPERVISOR_ID = :4 AND FILL.EMPLID <> :5 ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr, &sTargetEmplId);
      Else
         &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = %DateIn(:3) and FILL.SUPERVISOR_ID = :4 ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr);
      End-If;*>
      
      If &bRemoveTarget Then
         &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = %DateIn(:3) and FILL.SUPERVISOR_ID = :4 AND FILL.EMPLID <> :5 AND FILL.START_DT <= %DateIn(:6) AND FILL.HRMH_MEMBER_STATUS = 'A' ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr, &sTargetEmplId, &dAsOfDate);
      Else
         &sql = CreateSQL("%SelectAll(:1 FILL) WHERE FILL.HRMH_MATRIX_ID = :2 and FILL.EFFDT = %DateIn(:3) and FILL.SUPERVISOR_ID = :4 AND FILL.START_DT <= %DateIn(:5) AND FILL.HRMH_MEMBER_STATUS = 'A' ORDER BY FILL.NAME_DISPLAY, FILL.EMPLID, FILL.EMPL_RCD", &rec, &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value, &sTargetsMgr, &dAsOfDate);
      End-If;
      /*Matrix Enhancement*/
   End-If;
   
   While &sql.Fetch(&rec)
      &i = &i + 1;
      If &i = 1 Then
         &rec.CopyFieldsTo(&rsReturn(1).GetRecord(Record.HRMH_MATRX_MEMB));
      Else
         &rsReturn.InsertRow(&rsReturn.ActiveRowCount);
         &rec.CopyFieldsTo(&rsReturn(&rsReturn.ActiveRowCount).GetRecord(Record.HRMH_MATRX_MEMB));
      End-If;
      If &nBreak > 0 And
            &i = &nBreak Then
         /*14204166*/
         /* ADD CODE HERE TO SET PEERS MESSAGE IN ChartDisplayUtility */
         /*14204166*/
         Break;
      End-If;
   End-While;
   &sql.Close();
   
   If &i = 0 Then
      &rsReturn = Null;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  get3LvlChartManual
Description:  
*/
method get3LvlChartManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &bRecursive as Boolean, +/
   /+ &bIncludeBreadcrumbs as Boolean, +/
   /+ &arrDataPath as Array of String +/
   /+ Returns Rowset +/
   
   Local integer &nTargetLevel, &nChildLevel, &nParentLevel, &i;
   Local Rowset &rsMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local Rowset &rsJob = CreateRowset(Record.HRCD_NDE_JOB_VW);
   Local Rowset &rsTarget = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsTemp = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local boolean &bMakeBreadcrumbs = &bIncludeBreadcrumbs;
   
   &iLastFocusNodeId = "";
   &iLastParentOfFocusNodeId = "";
   &iLastTopNodeId = "";
   &iChartLevels = 0;
   
   /*14204166*/
   Local string &FocusNodeDescr;
   %This.oChartDisplayUtils.initializeChartInfoBox();
   
   Local integer &LimitLevel2 = %This.arrLevelNodeLimits [2];
   Local integer &LimitLevel3 = %This.arrLevelNodeLimits [3];
   
   If &LimitLevel2 > 0 Then
      &LimitLevel2 = &LimitLevel2 + 1;
   End-If;
   If &LimitLevel3 > 0 Then
      &LimitLevel3 = &LimitLevel3 + 1;
   End-If;
   /*14204166*/
   
   /* if matrix is blank, return null */
   If &recMatrixDefn = Null Then
      Return Null;
   End-If;
   If None(&sTargetEmplId) Then
      /* if no TargetEmplid, application wants to start from top */
      &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value;
      &TargetEmplRcd = &recMatrixDefn.EMPL_RCD.Value;
   End-If;
   /* if target employee does not exist in matrix, return null */
   If &sTargetEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
      &nTargetLevel = 1;
      &bMakeBreadcrumbs = False;
   Else
      &nTargetLevel = 2;
      If Not %This.isMemberManual(&recMatrixDefn, &sTargetEmplId) Then
         Return Null;
      End-If;
   End-If;
   
   /* load focus node's info */
   /* load focus node info that is dependent upon target level */
   If &nTargetLevel = 1 Then /* &sTargetEmplid is focus & owner of matrix */
      &rsMembs(1).HRMH_MATRX_MEMB.HRMH_MATRIX_ID.Value = &recMatrixDefn.HRMH_MATRIX_ID.Value;
      &rsMembs(1).HRMH_MATRX_MEMB.EFFDT.Value = &recMatrixDefn.EFFDT.Value;
      &rsMembs(1).HRMH_MATRX_MEMB.EMPLID.Value = &recMatrixDefn.HRMH_OWNER_EMPLID.Value;
      &rsMembs(1).HRMH_MATRX_MEMB.EMPL_RCD.Value = &recMatrixDefn.EMPL_RCD.Value;
      &rsMembs(1).HRMH_MATRX_MEMB.HRMH_TITLE.Value = &recMatrixDefn.HRMH_TITLE.Value;
      &bMakeBreadcrumbs = False;
   Else /* &sTargetEmplid is focus, but not top of matrix */
      &rsMembs = %This.getTargetMemberManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate);
   End-If;
   
   If &rsMembs <> Null Then
      /* level = 1or2, focus = Y, type = (F) focus */
      &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsMembs, &nTargetLevel, "Y", "F");
      &FocusNodeDescr = &rsTemp(1).HR_OC_NODE_WRK.PTNODE_DESCR1.Value;
   End-If;
   
   /* copyto final return rowset */
   If &rsTemp <> Null Then
      If &bShowSiblings Then
         &rsTemp.CopyTo(&rsTarget);
      Else
         &rsReturn = %This.addToStructureRowset(&rsTemp, &rsReturn);
      End-If;
      &rsTemp = Null;
   End-If;
   /* rebuild &rsMembs to prepare for more rows */
   &rsMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   
   /* get focus node's children */
   /* check if node has children */
   If %This.isLeaderManual(&recMatrixDefn, &sTargetEmplId) Then
      If &bRecursive Then
         &rsTemp = %This.drillDownManualRecursive(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate, &nTargetLevel);
      Else
         &rsMembs = %This.drillDownManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate, &LimitLevel3 /*%This.oChartDisplayUtils.arrLevelNodeLimits [3]*/);
         If &rsMembs <> Null Then
            /*14204166*/
            If &LimitLevel3 > 0 And
                  &rsMembs.ActiveRowCount > %This.arrLevelNodeLimits [3] Then
               %This.oChartDisplayUtils.setDirectsMsg();
               rem &rsMembs = %This.deleteRowsetRows(&rsMembs, %This.arrLevelNodeLimits [3]);
            End-If;
            /*14204166*/
            
            &nChildLevel = &nTargetLevel + 1;
            /* level = focus +1, focus = N, type = (C) children */
            &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsMembs, &nChildLevel, "N", "C");
         End-If;
      End-If;
   End-If;
   
   /* copyto final return rowset */
   If &rsTemp <> Null Then
      &rsReturn = %This.addToStructureRowset(&rsTemp, &rsReturn);
      &rsTemp = Null;
   End-If;
   /* rebuild &rsMembs to prepare for more rows */
   &rsMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   
   /* get focus node's supervisor if applicable */
   If &nTargetLevel = 2 Then
      &nParentLevel = &nTargetLevel - 1;
      &rsMembs = %This.getSupervisorManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate);
      If &rsMembs = Null Then
         &bMakeBreadcrumbs = False;
      Else
         If &rsMembs.ActiveRowCount = 1 And
               &rsMembs(1).HRMH_MATRX_MEMB.EMPLID.Value = &recMatrixDefn.HRMH_OWNER_EMPLID.Value Then
            &bMakeBreadcrumbs = False;
         End-If;
         
         /* level = focus -1, focus = N, type = (S) supervisor */
         &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsMembs, &nParentLevel, "N", "S");
         If &rsTemp = Null Then
            &bMakeBreadcrumbs = False;
         End-If;
      End-If;
   End-If;
   
   /* copyto final return rowset */
   If &rsTemp <> Null Then
      &rsReturn = %This.addToStructureRowset(&rsTemp, &rsReturn);
      &rsTemp = Null;
   End-If;
   /* rebuild &rsMembs to prepare for more rows */
   &rsMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   
   /* get focus node's peers if &bShowSiblings is True */
   If &bShowSiblings = True Then
      &rsMembs = %This.getPeersManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate, True, &LimitLevel2 /*%This.oChartDisplayUtils.arrLevelNodeLimits [2]*/);
      If &rsMembs <> Null Then
         /*14204166*/
         If &LimitLevel2 > 0 And
               &rsMembs.ActiveRowCount > %This.arrLevelNodeLimits [2] Then
            %This.oChartDisplayUtils.setPeersMsg();
            rem &rsMembs = %This.deleteRowsetRows(&rsMembs, %This.arrLevelNodeLimits [2]);
         End-If;
         /*14204166*/
         /*  level = same as focus, focus = N, type = (P) peer  */
         &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsMembs, &nTargetLevel, "N", "P");
      End-If;
      /* copyto final return rowset */
      If &rsTemp = Null Then
         &rsReturn = %This.addToStructureRowset(&rsTarget, &rsReturn);
      Else
         &rsTemp.InsertRow(&rsTemp.ActiveRowCount);
         &rsTarget(1).GetRecord(Record.HR_OC_NODE_WRK).CopyFieldsTo(&rsTemp(&rsTemp.ActiveRowCount).GetRecord(Record.HR_OC_NODE_WRK));
         /* BL:  STUB - CENTER FOCUS NODE */
         &rsReturn = %This.addToStructureRowset(&rsTemp, &rsReturn);
      End-If;
   End-If;
   
   /* if matrix is blank, return null */
   If &rsReturn = Null Or
         None(&rsReturn(1).HR_OC_NODE_WRK.PTCHART_NODE.Value) Then
      Return Null;
   End-If;
   
   /*14204166*/
   %This.oChartDisplayUtils.setChartInfoBox(&FocusNodeDescr);
   /*14204166*/
   
   If &bMakeBreadcrumbs And
         Not &iLimitDrillUp Then
      Local Rowset &rsReturnCrumbs;
      &rsReturnCrumbs = %This.addBreadcrumbNodesToRootManual(&rsReturn, &recMatrixDefn, &arrDataPath);
      If &rsReturnCrumbs <> Null Then
         Return &rsReturnCrumbs;
      End-If;
   End-If;
   
   Return &rsReturn;
end-method;

method setStructRowSetManual
   /+ &recMatrixDefn as Record, +/
   /+ &recMemb as Rowset, +/
   /+ &level as Integer, +/
   /+ &sFocus as String, +/
   /+ &sType as String +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsJob;
   Local integer &i, &count;
   For &i = 1 To &recMemb.ActiveRowCount
      If &i = 1 Then
         &rsReturn(1).HR_OC_NODE_WRK.PTCHART_NODE.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value | &iOrgViewerDelim | &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value;
         
         &rsReturn(1).HR_OC_NODE_WRK.EMPLID.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value;
         &rsReturn(1).HR_OC_NODE_WRK.EMPL_RCD.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value;
         
         If &level = 1 Then
            &rsReturn(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = "";
         Else
            If All(&recMemb(&i).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value) Then
               &rsReturn(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &recMemb(&i).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value | &iOrgViewerDelim | &recMemb(&i).HRMH_MATRX_MEMB.SUPERVIS_EMPL_RCD.Value;
            End-If;
         End-If;
         &rsReturn(1).HR_OC_NODE_WRK.PTNODE_DESCR1.Value = get_person_name(&recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value, "", "", "");
         &rsReturn(1).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_TITLE.Value;
         &rsReturn(1).HR_OC_NODE_WRK.JOBTITLE.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_TITLE.Value;
         &rsReturn(1).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = &sFocus;
         Evaluate &sType
         When "F" /* focus */
            If &level = 1 Then
               &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
            Else
               If Not %This.isLeaderManual(&recMatrixDefn, &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value) Then
                  &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "N";
               Else
                  &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
               End-If;
            End-If;
            /* store the focus node value and its parent */
            &iLastFocusNodeId = &rsReturn(1).HR_OC_NODE_WRK.PTCHART_NODE.Value;
            &iLastParentOfFocusNodeId = &rsReturn(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value;
            If &iLastTopNodeId = "" And
                  None(&rsReturn(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
               /* store the top node */
               &iLastTopNodeId = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value;
            End-If;
         When "C" /* child */
         When "P" /* peer */
            If Not %This.isLeaderManual(&recMatrixDefn, &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value) Then
               &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "N";
            Else
               &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "X";
            End-If;
         When "S" /* supervisor */
            &rsReturn(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
         End-Evaluate;
         &rsReturn(1).HR_OC_NODE_WRK.HRMH_MATRIX_ID.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_MATRIX_ID.Value;
         &rsReturn(1).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value = &level;
         If &rsReturn(1).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value > &iChartLevels Then
            &iChartLevels = &rsReturn(1).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value;
         End-If;
         If %This.bSmartNavMode = False Then
            &rsJob = CreateRowset(Record.HRCD_NDE_JOB_VW);
            /* fetch the job details for this node */
            &rsJob.Fill("WHERE FILL.EMPLID = :1 AND FILL.EMPL_RCD = :2 AND FILL.EFFDT = (SELECT MAX(E.EFFDT) FROM PS_HRCD_NDE_JOB_VW E WHERE E.EMPLID = FILL.EMPLID AND E.EMPL_RCD = FILL.EMPL_RCD AND E.EFFDT <= %DateIn(:3))", &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value, &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value, %Date);
            /* copy job details for this node */
            &rsJob(1).GetRecord(Record.HRCD_NDE_JOB_VW).CopyFieldsTo(&rsReturn(1).GetRecord(Record.HR_OC_NODE_WRK));
         End-If;
         
         
      Else
         
         &rsReturn.InsertRow(&rsReturn.ActiveRowCount);
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value | &iOrgViewerDelim | &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value;
         
         If &level = 1 Then
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = "";
         Else
            If All(&recMemb(&i).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value) Then
               &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &recMemb(&i).HRMH_MATRX_MEMB.SUPERVISOR_ID.Value | &iOrgViewerDelim | &recMemb(&i).HRMH_MATRX_MEMB.SUPERVIS_EMPL_RCD.Value;
            End-If;
         End-If;
         
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.EMPLID.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.EMPL_RCD.Value = &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value;
         
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR1.Value = get_person_name(&recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value, "", "", "");
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_TITLE.Value;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.JOBTITLE.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_TITLE.Value;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = &sFocus;
         Evaluate &sType
         When "F" /* focus */
            If &level = 1 Then
               &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
            Else
               If Not %This.isLeaderManual(&recMatrixDefn, &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value) Then
                  &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "N";
               Else
                  &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
               End-If;
            End-If;
         When "C" /* child */
         When "P" /* peer */
            If Not %This.isLeaderManual(&recMatrixDefn, &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value) Then
               &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "N";
            Else
               &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "X";
            End-If;
         When "S" /* supervisor */
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
         End-Evaluate;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HRMH_MATRIX_ID.Value = &recMemb(&i).HRMH_MATRX_MEMB.HRMH_MATRIX_ID.Value;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value = &level;
         If &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value > &iChartLevels Then
            &iChartLevels = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value;
         End-If;
         If %This.bSmartNavMode = False Then
            &rsJob = CreateRowset(Record.HRCD_NDE_JOB_VW);
            /* fetch the job details for this node */
            &rsJob.Fill("WHERE FILL.EMPLID = :1 AND FILL.EMPL_RCD = :2 AND FILL.EFFDT = (SELECT MAX(E.EFFDT) FROM PS_HRCD_NDE_JOB_VW E WHERE E.EMPLID = FILL.EMPLID AND E.EMPL_RCD = FILL.EMPL_RCD AND E.EFFDT <= %DateIn(:3))", &recMemb(&i).HRMH_MATRX_MEMB.EMPLID.Value, &recMemb(&i).HRMH_MATRX_MEMB.EMPL_RCD.Value, %Date);
            /* copy job details for this node */
            &rsJob(1).GetRecord(Record.HRCD_NDE_JOB_VW).CopyFieldsTo(&rsReturn(&rsReturn.ActiveRowCount).GetRecord(Record.HR_OC_NODE_WRK));
         End-If;
      End-If;
   End-For;
   Return &rsReturn;
end-method;


method getNLvlStructManual
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Rowset +/
   %This.bSmartNavMode = False;
   Return %This.get3LvlChartManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate, &bShowSiblings, True, False, Null);
end-method;

method drillDownManualRecursive
   /+ &recMatrixDefn as Record, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &dAsOfDate as Date, +/
   /+ &nTargetLevel as Integer +/
   /+ Returns Rowset +/
   Local integer &nChildLevel, &i;
   Local Rowset &rsMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local Rowset &rsSubMembs = CreateRowset(Record.HRMH_MATRX_MEMB);
   Local Rowset &rsTemp = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   
   If %This.isLeaderManual(&recMatrixDefn, &sTargetEmplId) Then
      &rsMembs = %This.drillDownManual(&recMatrixDefn, &sTargetEmplId, &TargetEmplRcd, &dAsOfDate, 0);
      If &rsMembs <> Null Then
         &nChildLevel = &nTargetLevel + 1;
         /* level = focus +1, focus = N, type = (C) children */
         &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsMembs, &nChildLevel, "N", "C");
         If &rsTemp <> Null Then
            &rsReturn = %This.addToStructureRowset(&rsTemp, &rsReturn);
         End-If;
         For &i = 1 To &rsMembs.ActiveRowCount
            &rsSubMembs = %This.drillDownManualRecursive(&recMatrixDefn, &rsMembs(&i).GetRecord(Record.HRMH_MATRX_MEMB).EMPLID.Value, &rsMembs(&i).GetRecord(Record.HRMH_MATRX_MEMB).EMPL_RCD.Value, &dAsOfDate, &nChildLevel);
            If &rsSubMembs <> Null Then
               &rsReturn = %This.addToStructureRowset(&rsSubMembs, &rsReturn);
            End-If;
         End-For;
      End-If;
   End-If;
   Return &rsReturn;
end-method;


/*** AccessType-based methods */
/*** 
Method:  isMemberAccessType
Description:  
*/
method isMemberAccessType
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as String, +/
   /+ &dAsOfDate as Date +/
   /+ Returns Boolean +/
   Local Rowset &rs_all_reports = CreateRowset(Record.HR_DRPT_RS_WK);
   Local boolean &isMember = False;
   Local number &i;
   Local string &sExists, &dr_tbl_ready, &where, &sql_rslt;
   
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return &isMember;
   End-If;
   If &sEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
         /* if the passed emplid is the owner they are only a member if the owner is the top of the hierarchy */
         &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
      &isMember = True;
      
   Else
      
      If &sEmplId = &recMatrixDefn.HRMH_EMPLID_START.Value Then
         &isMember = True;
      Else
         /* if we have not already found them in the matrix search the direct reports */
         /* set the direct reports variables */
         &sExists = "";
         Evaluate &recMatrixDefn.ACCESS_TYPE.Value
         When "1" /* Dept Security Tree */
            SQLExec("Select 'X' from PS_HR_DRPT_1B_VW DR where DR.EMPLID = :1 and DR.EFFDT = (SELECT MAX(JOB2.EFFDT) FROM PS_JOB JOB2 WHERE DR.EMPLID=JOB2.EMPLID AND DR.EMPL_RCD=JOB2.EMPL_RCD AND JOB2.EFFDT <= %DateIn(:2)) and DR.ROWSECCLASS in (SELECT A.ROWSECCLASS FROM PSOPRDEFN A, PSOPRALIAS B WHERE A.OPRID = B.OPRID AND B.OPRALIASVALUE = :3 AND B.OPRALIASTYPE = 'EMP')", &sEmplId, &dAsOfDate, &recMatrixDefn.HRMH_EMPLID_START.Value, &sExists);
            If All(&sExists) Then
               &isMember = True;
            Else
               &isMember = False;
            End-If;
            Break;
         When "2" /* Access Types 2-6 use flattened DR tables */
         When "3"
         When "4"
         When "5"
         When "6"
            /*Check if DR tables are available*/
            If All(&sEmplId) Then
               
               SQLExec("SELECT HR_DR_READY_" | &recMatrixDefn.ACCESS_TYPE.Value | " FROM PS_HR_DR_CONTROL", &dr_tbl_ready);
               
               If &dr_tbl_ready = "Y" Then
                  Local string &sBind1;
                  &sql_rslt = "N";
                  /* Use direct reports tables */
                  If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
                     /* 20471970 remove drill down flag to allow for empty positions to be found */
                     &where = " WHERE SUPERVISOR_ID = :1 AND EMPLID = :2";
                     &sBind1 = &recMatrixDefn.HRMH_EMPLID_START.Value;
                  Else
                     If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
                        
                        &where = " WHERE (POSITION_NBR = '" | &recMatrixDefn.HRMH_POSN_START.Value | "' OR SUPERVISOR_ID IN (SELECT DISTINCT A.EMPLID FROM PS_HR_DIRECT_REP_" | &recMatrixDefn.ACCESS_TYPE.Value | " A WHERE A.POSITION_NBR = :1)) AND EMPLID = :2";
                        &sBind1 = &recMatrixDefn.HRMH_POSN_START.Value;
                     End-If;
                  End-If;
                  SQLExec("Select 'Y' from PS_HR_DIRECT_REP_" | &recMatrixDefn.ACCESS_TYPE.Value | &where, &sBind1, &sEmplId, &sql_rslt);
                  If &sql_rslt = "Y" Then
                     &isMember = True;
                  End-If;
                  Break;
               End-If;
            End-If;
            
         When-Other
            /* This will run if access type 7 or if the dr table is not ready */
            &DirectReports.TargetEmplid = &recMatrixDefn.HRMH_EMPLID_START.Value;
            &DirectReports.TargetPosition = &recMatrixDefn.HRMH_POSN_START.Value;
            &DirectReports.GroupId = &recMatrixDefn.GB_GROUP_ID.Value;
            /* check Force Group Rebuild flag and send appropriate RebuildGroup property - only in initial drilldown
            If &recMatrixDefn.HR_DR_REFRESH_GRP.Value = "Y" Then
               &DirectReports.RebuildGroup = True;
            Else
               &DirectReports.RebuildGroup = False;
            End-If;*/
            &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
            /* call direct reports method to get all members in the matrix*/
            &rs_all_reports = &DirectReports.GetAllDirectAndIndirectReports(100);
            /* find if the passed emplid is in the rowset */
            For &i = 1 To &rs_all_reports.ActiveRowCount
               If &sEmplId = &rs_all_reports(&i).HR_DRPT_RS_WK.EMPLID.Value Then
                  &isMember = True;
                  Break;
               End-If;
            End-For;
            
         End-Evaluate;
      End-If;
   End-If;
   rem WriteToLog(%ApplicationLogFence_Level1, "IS MEMBER ACCESS TYPE " | &isMember | " FOR " | &sEmplId | " Matrix - " | &recMatrixDefn.DESCR.Value | " access type - " | &recMatrixDefn.ACCESS_TYPE.Value);
   
   Return &isMember;
end-method;


/*** 
Method:  isLeaderAccessType
Description:  
*/
method isLeaderAccessType
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as String +/
   /+ Returns Boolean +/
   Local string &tmp_pos_nbr, &dr_tbl_ready, &sql_rslt, &where, &sBind1;
   Local boolean &matrix_member, &isLeader;
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return False;
   End-If;
   
   Local integer &nTargetEmplRcd;
   
   If All(&TargetEmplRcd) And
         IsNumber(&TargetEmplRcd) Then
      &nTargetEmplRcd = Value(&TargetEmplRcd);
   End-If;
   
   If &sEmplId = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
         /* if the passed emplid is the owner they are only a member if the owner is the top of the hierarchy */
         &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
      &isLeader = True;
   Else
      If &recMatrixDefn.ACCESS_TYPE.Value = 1 Or
            &recMatrixDefn.ACCESS_TYPE.Value = 7 Then
         /* These access types have only the owner as a leader */
         If &recMatrixDefn.HRMH_EMPLID_START.Value = &sEmplId Then
            &isLeader = True;
         Else
            &isLeader = False;
         End-If;
      Else
         /* set the direct reports variables */
         If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
            /* find the position of the current person to determine if they are the starting one */
            SQLExec("SELECT POSITION_NBR FROM PS_JOB A WHERE  EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = A.EmplID AND EMPL_RCD = A.EMPL_RCD AND C.EffDt <= %CurrentDateIn) AND A.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = A.EmplID AND D.EMPL_RCD = A.EMPL_RCD AND D.EffDt = A.EffDt) AND EMPLID = :1 AND EMPL_RCD = :2", &sEmplId, &TargetEmplRcd, &tmp_pos_nbr);
         End-If;
         
         If &recMatrixDefn.HRMH_POSN_START.Value = &tmp_pos_nbr And
               All(&recMatrixDefn.HRMH_POSN_START.Value) Then
            &isLeader = True;
         Else
            
            SQLExec("SELECT HR_DR_READY_" | &recMatrixDefn.ACCESS_TYPE.Value | " FROM PS_HR_DR_CONTROL", &dr_tbl_ready);
            
            If &dr_tbl_ready = "Y" Then
               &sql_rslt = "N";
               /* Use direct reports tables */
               /* does the passed emplid report to the starting emplid and have supervisor flag = y*/
               If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
                  If All(&TargetEmplRcd) Then
                     &where = " WHERE SUPERVISOR_ID = :1 AND EMPLID = :2 AND EMPL_RCD = :3 AND SUPERVISOR_FLAG = 'Y'";
                  Else
                     /* 20471970 remove drill down flag to allow for empty positions to be found */
                     REM  REMOVE DRILL_DOWN_FLAG = 'Y' TO ALLOW FOR EMPTY POSITIONS &where = " WHERE SUPERVISOR_ID = :1 AND EMPLID = :2  AND DRILL_DOWN_FLAG = 'Y' AND SUPERVISOR_FLAG = 'Y'";
                     &where = " WHERE SUPERVISOR_ID = :1 AND EMPLID = :2  AND SUPERVISOR_FLAG = 'Y'";
                  End-If;
                  &sBind1 = &recMatrixDefn.HRMH_EMPLID_START.Value;
               Else
                  If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
                     /* 20471970 remove drill down flag to allow for empty positions to be found */
                     REM &where = " WHERE EXISTS (SELECT 'X' from PS_JOB A where POSITION_NBR = :1 AND C.EMPLID = DR.SUPERVISOR_ID AND C.EMPL_RCD = DR.SUPERVIS_EMPL_RCD and EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = A.EmplID AND EMPL_RCD = A.EMPL_RCD AND C.EffDt <= %CurrentDateIn ) AND A.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = A.EmplID AND D.EMPL_RCD = A.EMPL_RCD AND D.EffDt = A.EffDt))  AND EMPLID = :2 AND EMPL_RCD = :3 and DRILL_DOWN_FLAG = 'Y' AND SUPERVISOR_FLAG = 'Y ";
                     &where = " WHERE EXISTS (SELECT 'X' from PS_JOB A where POSITION_NBR = :1 AND C.EMPLID = DR.SUPERVISOR_ID AND C.EMPL_RCD = DR.SUPERVIS_EMPL_RCD and EFFDT = (SELECT MAX(C.EffDt) FROM PS_Job C WHERE C.EmplID = A.EmplID AND EMPL_RCD = A.EMPL_RCD AND C.EffDt <= %CurrentDateIn ) AND A.EffSeq = (SELECT MAX(D.EffSeq) FROM PS_Job D WHERE D.EmplID = A.EmplID AND D.EMPL_RCD = A.EMPL_RCD AND D.EffDt = A.EffDt))  AND EMPLID = :2 AND EMPL_RCD = :3 AND SUPERVISOR_FLAG = 'Y ";
                     &sBind1 = &recMatrixDefn.HRMH_POSN_START.Value;
                  End-If;
               End-If;
               If All(&TargetEmplRcd) Then
                  SQLExec("Select 'Y' from PS_HR_DIRECT_REP_" | &recMatrixDefn.ACCESS_TYPE.Value | " DR " | &where, &sBind1, &sEmplId, &nTargetEmplRcd, &sql_rslt);
               Else
                  SQLExec("Select 'Y' from PS_HR_DIRECT_REP_" | &recMatrixDefn.ACCESS_TYPE.Value | " DR " | &where, &sBind1, &sEmplId, &sql_rslt);
               End-If;
               If &sql_rslt = "Y" Then
                  &isLeader = True;
               Else
                  &isLeader = False;
               End-If;
            Else
               /* first check if the login reports to the starting emplid or position*/
               
               &matrix_member = %This.isMemberAccessType(&recMatrixDefn, &sEmplId, &TargetEmplRcd, %Date);
               
               If &matrix_member = False Then
                  &isLeader = False;
                  
               Else
                  
                  &DirectReports.NavigationMethod = &recMatrixDefn.ACCESS_TYPE.Value;
                  &DirectReports.TargetEmplid = &sEmplId;
                  &DirectReports.TargetERN = &nTargetEmplRcd;
                  /* call direct reports method */
                  &isLeader = &DirectReports.IsSupervisor();
               End-If;
            End-If;
         End-If;
      End-If;
   End-If;
   rem WriteToLog(%ApplicationLogFence_Level1, "IS LEAD ACCESS TYPE " | &isLeader | " FOR " | &sEmplId);
   
   Return &isLeader;
end-method;

method isOwnerAccessType
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &EmplRcd as String, +/
   /+ &sSeed as String +/
   /+ Returns Boolean +/
   Local boolean &isOwner = False;
   If &recMatrixDefn = Null Then
      Return False;
   End-If;
   
   If None(&sSeed) Then
      Return True;
   End-If;
   
   Local integer &nEmplRcd;
   
   If All(&EmplRcd) And
         IsNumber(&EmplRcd) Then
      &nEmplRcd = Value(&EmplRcd);
   End-If;
   
   /* owner is on top of the hierarchy */
   If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
      /* passed emplid is the owner */
      If &recMatrixDefn.HRMH_OWNER_EMPLID.Value = &sEmplId And
            &recMatrixDefn.EMPL_RCD.Value = &nEmplRcd Then
         
         If &recMatrixDefn.ACCESS_TYPE.Value = "7" Then
            &isOwner = True;
         Else /* if the starting position nbr is the owner position nbr return true.*/
            If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
               &isOwner = True;
               
            Else
               If All(&recMatrixDefn.HRMH_EMPLID_START.Value) And
                     (&recMatrixDefn.HRMH_OWNER_EMPLID.Value <> &recMatrixDefn.HRMH_EMPLID_START.Value Or
                        &recMatrixDefn.EMPL_RCD.Value <> &recMatrixDefn.HRMH_START_EMPLRCD.Value) Then
                  &isOwner = True;
               End-If;
            End-If;
         End-If;
      End-If;
      
   End-If;
   rem WriteToLog(%ApplicationLogFence_Level1, "IS OWNER ACCESS TYPE " | &isOwner | " FOR " | &sEmplId);
   rem Return False;
   Return &isOwner;
end-method;

method getTargetAccessType
   /+ &sEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &sTargetPosn as String, +/
   /+ &sParentSeed as String +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   %This.initializeClassVariables();
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   /* add this flag for List*/
   &oChartUtility.ExportMode = %This.bExportMode;
   
   &oChartUtility.getTargetNodeDirRptsAPI(&sEmplId, &TargetEmplRcd, &sTargetPosn, %Date, &sParentSeed).CopyTo(&rsStruct);
   rem WriteToLog(%ApplicationLogFence_Level1, "getTargetAccessType " | &rsStruct(1).HR_OC_STRUCT_WK.NAME_DISPLAY.Value);
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   &iLimitDrillUp = False;
   &iInitialized = False;
   
   Return &rsReturn;
end-method;

method setStructRowSetAccessType
   /+ &DirRptsRS as Rowset, +/
   /+ &dAsOfDate as Date, +/
   /+ &NodeLevel as Number, +/
   /+ &TargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer, +/
   /+ &TargetPosn as String, +/
   /+ &ParentId as String +/
   /+ Returns Rowset +/
   Local Rowset &StructWorkRS;
   Local string &AccessFlag, &TestResult;
   Local integer &i, &j;
   Local string &CurrentEmplId;
   Local integer &CurrentEmplRcd;
   Local string &CurrentPosn;
   
   &StructWorkRS = CreateRowset(Record.HR_OC_STRUCT_WK);
   
   /* For every row passed create a stucture row */
   For &i = 1 To &DirRptsRS.ActiveRowCount
      /*&CurrentEmplId = &DirRptsRS(&i).HR_OC_DRPT_WK.EMPLID.Value;
      &CurrentEmplRcd = &DirRptsRS(&i).HR_OC_DRPT_WK.EMPL_RCD.Value;
      &CurrentPosn = &DirRptsRS(&i).HR_OC_DRPT_WK.POSITION_NBR.Value;*/
      &CurrentEmplId = &DirRptsRS(&i).HR_DRPT_RS_WK.EMPLID.Value;
      &CurrentEmplRcd = &DirRptsRS(&i).HR_DRPT_RS_WK.EMPL_RCD.Value;
      &CurrentPosn = &DirRptsRS(&i).HR_DRPT_RS_WK.POSITION_NBR.Value;
      
      
      If All(&CurrentEmplId) Or
            All(&CurrentPosn) Then
         If None(&CurrentEmplId) And
               All(&CurrentPosn) And
               rem &DirRptsRS(&i).HR_OC_DRPT_WK.HR_DRPT_INDIRECT.Value <> "Y" And;
               &DirRptsRS(&i).HR_DRPT_RS_WK.HR_DRPT_INDIRECT.Value <> "Y" And
               %This.bSmartNavMode Then
            /* empty position with no directs - do not process */
         Else
            &j = &j + 1;
            If &j > 1 Then
               &StructWorkRS.InsertRow(&StructWorkRS.ActiveRowCount);
            End-If;
            rem &j = &StructWorkRS.ActiveRowCount;
            rem &DirRptsRS(&i).HR_OC_DRPT_WK.CopyFieldsTo(&StructWorkRS(&j).HR_OC_STRUCT_WK);
            &DirRptsRS(&i).HR_DRPT_RS_WK.CopyFieldsTo(&StructWorkRS(&j).HR_OC_STRUCT_WK);
            
            If All(&CurrentEmplId) Then
               /* comment by yajuan @05/12
               If Not %This.SmartNavMode Then
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.PTCHART_NODE.Value = &CurrentEmplId;
               Else*/
               &StructWorkRS(&j).HR_OC_STRUCT_WK.PTCHART_NODE.Value = &CurrentEmplId | &iOrgViewerDelim | String(&CurrentEmplRcd);
               /*End-If;*/
               &StructWorkRS(&j).HR_OC_STRUCT_WK.DESCR.Value = &DirRptsRS(&i).HR_DRPT_RS_WK.NAME_DISPLAY.Value;
               rem &DirRptsRS(&i).HR_OC_DRPT_WK.NAME_DISPLAY.Value;
               &StructWorkRS(&j).HR_OC_STRUCT_WK.NAME_DISPLAY.Value = &DirRptsRS(&i).HR_DRPT_RS_WK.NAME_DISPLAY.Value;
               rem &DirRptsRS(&i).HR_OC_DRPT_WK.NAME_DISPLAY.Value;
            Else
               /* empty position */
               If Not %This.bSmartNavMode Then
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.PTCHART_NODE.Value = &CurrentPosn;
               Else
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.PTCHART_NODE.Value = &CurrentPosn | &iOrgViewerDelim | "P";
               End-If;
               
               Local Record &PositionRec;
               &PositionRec = CreateRecord(Record.POSITION_DATA);
               &PositionRec.POSITION_NBR.Value = &CurrentPosn;
               
               If &PositionRec.SelectByKeyEffDt(&dAsOfDate) Then
                  &PositionRec.CopyFieldsTo(&StructWorkRS(&j).HR_OC_STRUCT_WK);
                  If All(&PositionRec.BUSINESS_UNIT.Value) Then
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.SETID_JOBCODE.Value = GetSetId("BUSINESS_UNIT", &PositionRec.BUSINESS_UNIT.Value, Record.JOBCODE_TBL, "");
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.SETID_LOCATION.Value = GetSetId("BUSINESS_UNIT", &PositionRec.BUSINESS_UNIT.Value, Record.LOCATION_TBL, "");
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.SETID_DEPT.Value = GetSetId("BUSINESS_UNIT", &PositionRec.BUSINESS_UNIT.Value, Record.DEPT_TBL, "");
                  End-If;
               End-If;
               &StructWorkRS(&j).HR_OC_STRUCT_WK.DESCR.Value = &iEmptyPosnText;
               &StructWorkRS(&j).HR_OC_STRUCT_WK.NAME_DISPLAY.Value = &iEmptyPosnText;
            End-If;
            
            If None(&ParentId) And
                  &NodeLevel = 1 Then
               &StructWorkRS(&j).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value = " ";
            Else
               &StructWorkRS(&j).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value = &ParentId;
            End-If;
            
            rem &StructWorkRS(&j).HR_OC_STRUCT_WK.DESCR.Value = &DirRptsRS(&i).HR_OC_DRPT_WK.NAME_DISPLAY.Value;
            &StructWorkRS(&j).HR_OC_STRUCT_WK.DESCR.Value = &DirRptsRS(&i).HR_DRPT_RS_WK.NAME_DISPLAY.Value;
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_LEVEL_NUM.Value = &NodeLevel;
            
            /*If Not %This.SmartNavMode Then*/
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_SOURCE_TYPE.Value = "DR";
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_NODE_FLD.Value = " ";
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_PARENT_FLD.Value = " ";
            rem &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_IS_PARENT.Value = &DirRptsRS(&i).HR_OC_DRPT_WK.HR_DRPT_INDIRECT.Value;
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_IS_PARENT.Value = &DirRptsRS(&i).HR_DRPT_RS_WK.HR_DRPT_INDIRECT.Value;
            &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "N";
            &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_PERSON.Value = "N";
            &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_JOBCODE.Value = "N";
            &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_POSITION.Value = "N";
            /*End-If;*/
            
            If All(&CurrentEmplId) Then
               /* Test if key person */
               If Not %This.bSmartNavMode Then
                  &TestResult = "";
                  SQLExec(SQL.HR_OC_KEY_PERSON_TEST, &CurrentEmplId, &dAsOfDate, &TestResult);
                  If All(&TestResult) Then
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_PERSON.Value = "Y";
                  End-If;
               End-If;
               
               If (&CurrentEmplId = &TargetEmplId And
                     &CurrentEmplRcd = &TargetEmplRcd) Then
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y";
               End-If;
               &StructWorkRS(&j).HR_OC_STRUCT_WK.INCUMBENT.Value = 1;
            Else
               If All(&CurrentPosn) Then
                  If &CurrentPosn = &TargetPosn Then
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y";
                  End-If;
                  If Not %This.bSmartNavMode Then
                     &StructWorkRS(&j).HR_OC_STRUCT_WK.INCUMBENT.Value = SQLExec(SQL.HR_OC_POSN_ACTIVE_INCUMBENT_CT, &CurrentPosn, &dAsOfDate);
                  End-If;
               End-If;
            End-If;
            
            If All(&CurrentPosn) And
                  Not %This.bSmartNavMode Then
               &TestResult = "";
               SQLExec(SQL.HR_OC_KEY_POSITION, &CurrentPosn, &dAsOfDate, &TestResult);
               If All(&TestResult) Then
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_POSITION.Value = &TestResult;
               End-If;
            End-If;
            
            If All(&StructWorkRS(&j).HR_OC_STRUCT_WK.SETID_JOBCODE.Value, &StructWorkRS(&j).HR_OC_STRUCT_WK.JOBCODE.Value) And
                  Not %This.bSmartNavMode Then
               &TestResult = "";
               SQLExec(SQL.HR_OC_KEY_JOBCODE, &StructWorkRS(&j).HR_OC_STRUCT_WK.SETID_JOBCODE.Value, &StructWorkRS(&j).HR_OC_STRUCT_WK.JOBCODE.Value, &dAsOfDate, &TestResult);
               If All(&TestResult) Then
                  &StructWorkRS(&j).HR_OC_STRUCT_WK.KEY_JOBCODE.Value = &TestResult;
               End-If;
            End-If;
         End-If;
      End-If;
   End-For;
   Return &StructWorkRS;
end-method;

/*** Tree-based methods */
/*** 
Method:  isMemberTree
Description:  
*/
method isMemberTree
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &bTestLead as Boolean +/
   /+ Returns Boolean +/
   Local boolean &bReturn;
   Local integer &i;
   
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return False;
   End-If;
   /* employee passed to method is the owner so is not a lead */
   If &recMatrixDefn.HRMH_OWNER_EMPLID.Value = &sEmplId And
         &bTestLead Then
      Return False;
   End-If;
   
   
   /* set & validate the tree and starting node defined on the matrix */
   If %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
      /* get tree_node for &sEmplId */
      If &oTree <> Null And
            &oTreeNodeKeyUtil <> Null Then
         
         Local array of string &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&sEmplId);
         
         For &i = 1 To &arrTreeNodes.Len
            Local string &sTempNodeName = &arrTreeNodes [&i];
            
            If &sTempNodeName = &recMatrixDefn.TREE_NODE_START.Value Then
               /* quick check b/c start node is already exists in tree */
               &bReturn = True;
            Else
               /* determine if current node is in the population defined for matrix - i.e. reports to start node */
               If %This.isChildTreeNode(&sTempNodeName) Then
                  /* the node exists and reports directly or indirectly to the start node */
                  &bReturn = True;
               End-If;
            End-If;
            
            If &bReturn And
                  &bTestLead Then
               /* test that node is a "lead" node */
               Local ApiObject &oTempNode = &oTree.FindNode(&sTempNodeName, "");
               If &oTempNode <> Null Then
                  If &oTempNode.HasChildren Then
                     /* is leader */
                     &bReturn = True;
                  Else
                     /* not leader */
                     &bReturn = False;
                  End-If;
               End-If;
            End-If;
            
            If &bReturn Then
               /* don't keep checking */
               Break;
            End-If;
         End-For;
         
      End-If;
   End-If;
   
   Return &bReturn;
end-method;

/*** 
Method:  isLeaderTree
Description:  
*/
method isLeaderTree
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn;
   Local integer &i;
   
   If None(&sEmplId) Or
         &recMatrixDefn = Null Then
      Return False;
   End-If;
   
   If %This.isMemberTree(&recMatrixDefn, &sEmplId, True) Then
      &bReturn = True;
   End-If;
   
   Return &bReturn;
end-method;

method getTargetTree
   /+ &treeName as String, +/
   /+ &treeNode as String, +/
   /+ &asOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &lvlNum as Integer +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   
   Local HR_OC:ChartUtility &oChartUtility = create HR_OC:ChartUtility();
   &oChartUtility.SmartNavMode = False;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   Local Record &param = CreateRecord(Record.HR_OC_PARM_TREE);
   &param = CreateRecord(Record.HR_OC_PARM_TREE);
   &param.TREE_NAME.Value = &treeName;
   &param.TREE_NODE.Value = &treeNode;
   &param.ASOFDATE.Value = &asOfDate;
   If &iLimitDrillUp Then
      &param.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &param.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &oChartUtility.getTargetTree(&param, &lvlNum).CopyTo(&rsStruct);
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   Return &rsReturn;
end-method;

method isOwnerTree
   /+ &recMatrixDefn as Record, +/
   /+ &treeNode as String +/
   /+ Returns Boolean +/
   If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
      If All(&treeNode) Then
         Local Rowset &rs = %This.getTargetTree(&recMatrixDefn.TREE_NAME.Value, &treeNode, %Date, False, 1);
         If &rs <> Null And
               &rs.ActiveRowCount > 0 And
               (&rs(1).HR_OC_NODE_WRK.EMPLID.Value = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                  &rs(1).HR_OC_NODE_WRK.EMPL_RCD.Value = &recMatrixDefn.EMPL_RCD.Value And
                  &treeNode <> &recMatrixDefn.TREE_NODE_START.Value) Then
            Return True;
         End-If;
      Else
         If %This.getOwnerTreeNode(&recMatrixDefn, &recMatrixDefn.HRMH_OWNER_EMPLID.Value, &recMatrixDefn.EMPL_RCD.Value) <> &recMatrixDefn.TREE_NODE_START.Value Then
            Return True;
         End-If;
      End-If;
   End-If;
   
   Return False;
end-method;

method getOwnerTreeNode
   /+ &recMatrixDefn as Record, +/
   /+ &sEmplId as String, +/
   /+ &sEmplRcd as Number +/
   /+ Returns String +/
   Local boolean &bReturn;
   Local integer &i;
   
   If None(&sEmplId) Or
         None(&sEmplRcd) Or
         &recMatrixDefn = Null Then
      Return "";
   End-If;
   
   /* set & validate the tree and starting node defined on the matrix */
   If %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
      /* get tree_node for &sEmplId */
      If &oTree <> Null And
            &oTreeNodeKeyUtil <> Null Then
         Return &oTreeNodeKeyUtil.getTreeNodeKeyFirst(&sEmplId, &sEmplRcd);
      End-If;
   End-If;
   
   Return "";
end-method;

/*** 
Method:  get3LvlChartTree
Description:  
*/
method get3LvlChartTree
   /+ &recMatrixDefn as Record, +/
   /+ &sSeedTreeNodeName as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean, +/
   /+ &bIncludeBreadcrumbs as Boolean, +/
   /+ &arrDataPath as Array of String +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   
   If &recMatrixDefn = Null Then
      Return Null;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = %This.bSmartNavMode;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   /*14204166*/
   &oChartUtility.GenChartInfoBox = %This.GenChartInfoBox;
   &oChartUtility.ChartAdditionalInfoMsg = %This.ChartAdditionalInfoMsg;
   /*14204166*/
   &recParms = CreateRecord(Record.HR_OC_PARM_TREE);
   &recParms.ASOFDATE.Value = &dAsOfDate;
   &recParms.TREE_NAME.Value = &recMatrixDefn.TREE_NAME.Value;
   &recParms.TREE_NODE.Value = &sSeedTreeNodeName;
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &oChartUtility.getStructure3LvlTree(&recParms).CopyTo(&rsStruct);
   
   /*14204166*/
   %This.oChartDisplayUtils.ChartInfoBoxHTML = &oChartUtility.ChartInfoBoxHTML;
   /*14204166*/
   
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   If &bIncludeBreadcrumbs And
         Not &iLimitDrillUp And
         &rsReturn <> Null Then
      Local Rowset &rsReturnCrumbs;
      &rsReturnCrumbs = %This.addBreadcrumbNodesToRootTree(&rsReturn, &recMatrixDefn, &arrDataPath);
      If &rsReturnCrumbs <> Null Then
         Return &rsReturnCrumbs;
      End-If;
   End-If;
   
   Return &rsReturn;
end-method;

/*** 
Method:  getNLvlStuctTree
Description:  
*/
method getNLvlStuctTree
   /+ &recMatrixDefn as Record, +/
   /+ &sSeedTreeNodeName as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &bShowSiblings as Boolean +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local Rowset &rsStruct = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local HR_OC:ChartUtility &oChartUtility;
   Local Record &recParms;
   Local integer &i;
   
   If &recMatrixDefn = Null Then
      Return Null;
   End-If;
   
   &oChartUtility = create HR_OC:ChartUtility();
   
   &oChartUtility.SmartNavMode = False;
   &oChartUtility.ShowSiblings = &bShowSiblings;
   
   
   &recParms = CreateRecord(Record.HR_OC_PARM_TREE);
   &recParms.ASOFDATE.Value = &dAsOfDate;
   &recParms.TREE_NAME.Value = &recMatrixDefn.TREE_NAME.Value;
   &recParms.TREE_NODE.Value = &sSeedTreeNodeName;
   If &iLimitDrillUp Then
      &recParms.DRPT_TEST_LMT_DRUP.Value = "T";
   Else
      &recParms.DRPT_TEST_LMT_DRUP.Value = "F";
   End-If;
   
   &oChartUtility.getStructureNLvlTree(&recParms).CopyTo(&rsStruct);
   &rsReturn = %This.setStructRowSet(&rsStruct);
   
   Return &rsReturn;
end-method;

/*** Set tree instance variables and validates the tree and checks that node exists in the tree */
/*** 
Method:  setValidateTree
Description:  
*/
method setValidateTree
   /+ &sTreeName as String, +/
   /+ &sTreeNodeName as String +/
   /+ Returns Boolean +/
   Local integer &nResult;
   Local Record &recTreeDefn;
   Local boolean &bReturn = False;
   
   %This.initializeTreeVariables();
   
   If None(&sTreeName) Then
      Return False;
   End-If;
   
   &recTreeDefn = CreateRecord(Record.PSTREEDEFN);
   &recTreeDefn.TREE_NAME.Value = &sTreeName;
   
   If &recTreeDefn.SelectByKeyEffDt(%Date) Then
      /* current tree defn found */
      If &recTreeDefn.NODE_COUNT.Value = 0 Or
            &recTreeDefn.EFF_STATUS.Value <> "A" Or
            &recTreeDefn.VALID_TREE.Value <> "Y" Then
         /* tree defn invalid - no nodes, inactive, or draft */
         &bReturn = False;
      Else
         /* tree defn is valid - now test for the node in tree */
         Local ApiObject &oSession = %Session;
         If &oSession <> Null Then
            &oTree = &oSession.GetTree();
            If &oTree <> Null Then
               /* assumes that all trees passed to this method are not using indirection */
               &nResult = &oTree.OpenWholeTree("", "", &sTreeName, String(&recTreeDefn.EFFDT.Value), "", False);
               If &nResult = 0 Then
                  /* tree is open - now test if the node is in the tree */
                  If All(&sTreeNodeName) Then
                     /* start node was specified */
                     &oTreeStartNode = &oTree.FindNode(&sTreeNodeName, "");
                  Else
                     /* start node was NOT specified - assume root */
                     &oTreeStartNode = &oTree.FindRoot();
                  End-If;
                  If &oTreeStartNode <> Null Then
                     &bReturn = True;
                  End-If;
               End-If;
            End-If;
         End-If;
      End-If;
   End-If;
   
   If &bReturn Then
      &oTreeStructure = &oTree.Structure;
      &iTreeStructureId = &oTree.Structure.Name;
      &oTreeNodeKeyUtil = create HR_JOB_TREE_BLDR:TreeNodeKeyBase(&iTreeStructureId, 1, True);
   Else
      /* clean-up */
      %This.initializeTreeVariables();
   End-If;
   
   Return &bReturn;
end-method;

/*** 
Method:  isChildTreeNode
Description:  
*/
method isChildTreeNode
   /+ &TestNodeName as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn = False;
   
   If &oTree <> Null Then
      Local ApiObject &oTestNode = &oTree.FindNode(&TestNodeName, "");
      If &oTestNode = Null Or
            &oTestNode.IsRoot Or
            &oTreeStartNode.HasChildNodes = False Then
         &bReturn = False
      Else
         /* node found, no determine if it reports to &oTreeNodeStart */
         If &oTreeStartNode.IsRoot Then
            /* start node is the root node so any node found in tree reports to start node */
            &bReturn = True;
         Else
            Local ApiObject &oTempParent = &oTestNode.Parent;
            If &oTempParent.IsRoot And
                  &oTempParent.Name = &oTreeStartNode.Name Then
               /*reports directly to start node*/
               &bReturn = True;
            Else
               While Not &oTempParent.IsRoot
                  If &oTempParent.Name = &oTreeStartNode.Name Then
                     /* start node found as direct or indirect parent */
                     &bReturn = True;
                  End-If;
                  &oTempParent = &oTempParent.Parent;
               End-While;
            End-If;
         End-If;
      End-If;
   End-If;
   
   Return &bReturn;
end-method;

/*** Utilities */

/*************************************************************
* METHOD:  setFlagForStartNode
* DESCRIPTION:  Sets the flags &iStartedFromOwner and &iLimitDrillUp based on the node being requested by the calling application.
*************************************************************/
method setFlagForStartNode
   /+ &arr as Array of String, +/
   /+ &recMatrixDefn as Record +/
   
   &iStartedFromOwner = False;
   &iLimitDrillUp = False;
   
   /* if the value passed is equals to the top node - set raleted flags */
   Evaluate &recMatrixDefn.HRMH_SOURCE.Value
   When "M"
      If &arr [1] = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &arr [2] = String(&recMatrixDefn.EMPL_RCD.Value) Then
         &iStartedFromOwner = True;
         &iLimitDrillUp = True;
      End-If;
      Break;
   When "A"
      If All(&recMatrixDefn.ACCESS_TYPE.Value) Then
         If &recMatrixDefn.ACCESS_TYPE.Value = "7" Then
            /* by group id */
            If &arr [1] = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                  &arr [2] = String(&recMatrixDefn.EMPL_RCD.Value) Then
               &iStartedFromOwner = True;
               &iLimitDrillUp = True;
            End-If;
         Else
            If All(&recMatrixDefn.HRMH_EMPLID_START.Value) Then
               If (&arr [1] = &recMatrixDefn.HRMH_EMPLID_START.Value And
                     &arr [2] = String(&recMatrixDefn.HRMH_START_EMPLRCD.Value)) Then
                  /* requested node is start node */
                  &iLimitDrillUp = True;
               End-If;
               If &arr [1] = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
                     &arr [2] = String(&recMatrixDefn.EMPL_RCD.Value) And /*13687681*/
                     &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" /*13687681*/ Then
                  /* we're at the top - owner's node */
                  &iLimitDrillUp = True;
                  &iStartedFromOwner = True;
               End-If;
               
            Else
               /* start from a position nbr */
               If All(&recMatrixDefn.HRMH_POSN_START.Value) Then
                  If &arr [1] = &recMatrixDefn.HRMH_POSN_START.Value Then
                     /* we're at the start posn */
                     &iLimitDrillUp = True;
                     &iStartedFromOwner = False;
                  Else
                     If &recMatrixDefn.HRMH_OWNER_EMPLID.Value = &arr [1] And
                           &recMatrixDefn.EMPL_RCD.Value = &arr [2] Then
                        If &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" Then
                           /* we're at the top - owner's node */
                           &iLimitDrillUp = True;
                           &iStartedFromOwner = True;
                        End-If;
                     End-If;
                  End-If;
               End-If;
               
            End-If;
         End-If;
      End-If;
      Break;
   When "T"
      If All(&recMatrixDefn.TREE_NAME.Value) And
            All(&recMatrixDefn.TREE_NODE_START.Value) Then
         &iStartedFromOwner = %This.isNodeOwnersNode(&recMatrixDefn, &arr [1]);
         If &arr [1] = &recMatrixDefn.TREE_NODE_START.Value Or
               &iStartedFromOwner Then
            &iLimitDrillUp = True;
         End-If;
      End-If;
      Break;
   When-Other
   End-Evaluate;
end-method;

/*** 
Method:  setStructRowSet
Description:  Apply the raw structure to a rowset to be consumed by SmartNav and the Org Chart.
*/
method setStructRowSet
   /+ &rsStruct as Rowset +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local integer &i, &nInsertCt;
   Local string &sSeed = &iLastSeedValue;
   
   &iLastFocusNodeId = "";
   &iLastParentOfFocusNodeId = "";
   &iLastTopNodeId = "";
   &iChartLevels = 0;
   
   &rsStruct.Sort(HR_OC_STRUCT_WK.PTPARENT_CHART_ND, "A", HR_OC_STRUCT_WK.PTCHART_NODE, "A");
   
   For &i = 1 To &rsStruct.ActiveRowCount
      If &i = 1 Then
         rem &rsStruct.GetRow(1).CopyTo(&rsReturn.GetRow(1));
         &rsStruct.GetRow(1).GetRecord(1).CopyFieldsTo(&rsReturn.GetRow(1).GetRecord(1));
         
      Else
         &rsReturn.InsertRow(&rsReturn.ActiveRowCount);
         rem &rsStruct.GetRow(&i).CopyTo(&rsReturn.GetRow(&rsReturn.ActiveRowCount));
         &rsStruct.GetRow(&i).GetRecord(1).CopyFieldsTo(&rsReturn.GetRow(&rsReturn.ActiveRowCount).GetRecord(1));
      End-If;
      If &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value > &iChartLevels Then
         &iChartLevels = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.HR_OC_LEVEL_NUM.Value;
      End-If;
      &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR1.Value = &rsStruct(&i).HR_OC_STRUCT_WK.DESCR.Value;
      &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &rsStruct(&i).HR_OC_STRUCT_WK.JOBTITLE.Value;
      &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = &rsStruct(&i).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value;
      &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = &rsStruct(&i).HR_OC_STRUCT_WK.HR_OC_IS_PARENT.Value;
      rem &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTND_DISPLAY_ORDER.Value = &rsStruct(&i).HR_OC_STRUCT_WK.PTND_DISPLAY_ORDER.Value;
      
      If &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "Y" Then
         /* store the focus node value and its parent */
         &iLastFocusNodeId = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value;
         &iLastParentOfFocusNodeId = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value;
      End-If;
      If &iLastTopNodeId = "" And
            None(&rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
         /* store the top node */
         &iLastTopNodeId = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value;
      End-If;
      
      If None(&rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.TREE_NODE.Value) Then
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.TREE_NODE.Value = &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value;
         
         rem &rsReturn(&rsReturn.ActiveRowCount).HR_OC_NODE_WRK.DISPLAYED_FLAG.Value = "Y";
         
      End-If;
   End-For;
   
   Return &rsReturn;
end-method;

/*** 
Method:  setOwnerTop
Description:  
*/
method setOwnerTop
   /+ &recMatrixDefn as Record, +/
   /+ &rsChartNodes as Rowset +/
   /+ Returns Rowset +/
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_NODE_WRK);
   Local integer &i;
   Local string &sFocusNode = &iLastFocusNodeId;
   Local string &sSeed = &iLastSeedValue;
   
   &iOwnerInjected = False;
   &iInjectedOwnerNodeId = "";
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   If None(&rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) And
         (&rsChartNodes(1).HR_OC_NODE_WRK.EMPLID.Value = &recMatrixDefn.HRMH_OWNER_EMPLID.Value And
            &rsChartNodes(1).HR_OC_NODE_WRK.EMPL_RCD.Value = &recMatrixDefn.EMPL_RCD.Value) Then
      /* owner found at top of hierarchy - set job title from matrix defn */
      &rsChartNodes(1).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &recMatrixDefn.HRMH_TITLE.Value;
      &rsChartNodes(1).HR_OC_NODE_WRK.JOBTITLE.Value = &recMatrixDefn.HRMH_TITLE.Value;
   End-If;
   
   If &recMatrixDefn.HRMH_SOURCE.Value <> "M" And
         &recMatrixDefn.HRMH_OWN_TOP.Value = "Y" And
         Not &iStartedFromOwner Then
      Local boolean &bFocusOwner = True;
      If All(&sSeed) Then
         Local array of string &arrSeed = CreateArrayRept("", 0);
         &arrSeed = %This.setSeedArray(&sSeed, &recMatrixDefn);
         If &arrSeed.Len > 0 And
               All(&arrSeed [1]) And
               (&arrSeed [1] <> &recMatrixDefn.HRMH_OWNER_EMPLID.Value Or
                  &arrSeed [2] <> &recMatrixDefn.EMPL_RCD.Value) Then
            &bFocusOwner = False;
         End-If;
      End-If;
      Return %This.injectOwnerToRoot(&recMatrixDefn, &rsChartNodes, &bFocusOwner);
   Else
      Return &rsChartNodes;
   End-If;
   
end-method;

/*** 
Method:  injectOwnerToRoot
Description:  Injects a node representing the owner to the top of the hierarchy 
Assumptions:  
--This method is only called when fly-outs have been invoked directly from the folder.
--This method assumes that the chart rowset is only two levels:  the start node and that node's children.
*/
method injectOwnerToRoot
   /+ &recMatrixDefn as Record, +/
   /+ &rsChartNodes as Rowset, +/
   /+ &bFocusOwner as Boolean +/
   /+ Returns Rowset +/
   Local string &sFocusNode = &iLastFocusNodeId;
   Local string &sFocusParentNode = &iLastParentOfFocusNodeId;
   Local string &sSeed = &iLastSeedValue;
   Local string &sTopNode = &iLastTopNodeId;
   Local string &sOwnerEmplid = &recMatrixDefn.HRMH_OWNER_EMPLID.Value;
   Local integer &sOwnerEmplRcd = &recMatrixDefn.EMPL_RCD.Value;
   Local string &sInjectedNodeId;
   Local integer &i;
   Local Rowset &rsJob;
   
   If All(&sOwnerEmplid) Then
      /* sort the root node to top */
      &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
      
      &sInjectedNodeId = %This.createInjectedNodeId(&recMatrixDefn /*, &rsChartNodes*/);
      
      If All(&sInjectedNodeId) Then
         If &iLastTopNodeId <> &sInjectedNodeId Then
            
            /* prepare existing nodes */
            For &i = &rsChartNodes.ActiveRowCount To 1 Step - 1
               If &rsChartNodes(&i).HR_OC_NODE_WRK.PTCHART_NODE.Value = &sInjectedNodeId Or
                     (&i > (&OrgChartMaxNodeCount - 1)) Then
                  &rsChartNodes.DeleteRow(&i);
               Else
                  If None(&rsChartNodes(&i).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
                     /* make current top node report to new root */
                     &rsChartNodes(&i).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &sInjectedNodeId;
                     If &rsChartNodes.ActiveRowCount > 1 Then
                        &rsChartNodes(&i).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
                     End-If;
                  End-If;
                  If &bFocusOwner Then
                     &rsChartNodes(&i).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "N";
                  End-If;
               End-If;
            End-For;
            
            /* inject the owner */
            &rsChartNodes.InsertRow(&rsChartNodes.ActiveRowCount);
            &iLastFocusNodeId = &sInjectedNodeId;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value = &sInjectedNodeId;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.TREE_NODE.Value = &sInjectedNodeId;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR1.Value = get_person_name(&sOwnerEmplid, "", "", "");
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.NAME_DISPLAY.Value = &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR1.Value;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &recMatrixDefn.HRMH_TITLE.Value;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.JOBTITLE.Value = &recMatrixDefn.HRMH_TITLE.Value;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.EMPLID.Value = &sOwnerEmplid;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.EMPL_RCD.Value = &sOwnerEmplRcd;
            If &bFocusOwner Then
               &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "Y";
            Else
               &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "N";
            End-If;
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.DISPLAYED_FLAG.Value = "N";
            If Not %This.bSmartNavMode Then
               &rsJob = CreateRowset(Record.HRCD_NDE_JOB_VW);
               /* fetch the job details for this node */
               &rsJob.Fill("WHERE FILL.EMPLID = :1 AND FILL.EMPL_RCD = :2 AND FILL.EFFDT = (SELECT MAX(E.EFFDT) FROM PS_HRCD_NDE_JOB_VW E WHERE E.EMPLID = FILL.EMPLID AND E.EMPL_RCD = FILL.EMPL_RCD AND E.EFFDT <= %DateIn(:3))", &sOwnerEmplid, &sOwnerEmplRcd, &recMatrixDefn.EFFDT.Value);
               /* copy job details for this node */
               &rsJob(1).GetRecord(Record.HRCD_NDE_JOB_VW).CopyFieldsTo(&rsChartNodes(&rsChartNodes.ActiveRowCount).GetRecord(Record.HR_OC_NODE_WRK));
               
            End-If;
            
            &iInjectedOwnerNodeId = &sInjectedNodeId;
            &iOwnerInjected = True;
            
         Else
            
            For &i = 1 To &rsChartNodes.ActiveRowCount
               If None(&rsChartNodes(&i).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
                  &rsChartNodes(&i).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "Y";
                  If &rsChartNodes.ActiveRowCount > 1 Then
                     &rsChartNodes(&i).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
                  Else
                     &rsChartNodes(&i).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
                  End-If;
                  &rsChartNodes(&i).HR_OC_NODE_WRK.DISPLAYED_FLAG.Value = "Y";
                  &iLastFocusNodeId = &rsChartNodes(&i).HR_OC_NODE_WRK.PTCHART_NODE.Value;
                  
                  &rsChartNodes(&i).HR_OC_NODE_WRK.PTNODE_DESCR2.Value = &recMatrixDefn.HRMH_TITLE.Value;
                  &rsChartNodes(&i).HR_OC_NODE_WRK.JOBTITLE.Value = &recMatrixDefn.HRMH_TITLE.Value;
               Else
                  &rsChartNodes(&i).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value = "N";
               End-If;
            End-For;
         End-If;
         
      End-If;
   End-If;
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTNODE_DESCR1, "A", HR_OC_NODE_WRK.PTNODE_DESCR2, "A");
   
   Return &rsChartNodes;
end-method;

/*** 
Method:  isStartNodeOwnersNode
Description:  
*/
method isNodeOwnersNode
   /+ &recMatrixDefn as Record, +/
   /+ &sNodeName as String +/
   /+ Returns Boolean +/
   Local boolean &bReturn;
   Local string &sTestNodeName;
   
   If &recMatrixDefn <> Null Then
      If All(&recMatrixDefn.TREE_NAME.Value) And
            All(&recMatrixDefn.TREE_NODE_START.Value) And
            All(&recMatrixDefn.HRMH_OWNER_EMPLID.Value) Then
         
         &sTestNodeName = &sNodeName;
         If None(&sTestNodeName) Then
            &sTestNodeName = &recMatrixDefn.TREE_NODE_START.Value;
         End-If;
         
         /*If &oTreeNodeKeyUtil = Null Then
            &oTreeNodeKeyUtil = create HR_JOB_TREE_BLDR:TreeNodeKeyBase(&iTreeStructureId, 1, True);
         End-If;*/
         If &oTreeNodeKeyUtil = Null Then
            If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
               &oTreeNodeKeyUtil = Null;
            End-If;
         End-If;
         /* get tree_node for &sEmplId */
         If &oTreeNodeKeyUtil <> Null Then
            Local integer &i;
            Local array of string &arrTreeNodes;
            &arrTreeNodes = &oTreeNodeKeyUtil.getTreeNodeKeyAllByEmplId(&recMatrixDefn.HRMH_OWNER_EMPLID.Value);
            
            Local string &sTempNodeName;
            
            For &i = 1 To &arrTreeNodes.Len
               &sTempNodeName = &arrTreeNodes [&i];
               If &sTempNodeName = &sTestNodeName Then
                  /* owner's node matches start node */
                  &bReturn = True;
                  Break;
               End-If;
            End-For;
         End-If;
      End-If;
   End-If;
   
   Return &bReturn
end-method;





method createInjectedNodeId
   /+ &recMatrixDefn as Record +/
   /+ Returns String +/
   
   
   /* STUB - BL - The id for the injected node may already exist in the rowset.  The Tools org chart will throw an exception if there are any non-unique values for PTCHART_NODE.  This does not really make sense considering that each node has PTCHART_NODE and PTPARENT_CHART_ND as keys.  See Bug 12346380.  However, depending on Tools' repsonse, we may have to ensure that PTCHART_NODE is unique in the rowset. */
   
   Local string &sReturn;
   
   If All(&recMatrixDefn.HRMH_OWNER_EMPLID.Value) Then
      Evaluate &recMatrixDefn.HRMH_SOURCE.Value
      When "T"
         If &oTreeNodeKeyUtil = Null Then
            If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
               Return "";
            End-If;
         End-If;
         /* get tree_node for &sEmplId */
         If &oTreeNodeKeyUtil <> Null Then
            &sReturn = &oTreeNodeKeyUtil.getTreeNodeKeyFirst(&recMatrixDefn.HRMH_OWNER_EMPLID.Value, &recMatrixDefn.EMPL_RCD.Value);
         End-If;
      When-Other
         &sReturn = &recMatrixDefn.HRMH_OWNER_EMPLID.Value | &iOrgViewerDelim | String(&recMatrixDefn.EMPL_RCD.Value);
      End-Evaluate;
   End-If;
   
   Return &sReturn;
end-method;

/*** 
Method:  accessOrgViewType 
Description:  Returns a boolean as to whether the org view type can be accessed in the the given matrix.
*/
method accessOrgViewType
   /+ &recMatrixDefn as Record, +/
   /+ &TargetOrgViewType as String +/
   /+ Returns Boolean +/
   Local number &i;
   Local boolean &accessMatrix = False;
   Local Rowset &rs_OrgViews = CreateRowset(Record.HRMH_ORG_ACCESS);
   &rs_OrgViews.Flush();
   &rs_OrgViews.Fill("where HRMH_MATRIX_ID = :1 AND EFFDT=:2", &recMatrixDefn.HRMH_MATRIX_ID.Value, &recMatrixDefn.EFFDT.Value);
   For &i = 1 To &rs_OrgViews.ActiveRowCount
      If &TargetOrgViewType = &rs_OrgViews(&i).HRMH_ORG_ACCESS.HRCD_ORGVIEW_TYPE.Value Then
         If &rs_OrgViews(&i).HRMH_ORG_ACCESS.HRMH_ORGTYP_ACCESS.Value = "Y" Then
            &accessMatrix = True;
         Else
            &accessMatrix = False;
         End-If;
      End-If;
   End-For;
   Return &accessMatrix;
end-method;

/**************************************************************************
* addToStructureRowset
* 
* @param rowset
* @param rowset
* @return rowset
**************************************************************************/
method addToStructureRowset
   /+ &SourceRS as Rowset, +/
   /+ &MainRS as Rowset +/
   /+ Returns Rowset +/
   Local number &i;
   
   If &SourceRS.ActiveRowCount = 1 And
         All(&SourceRS(1).HR_OC_NODE_WRK.PTCHART_NODE.Value) Then
      /* copy to an empty rowset */
      If &MainRS.ActiveRowCount = 1 And
            None(&MainRS(1).HR_OC_NODE_WRK.PTCHART_NODE.Value) Then
         &SourceRS.CopyTo(&MainRS);
         Return &MainRS;
      End-If;
      
      /* copy to a populated rowset*/
      
      /* copy parent rowset into &StructRS */
      If &MainRS.InsertRow(&MainRS.ActiveRowCount) Then
         &SourceRS(1).CopyTo(&MainRS(&MainRS.ActiveRowCount));
      Else
         /* ERROR inserting the row */
      End-If;
      Return &MainRS;
      
   End-If;
   
   If &SourceRS.ActiveRowCount > 1 Then
      /* copy to an empty rowset */
      If &MainRS.ActiveRowCount = 1 And
            None(&MainRS(1).HR_OC_NODE_WRK.PTCHART_NODE.Value) Then
         For &i = 1 To &SourceRS.ActiveRowCount
            If &i > 1 Then
               If Not &MainRS.InsertRow(&MainRS.ActiveRowCount) Then
                  /* ERROR inserting the row */
               End-If;
            End-If;
            &SourceRS(&i).CopyTo(&MainRS(&MainRS.ActiveRowCount));
         End-For;
         Return &MainRS;
      End-If;
      
      /* copy to a populated rowset*/
      If &MainRS.ActiveRowCount > 1 Or
            (&MainRS.ActiveRowCount = 1 And
               All(&MainRS(1).HR_OC_NODE_WRK.PTCHART_NODE.Value)) Then
         For &i = 1 To &SourceRS.ActiveRowCount
            If Not &MainRS.InsertRow(&MainRS.ActiveRowCount) Then
               /* ERROR inserting the row */
            End-If;
            &SourceRS(&i).CopyTo(&MainRS(&MainRS.ActiveRowCount));
         End-For;
         Return &MainRS;
      End-If;
      
   End-If;
   
   Return &MainRS;
end-method;



method isMemberPublic
   /+ &sMatrixID as String, +/
   /+ &dAsOfDate as Date, +/
   /+ &sTargetEmplId as String, +/
   /+ &TargetEmplRcd as Integer +/
   /+ Returns Boolean +/
   If None(&sMatrixID) Or
         None(&sTargetEmplId) Then
      Return False;
   End-If;
   
   Local Record &recMatrixDefn = %This.getMatrixDefn(&sMatrixID, &dAsOfDate);
   If &recMatrixDefn.EFF_STATUS.Value <> "A" Then
      Return False;
   End-If;
   
   Return %This.isMember(&recMatrixDefn, &sTargetEmplId, String(&TargetEmplRcd));
end-method;



/*** 
Method:  addBreadcrumbNodesToRootManual 
Description:  ABN (SmartNav) related.  Creates a node rowset containing the parent nodes above the parent of focus node for a manually-defined matrix.
*/
method addBreadcrumbNodesToRootManual
   /+ &rsChartNodes as Rowset, +/
   /+ &recMatrixDefn as Record, +/
   /+ &arrDataPath as Array of String +/
   /+ Returns Rowset +/
   Local Rowset &rsSupv, &rsTemp, &rsCrumb, &rsReturn;
   Local integer &i;
   Local string &sFirstCrumbID;
   
   If &rsChartNodes = Null Or
         &recMatrixDefn = Null Then
      Return Null;
   End-If;
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   If &recMatrixDefn.HRMH_SOURCE.Value <> "M" Or
         All(&rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Or
         None(&rsChartNodes(1).HR_OC_NODE_WRK.EMPLID.Value) Or
         &rsChartNodes.ActiveRowCount < 2 Then
      Return Null;
   End-If;
   
   
   
   If &arrDataPath <> Null Then
      /* create breadcrumb nodes from abn portal data path */
      Local Rowset &rsCrumbStruct;
      Local string &sNewParent;
      &rsCrumbStruct = %This.createBreadCrumbsFromDataPath(&arrDataPath, &rsChartNodes, "M");
      
      If &rsCrumbStruct <> Null And
            (&rsCrumbStruct.ActiveRowCount >= 1 And
               All(&rsCrumbStruct(1).HR_OC_STRUCT_WK.PTCHART_NODE.Value)) Then
         &rsCrumbStruct.Sort(HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG, "A");
         For &i = &rsCrumbStruct.ActiveRowCount To 1 Step - 1
            If &rsCrumbStruct(&i).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y" Then
               &sNewParent = &rsCrumbStruct(&i).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value;
               &rsCrumbStruct.DeleteRow(&i);
               Break;
            End-If;
         End-For;
         If All(&sNewParent) Then
            &rsCrumb = %This.setStructRowSet(&rsCrumbStruct);
            &rsChartNodes = %This.mergeBreadcrumbRowset(&rsChartNodes, &rsCrumb, &sNewParent);
            Return &rsChartNodes;
         End-If;
      End-If;
   End-If;
   
   
   &i = 0;
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   &rsSupv = %This.getSupervisorManual(&recMatrixDefn, &rsChartNodes(1).HR_OC_NODE_WRK.EMPLID.Value, &rsChartNodes(1).HR_OC_NODE_WRK.EMPL_RCD.Value, %Date);
   
   While &rsSupv <> Null
      &rsTemp = %This.setStructRowSetManual(&recMatrixDefn, &rsSupv, 0, "N", "S");
      
      If &rsTemp = Null Or
            None(&rsTemp(1).HR_OC_NODE_WRK.PTCHART_NODE.Value) Or
            None(&rsTemp(1).HR_OC_NODE_WRK.EMPLID.Value) Then
         &rsSupv = Null;
      Else
         &i = &i + 1;
         If &i = 1 Then
            &rsCrumb = CreateRowset(Record.HR_OC_NODE_WRK);
            &rsTemp(1).GetRecord(1).CopyFieldsTo(&rsCrumb(1).GetRecord(1));
            &sFirstCrumbID = &rsTemp(1).HR_OC_NODE_WRK.PTCHART_NODE.Value;
         Else
            &rsCrumb.InsertRow(&rsCrumb.ActiveRowCount);
            &rsTemp(1).GetRecord(1).CopyFieldsTo(&rsCrumb(&rsCrumb.ActiveRowCount).GetRecord(1));
         End-If;
         
         If All(&rsTemp(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
            &rsSupv = %This.getSupervisorManual(&recMatrixDefn, &rsTemp(1).HR_OC_NODE_WRK.EMPLID.Value, &rsTemp(1).HR_OC_NODE_WRK.EMPL_RCD.Value, %Date);
         Else
            &rsSupv = Null;
         End-If;
      End-If;
      &rsTemp = Null;
   End-While;
   
   &rsReturn = %This.mergeBreadcrumbRowset(&rsChartNodes, &rsCrumb, &sFirstCrumbID);
   
   Return &rsReturn;
   
end-method;



method addBreadcrumbNodesToRootAccessType
   /+ &rsChartNodes as Rowset, +/
   /+ &arrDataPath as Array of String, +/
   /+ &recParms as Record, +/
   /+ &oChartUtil as HR_OC:ChartUtility, +/
   /+ &bIsMSS as Boolean +/
   /+ Returns Rowset +/
   
   If &recParms = Null Or
         &rsChartNodes = Null Or
         &iLimitDrillUp Or
         &oChartUtil = Null Or
         None(&recParms.ACCESS_TYPE.Value) Or
         (&recParms.ACCESS_TYPE.Value = "1" Or
            &recParms.ACCESS_TYPE.Value = "7") Then
      Return Null;
   End-If;
   
   Local Rowset &rsCrumbStruct, &rsCrumb;
   Local string &sNewParent;
   Local integer &i;
   
   If &arrDataPath <> Null Then
      /* create breadcrumb nodes from portal data path */
      &rsCrumbStruct = %This.createBreadCrumbsFromDataPath(&arrDataPath, &rsChartNodes, "A");
      
   Else
      /* create breadcrumb nodes from database */
      &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
      
      
      If All(&rsChartNodes(1).HR_OC_NODE_WRK.EMPLID.Value) Then
         &recParms.EMPLID.Value = &rsChartNodes(1).HR_OC_NODE_WRK.EMPLID.Value;
         &recParms.EMPL_RCD.Value = &rsChartNodes(1).HR_OC_NODE_WRK.EMPL_RCD.Value;
      Else
         &recParms.POSITION_NBR.Value = &rsChartNodes(1).HR_OC_NODE_WRK.POSITION_NBR.Value;
      End-If;
      
      If All(&recParms.EMPLID.Value) Or
            All(&recParms.POSITION_NBR.Value) Then
         
         &rsCrumbStruct = &oChartUtil.getBreadCrumbsDirRptsAPI(&recParms, &bIsMSS, 999);
         
      End-If;
   End-If;
   
   If &rsCrumbStruct <> Null And
         (&rsCrumbStruct.ActiveRowCount >= 1 And
            All(&rsCrumbStruct(1).HR_OC_STRUCT_WK.PTCHART_NODE.Value)) Then
      &rsCrumbStruct.Sort(HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG, "A");
      For &i = &rsCrumbStruct.ActiveRowCount To 1 Step - 1
         If &rsCrumbStruct(&i).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y" Then
            &sNewParent = &rsCrumbStruct(&i).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value;
            &rsCrumbStruct.DeleteRow(&i);
            Break;
         End-If;
      End-For;
      If All(&sNewParent) Then
         &rsCrumb = %This.setStructRowSet(&rsCrumbStruct);
         &rsChartNodes = %This.mergeBreadcrumbRowset(&rsChartNodes, &rsCrumb, &sNewParent);
      Else
         Return Null;
      End-If;
   End-If;
   
   
   Return &rsChartNodes;
end-method;


/*** 
Method:  addBreadcrumbNodesToRootTree 
Description:  ABN (SmartNav) related.  Creates a node rowset containing the parent nodes above the parent of focus node for a Tree-based matrix.
*/
method addBreadcrumbNodesToRootTree
   /+ &rsChartNodes as Rowset, +/
   /+ &recMatrixDefn as Record, +/
   /+ &arrDataPath as Array of String +/
   /+ Returns Rowset +/
   Local integer &i;
   Local string &sFirstCrumbID;
   
   If &rsChartNodes = Null Or
         &recMatrixDefn = Null Or
         &recMatrixDefn.HRMH_SOURCE.Value <> "T" Then
      Return Null;
   End-If;
   
   If &oTree = Null Or
         &oTreeStartNode = Null Then
      If Not %This.setValidateTree(&recMatrixDefn.TREE_NAME.Value, &recMatrixDefn.TREE_NODE_START.Value) Then
         Return Null;
      End-If;
   End-If;
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   If All(&rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Or
         &rsChartNodes.ActiveRowCount < 2 Then
      Return Null;
   End-If;
   
   If &arrDataPath <> Null Then
      /* create breadcrumb nodes from abn portal data path */
      Local Rowset &rsCrumbStruct, &rsCrumb;
      Local string &sNewParent;
      &rsCrumbStruct = %This.createBreadCrumbsFromDataPath(&arrDataPath, &rsChartNodes, "T");
      
      If &rsCrumbStruct <> Null And
            (&rsCrumbStruct.ActiveRowCount >= 1 And
               All(&rsCrumbStruct(1).HR_OC_STRUCT_WK.PTCHART_NODE.Value)) Then
         &rsCrumbStruct.Sort(HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG, "A");
         For &i = &rsCrumbStruct.ActiveRowCount To 1 Step - 1
            If &rsCrumbStruct(&i).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y" Then
               &sNewParent = &rsCrumbStruct(&i).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value;
               &rsCrumbStruct.DeleteRow(&i);
               Break;
            End-If;
         End-For;
         If All(&sNewParent) Then
            &rsCrumb = %This.setStructRowSet(&rsCrumbStruct);
            &rsChartNodes = %This.mergeBreadcrumbRowset(&rsChartNodes, &rsCrumb, &sNewParent);
            Return &rsChartNodes;
         End-If;
      End-If;
   End-If;
   
   
   /* fallback - create breadcrumb nodes from the tree */
   &i = 0;
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   Local ApiObject &oChartRootNode, &oTargetNode, &oParentNode;
   
   Local string &sChartRootNodeId;
   If &iOwnerInjected Then
      &rsChartNodes.Sort(HR_OC_NODE_WRK.PTFOCUS_FLAG, "D");
      &sChartRootNodeId = &rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value;
      &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   Else
      &sChartRootNodeId = &rsChartNodes(1).HR_OC_NODE_WRK.PTCHART_NODE.Value;
   End-If;
   
   &oChartRootNode = &oTree.FindNode(&sChartRootNodeId, "");
   
   If &oChartRootNode = Null Or /* 1-root of chart not found */
         &oChartRootNode.IsRoot Or /* 2-root of chart = root of tree */
         &oTreeStartNode.name = &oChartRootNode.name /* 3-root of chart = start node */ Then
      /* no need to build breadcrumbs.  the root node of the hierarchy is in the chart, so ABN will draw the breadcrumbs from the chart data */
      Return Null;
   End-If;
   
   &oTargetNode = &oChartRootNode;
   &sFirstCrumbID = &oTargetNode.parent.name;
   
   If None(&sFirstCrumbID) Then
      Return Null;
   Else
      If &iOwnerInjected Then
         For &i = 1 To &rsChartNodes.ActiveRowCount
            If &rsChartNodes(&i).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &iInjectedOwnerNodeId Then
               &rsChartNodes(&i).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &sFirstCrumbID;
            End-If;
         End-For;
      Else
         &rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &sFirstCrumbID;
      End-If;
   End-If;
   
   While ( Not &oTargetNode.IsRoot And
         All(&oTargetNode.parent) And
         &oTargetNode.name <> &oTreeStartNode.name)
      &oParentNode = &oTargetNode.parent;
      &rsChartNodes.InsertRow(&rsChartNodes.ActiveRowCount);
      
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTCHART_NODE.Value = &oParentNode.name;
      If &oParentNode.parent = Null Or
            &oParentNode.name = &oTreeStartNode.name Then
         If &iOwnerInjected Then
            &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &iInjectedOwnerNodeId;
         End-If;
      Else
         &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &oParentNode.parent.name;
      End-If;
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PTNODE_DESCR1.Value = &oParentNode.description;
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.TREE_NAME.Value = &oParentNode.TreeName;
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.TREE_EFFDT.Value = &oParentNode.TreeEffDt;
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.TREE_NODE.Value = &oParentNode.Name;
      &rsChartNodes(&rsChartNodes.ActiveRowCount).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
      
      &iLastTopNodeId = &oParentNode.name;
      
      /* prepare for next loop */
      &oTargetNode = &oParentNode;
   End-While;
   
   
   Return &rsChartNodes;
end-method;



method mergeBreadcrumbRowset
   /+ &rsChartNodes as Rowset, +/
   /+ &rsBreadCrumbs as Rowset, +/
   /+ &sFirstBreadCrumbNode as String +/
   /+ Returns Rowset +/
   
   If &rsChartNodes = Null Or
         &rsBreadCrumbs = Null Or
         (&rsBreadCrumbs.ActiveRowCount = 1 And
            None(&rsBreadCrumbs(1).HR_OC_NODE_WRK.PTCHART_NODE.Value)) Then
      Return Null;
   End-If;
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   Local integer &i;
   
   If All(&sFirstBreadCrumbNode) Then
      &rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value = &sFirstBreadCrumbNode;
      &rsChartNodes(1).HR_OC_NODE_WRK.PARENT_FLAG.Value = "Y";
   End-If;
   
   For &i = 1 To &rsBreadCrumbs.ActiveRowCount
      If Not &rsBreadCrumbs.GetRow(&i).IsDeleted Then
         &rsChartNodes.InsertRow(&rsChartNodes.ActiveRowCount);
         &rsBreadCrumbs(&i).GetRecord(1).CopyFieldsTo(&rsChartNodes(&rsChartNodes.ActiveRowCount).GetRecord(1));
      End-If;
   End-For;
   
   rem &rsChartNodes.Sort(HR_OC_NODE_WRK.PTPARENT_CHART_ND, "A", HR_OC_NODE_WRK.PTCHART_NODE, "A");
   
   Return &rsChartNodes;
end-method;



method createBreadCrumbsFromDataPath
   /+ &arrABNDataPath as Array of String, +/
   /+ &rsChartNodes as Rowset, +/
   /+ &sSourceType as String +/
   /+ Returns Rowset +/
   If &rsChartNodes = Null Or
         &arrABNDataPath = Null Or
         (&arrABNDataPath.Len = 1 And
            None(&arrABNDataPath [1])) Then
      Return Null;
   End-If;
   
   Local Rowset &rsReturn = CreateRowset(Record.HR_OC_STRUCT_WK);
   Local integer &i, &Row;
   Local array of string &arrEmp;
   
   &rsChartNodes.Sort(HR_OC_NODE_WRK.PTFOCUS_FLAG, "D");
   If &rsChartNodes(1).HR_OC_NODE_WRK.PTFOCUS_FLAG.Value <> "Y" Or
         None(&rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value) Then
      /* focus not found or focus has no parent */
      Return Null;
   End-If;
   
   Local string &sChartFocusNode = &rsChartNodes(1).HR_OC_NODE_WRK.PTCHART_NODE.Value;
   Local string &sChartFocusParent = &rsChartNodes(1).HR_OC_NODE_WRK.PTPARENT_CHART_ND.Value;
   Local string &sEmplId;
   Local integer &nEmplRcd;
   
   For &i = 1 To &arrABNDataPath.Len
      If None(&arrABNDataPath [&i]) Then
         Return Null;
      End-If;
      If &arrABNDataPath [&i] <> &sChartFocusNode Then
         If &i > 1 Then
            &rsReturn.InsertRow(&rsReturn.ActiveRowCount);
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.PTPARENT_CHART_ND.Value = &arrABNDataPath [&i - 1];
         End-If;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.PTCHART_NODE.Value = &arrABNDataPath [&i];
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.TREE_NODE.Value = &arrABNDataPath [&i];
         If &sSourceType = "T" Then
            If &oTreeNodeKeyUtil <> Null Then
               &arrEmp = &oTreeNodeKeyUtil.getJobByTreeNodeKey(&arrABNDataPath [&i]);
            End-If;
         Else
            &arrEmp = Split(&arrABNDataPath [&i], &iOrgViewerDelim);
         End-If;
         If &arrEmp <> Null And
               &arrEmp.Len = 2 And
               IsNumber(&arrEmp [2]) Then
            &sEmplId = &arrEmp [1];
            &nEmplRcd = Value(&arrEmp [2]);
            
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.EMPLID.Value = &sEmplId;
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.EMPL_RCD.Value = &nEmplRcd;
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.DESCR.Value = get_person_name(&sEmplId, "", "", "");
         End-If;
         &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.HR_OC_IS_PARENT.Value = "Y";
         If &arrABNDataPath [&i] = &sChartFocusParent Then
            &rsReturn(&rsReturn.ActiveRowCount).HR_OC_STRUCT_WK.HR_OC_TARGET_FLAG.Value = "Y";
         End-If;
      End-If;
   End-For;
   
   Return &rsReturn;
end-method;



/* 16519417 */
method getPerOrgParm
   /+ Returns String +/
   If &iExcludeContWorker Then
      Return "EMP";
   Else
      Return "CWR";
   End-If;
end-method;


method getPerOrgCondition
   /+ &sAlias as String +/
   /+ Returns String +/
   Local string &sAliasWrk;
   If All(&sAlias) Then
      &sAliasWrk = &sAlias | ".";
   End-If;
   If &iExcludeContWorker Then
      Return " AND " | &sAliasWrk | "PER_ORG = 'EMP' ";
   Else
      Return " AND " | &sAliasWrk | "PER_ORG IN ('EMP', 'CWR') ";
   End-If;
end-method;

/* 16519417 */
